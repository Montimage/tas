{"version":3,"sources":["VERSION.js","actions/index.js","utils.js","reducers/modelReducer.js","reducers/requestingReducer.js","reducers/notificationReducer.js","reducers/logsReducer.js","reducers/editingFormReducer.js","reducers/simulationStatusReducer.js","reducers/statsReducer.js","reducers/allModelsReducer.js","reducers/allDataRecordersReducer.js","reducers/dataRecorderReducer.js","reducers/dataRecorderStatusReducer.js","reducers/dataStorageReducer.js","reducers/testCampaignsReducer.js","reducers/devoptsReducer.js","reducers/testCasesReducer.js","reducers/datasetsReducer.js","reducers/index.js","api/index.js","sagas/requestModelSaga.js","sagas/uploadModelSaga.js","sagas/simulationSaga.js","sagas/requestLogsSaga.js","sagas/requestDataRecorderSaga.js","sagas/dataStorageSaga.js","sagas/testCampaignsSaga.js","sagas/testCasesSaga.js","sagas/datasetsSaga.js","sagas/eventsSaga.js","sagas/devoptsSaga.js","sagas/index.js","store/index.js","components/TSHeader/TSHeader.js","components/TSHeader/index.js","components/TSModal/index.js","components/TSModal/TSModal.js","components/FormItems/FormTextAreaItem.js","components/FormItems/FormSelectItem.js","components/FormItems/FormNumberItem.js","components/FormItems/FormSwitchItem.js","components/FormItems/FormTimeRangeItem.js","components/FormItems/FormCheckBoxItems.js","components/FormItems/FormRegularNumberItem.js","components/FormItems/FormEditableTextItem.js","components/FormItems/FormTextNotEditableItem.js","components/CollapseForm/CollapseForm.js","components/CollapseForm/index.js","components/SensorModal/DataSourceForms/DataSourceForm.js","components/SensorModal/DataSourceForms/EnergyForm.js","components/SensorModal/DataSourceForms/BooleanForm.js","components/SensorModal/DataSourceForms/EnumForm.js","components/SensorModal/DataSourceForms/IntegerFloatForm.js","components/SensorModal/DataSourceForms/MultipleDataSources.js","components/SensorModal/DataGeneratorForm.js","components/SensorModal/SensorModal.js","components/SensorModal/index.js","components/ActuatorModal/ActuatorModal.js","components/ActuatorModal/index.js","components/JSONView/Editor.jsx","components/JSONView/index.js","components/JSONView/JSONView.js","components/TSFooter/TSFooter.js","components/TSFooter/index.js","pages/LayoutPage.js","components/ConnectionConfig/MongoDBOptions.js","components/ConnectionConfig/index.js","components/ConnectionConfig/ConnectionConfig.js","pages/ModelPage.js","pages/DummyPage.js","pages/DataStoragePage.js","pages/TestCampaignListPage.js","components/SimulationStatus/SimulationStatus.js","pages/ModelListPage.js","pages/DataRecorderListPage.js","pages/DataRecorderPage.js","components/SelectionModal/SelectionModal.js","components/SelectionModal/index.js","pages/TestCampaignPage.js","pages/TestCaseListPage.js","pages/TestCasePage.js","pages/DatasetListPage.js","components/EventModal/EventModal.js","components/EventModal/index.js","pages/DatasetPage.js","pages/SimulationPage.js","pages/LogFileContent.js","pages/LogsPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","setNotification","createAction","resetNotification","requestAllModels","setAllModels","requestDeleteModel","requestDuplicateModel","deleteModelOK","duplicateModelOK","requestAddNewModel","addNewModelOK","requestUpdateModel","updateModelOK","requestModel","setModel","changeModelName","addThing","deleteThing","addSimulationSensor","addSimulationActuator","deleteSimulationSensor","deleteSimulationActuator","changeStatusSensor","changeStatusActuator","resetModel","uploadModel","uploadModelOK","requestAllDataRecorders","setAllDataRecorders","requestDeleteDataRecorder","requestDuplicateDataRecorder","deleteDataRecorderOK","duplicateDataRecorderOK","requestAddNewDataRecorder","addNewDataRecorderOK","requestUpdateDataRecorder","updateDataRecorderOK","requestDataRecorder","setDataRecorder","changeDataRecorderName","resetDataRecorder","requestStartDataRecorder","requestStopDataRecorder","requestDataRecorderStatus","setDataRecorderStatus","requestAllLogFiles","requestAllLogFilesOK","requestLogFile","requestLogFileOK","requestDeleteLogFile","requestDeleteLogFileOK","showModal","selectDevice","changeStatusThing","selectSensor","selectActuator","requestStatsOK","requestDataStorage","requestUpdateDataStorage","setDataStorage","requestTestDataStorageConnection","setDataStorageConnectionStatus","requestAllTestCampaigns","setAllTestCampaigns","setCurrentTestCampaign","requestDeleteTestCampaign","deleteTestCampaignOK","requestAddNewTestCampaign","addNewTestCampaignOK","requestTestCampaign","requestUpdateTestCampaign","requestLaunchTestCampaign","requestStopTestCampaign","requestTestCampaignStatus","setTestCampaignRunningStatus","requestAllTestCases","setAllTestCases","setCurrentTestCase","requestDeleteTestCase","deleteTestCaseOK","requestAddNewTestCase","addNewTestCaseOK","requestTestCase","requestUpdateTestCase","requestAllDatasets","setAllDatasets","setCurrentDataset","requestDeleteDataset","deleteDatasetOK","requestAddNewDataset","addNewDatasetOK","requestDataset","requestUpdateDataset","requestEventsByDatasetId","setEvents","requestDeleteEvent","deleteEventOK","requestAddNewEvent","addNewEventOK","requestUpdateEvent","updateEventOK","requestStartSimulation","requestStopSimulation","requestSimulationStatus","setSimulationStatus","requestDevopts","requestUpdateDevopts","setDevopts","updateObjectByPath","obj","path","value","stack","split","length","key","shift","indexOf","array","index","replace","push","lastKey","splice","deepCloneObject","JSON","parse","stringify","addNewElementToArray","newElement","found","id","removeElementFromArray","elmId","isDeleted","console","log","getCreatedTimeFromFileName","fileName","timeString","Date","Number","getQuery","qname","URLSearchParams","window","location","search","get","getLastPath","pathname","lastPath","initState","name","createReducer","produce","draft","model","state","newName","thing","things","newThings","thingID","enable","error","sensor","foundThing","newSensors","sensors","actuator","newActuators","actuators","sensorID","tIndex","actuatorID","type","message","logs","logFiles","logFile","formID","selectedDevice","selectedSensor","selectedActuator","dataStorage","status","stats","models","modelFileName","dupModel","newModel","dataRecorders","dataRecorderFileName","dupDataRecorder","newDataRecorder","dataRecorder","connConfig","connectionStatus","testCampaigns","allTestCampaigns","newTC","newAllTestCampaigns","testCampaignId","testCampaign","currentTestCampaign","runningStatus","devopts","testCases","allTestCases","newAllTestCases","testCaseId","testCase","currentTestCase","datasets","allDatasets","newDS","newAllDatasets","currentDataset","dataset","datasetId","events","newEvent","eventId","newEvents","event","_id","rootReducer","combineReducers","allDataRecorders","allDataRecordersReducer","dataRecorderReducer","dataRecorderStatus","dataRecorderStatusReducer","dataStorageReducer","allModels","allModelsReducer","modelReducer","statsReducer","logsReducer","notify","notificationReducer","requesting","requestingReducer","editingForm","editingFormReducer","simulationStatus","simulationStatusReducer","testCampaignsReducer","devoptsReducer","testCasesReducer","datasetsReducer","a","url","fetch","response","json","data","method","result","headers","body","isDuplicated","updateModel","uploadDataRecorder","updateDataRecorder","sendRequestStartDataRecorder","sendRequestStopDataRecorder","sendRequestDataRecorderStatus","sendRequestDataStorage","sendRequestUpdateDataStorage","sendRequestTestDataStorageConnection","sendRequestLogFile","tool","content","sendRequestDeleteLogFile","sendRequestAllLogFiles","files","sendRequestStopSimulation","sendRequestSimulationStatus","sendRequestTestCampaign","tcId","sendRequestUpdateTestCampaign","sendRequestAllTestCampaigns","sendRequestAddNewTestCampaign","sendRequestDeleteTestCampaign","sendRequestDevopts","sendRequestUpdateDevopts","sendRequestTestCase","sendRequestUpdateTestCase","sendRequestAllTestCases","sendRequestAddNewTestCase","sendRequestDeleteTestCase","sendRequestDataset","sendRequestUpdateDataset","sendRequestAllDatasets","sendRequestAddNewDataset","sendRequestDeleteDataset","sendRequestEvent","sendRequestUpdateEvent","sendRequestEventsByDatasetId","dsId","sendRequestAddNewEvent","sendRequestDeleteEvent","sendRequestStartSimulation","newDataset","options","sendRequestLaunchTestCampaign","sendRequestStopTestCampaign","sendRequestTestCampaignStatus","handleRequestModel","handleRequestDeleteModel","handleRequestDuplicateModel","handleRequestAddNewModel","handleRequestUpdateModel","handleRequestAllModels","watchRequestModel","action","payload","call","put","duplicatedModel","takeEvery","handleSaveModel","watchSaveModel","getModel","select","Error","handleRequestStartSimulation","handleRequestStopSimulation","handleRequestSimulationStatus","watchSimulation","SimulationStatus","handleRequestAllLogFiles","handleRequestLogFile","handleRequestDeleteLogFile","watchRequestLogs","handleRequestDataRecorder","handleRequestDeleteDataRecorder","handleRequestDuplicateDataRecorder","handleRequestAddNewDataRecorder","handleRequestUpdateDataRecorder","handleRequestStartDataRecorder","handleRequestStopDataRecorder","handleRequestDataRecorderStatus","handleRequestAllDataRecorders","watchRequestDataRecorder","duplicatedDataRecorder","handleRequestDataStorage","handleRequestUpdateDataStorage","handleRequestTestDataStorageConnection","watchRequestDataStorage","newDataStorage","handleRequestTestCampaign","handleRequestUpdateTestCampaign","handleRequestAllTestCampaigns","handleRequestAddNewTestCampaign","handleRequestDeleteTestCampaign","handleRequestLaunchTestCampaign","handleRequestStopTestCampaign","handleRequestTestCampaignStatus","watchTestCampaigns","newTestCampaign","handleRequestTestCase","handleRequestUpdateTestCase","handleRequestAllTestCases","handleRequestAddNewTestCase","handleRequestDeleteTestCase","watchTestCases","newTestCase","handleRequestDataset","handleRequestUpdateDataset","handleRequestAllDatasets","handleRequestAddNewDataset","handleRequestDeleteDataset","watchDatasets","Dataset","handleRequestEvent","handleRequestEventsByDatasetId","handleRequestUpdateEvent","handleRequestAllEvents","handleRequestAddNewEvent","handleRequestDeleteEvent","watchEvents","allEvents","handleRequestDevopts","handleRequestUpdateDevopts","watchDevopts","newDevopts","rootSaga","all","requestModelSaga","requestDataRecorderSaga","uploadModelSaga","simulationSaga","requestLogsSaga","dataStorageSaga","testCampaignsSaga","devoptsSaga","testCasesSaga","datasetsSaga","eventsSaga","configStore","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","run","Header","Layout","TSHeader","menuLinks","selectedMenu","fullPath","currentPositionIndex","positionIndex","span","href","src","className","alt","style","maxWidth","objectFit","theme","mode","lineHeight","selectedKeys","Item","InteractionOutlined","FolderOpenOutlined","ClusterOutlined","DeploymentUnitOutlined","EyeOutlined","FileTextOutlined","DatabaseOutlined","Component","connect","dispatch","TSModal","visible","title","footer","onCancel","children","FormTextAreaItem","label","defaultValue","onChange","helpText","rules","extra","TextArea","rows","v","target","minWidth","FormSelectItem","map","tid","Option","FormNumberItem","min","max","placeholder","FormSwitchItem","DatePicker","RangePicker","checked","checkedChildren","unCheckedChildren","FormCheckBoxItem","Group","FormRegularNumberItem","items","grid","gutter","column","dataSource","renderItem","item","size","bordered","dataPath","Text","Typography","FormEditableTextItem","editable","code","FormTextNotEditableItem","copyable","Panel","Collapse","CollapseForm","active","accordion","margin","defaultActiveKey","header","defaultBehaviours","DataSourceForm","behaviours","required","resourceId","unit","FormCheckBoxItems","concat","onClick","EnergyForm","Fragment","dPath","initValue","consumInOnePeriod","low","slowDownRate","BooleanForm","EnumForm","values","defaultValueConstraints","regularMin","regularMax","step","ValueConstraintForm","IntegerFloatForm","withValueConstraints","valueConstraints","MultipleDataSources","sources","source","DataGeneratorForm","dataSpecs","onDataChange","scale","timePeriod","sensorBehaviours","dosAttackSpeedUpRate","timeBeforeFailed","isIPSOFormat","energy","withEnergy","overlay","placement","UpOutlined","SensorModal","props","sensorData","isChanged","this","setState","prevState","newData","onOK","onClose","deviceId","reportFormats","saveData","disabled","labelCol","wrapperCol","objectId","topic","reportFormat","ActuatorModal","actuatorData","modalID","act","deviceID","modes","tree","view","form","text","Object","allValues","Editor","htmlElementRef","jsonEditor","handleChange","bind","setRef","collapseAll","expandAll","focus","allowedModes","rest","innerRef","htmlElementProps","tag","createEditor","schema","schemaRefs","setSchema","getName","setName","destroy","newProps","set","element","JSONEditor","getText","currentJson","err","React","createElement","ref","defaultProps","history","navigationBar","statusBar","JSONView","ace","Footer","TSFooter","textAlign","marginTop","getFullYear","VERSION","Title","Content","LayoutPage","pageTitle","pageSubTitle","backgroundColor","notification","toUpperCase","description","padding","level","paddingTop","tip","MongoDBOptions","user","password","dbname","ConnectionConfig","host","port","ModelDeviceItem","onDelete","onDuplicate","changeModalId","selectedModalId","onEnable","defaultChecked","stopPropagation","marginRight","danger","newId","orientation","testBroker","protocol","productionBroker","actions","newSensor","newActuator","newDevice","currentTime","now","timeToDown","ModelPage","isNewModel","tempModel","onModelChange","fetchDataStorage","fileData","blob","Blob","URL","createObjectURL","link","document","download","click","devices","username","addNewModel","viewType","newDatasetId","tags","addCustomDataStorage","device","newDevices","SwitcherOutlined","exportModel","ExportOutlined","CaretRightOutlined","deleteSensor","deleteActuator","DummyPage","DataStoragePage","tempDataStorage","isDSChanged","onDataStorageChange","testConnection","updateDataStorage","color","setTimeout","TestCampaignListPage","webhookURL","undefined","fetchTestCampaigns","fetchDevopts","tc","newTc","testCaseIds","addNewTestCampaign","wb","deleteTestCampaign","updateDevopts","launchTestCampaign","stopTestCampaign","columns","render","width","updateTestCampaignId","BuildOutlined","duplicateTestCampaign","CopyOutlined","reportFileName","DeleteOutlined","updateWebhookURL","xs","offset","sm","isRunning","marginBottom","fetchTestCampaignStatus","ModelListPage","fileReader","FileReader","onloadend","importNewModel","readAsText","fetchAllModels","deleteModel","duplicateModel","startSimulation","ClearOutlined","inputFileDOM","ImportOutlined","onUpload","input","display","accept","multiple","trigger","e","preventDefault","DownOutlined","fetchSimulationStatus","DataRecorderListPage","importNewDataRecorder","fetchAllDataRecorders","deleteDataRecorder","duplicateDataRecorder","startDataRecorder","DataRecorderItem","upStreams","newUpStreams","downStreams","newDownStreams","newDownstreams","forward","newTempDataRecorder","DataRecorderPage","decodeURI","isNewDataRecorder","tempDataRecorder","onDataRecorderChange","fetchDataRecorderStatus","addNewDataRecorder","stopDataRecorder","dr","newDataRecorders","startedTime","toLocaleTimeString","CloseSquareOutlined","SelectionModal","TestCampaignPage","originalId","isNew","showTestCaseModal","fetchTestCampaign","fetchTestCases","newTestCaseIds","selectTC","newDescription","updateTestCampaign","moveTestCaseUp","moveTestCaseDown","removeTestCase","updateId","updateName","updateDescription","updateTestCaseIds","saveTestCampaign","updatedTestCampaign","TestCaseListPage","addNewTestCase","deleteTestCase","duplicateTestCase","TestCasePage","datasetIds","showDatasetModal","fetchTestCase","fetchModelFiles","fetchDatasets","newDatasetIds","selectDS","newDatasets","newModelFileName","newTags","updateTestCase","ds","sorter","b","createdAt","moment","format","moveDatasetUp","moveDatasetDown","removeDataset","updateModelFileName","updateTags","updateDatasets","saveTestCase","updatedTestCase","DatasetListPage","lastModified","addNewDataset","deleteDataset","duplicateDataset","EventModal","timestamp","isSensorData","initEvent","DatasetPage","activeEventModal","fetchDataset","fetchEvents","newSource","addNewdataset","updatedataset","nbEvents","startTime","endTime","topicFilters","nbSensors","nbActuators","dataIndex","ts","filters","onFilter","deleteEvent","addNewEvent","changeActiveEventModal","updateEvent","updateSource","toLocaleString","savedataset","updateddataset","SimulationPage","datasetName","datasetDescription","datasetTags","setInterval","desc","stopSimulation","datasetOptions","onModelFileNameChange","onDatasetIdChange","onNewDatasetIdChange","onDatasetNameChange","onDatasetDescriptionChange","onDatasetTagsChange","LogLine","time","LogFileContent","getHours","getMinutes","getSeconds","getDay","getMonth","LogsPage","isLogPage","fetchAllLogFiles","fetchLogs","deleteLogFile","file","localeCompare","fromNow","App","height","exact","to","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.87c85d7d.chunk.js","sourcesContent":["module.exports = '0.9.0';","import {createAction } from 'redux-act';\n// Notification\nexport const setNotification = createAction('SET_NOTIFICATION');\nexport const resetNotification = createAction('RESET_NOTIFICATION');\n\n// All Models\nexport const requestAllModels = createAction('REQUEST_ALL_MODELS');\nexport const setAllModels = createAction('SET_ALL_MODELS');\nexport const requestDeleteModel = createAction('REQUEST_DELETE_MODEL');\nexport const requestDuplicateModel = createAction('REQUEST_DUPLICATE_MODEL');\nexport const deleteModelOK = createAction('DELETE_MODEL_OK');\nexport const duplicateModelOK = createAction('DUPLICATE_MODEL_OK');\nexport const requestAddNewModel = createAction('REQUEST_ADD_NEW_MODEL');\nexport const addNewModelOK = createAction('ADD_NEW_MODEL_OK');\nexport const requestUpdateModel = createAction('REQUEST_UPDATE_MODEL');\n// Model detail\nexport const updateModelOK = createAction('UPDATE_MODEL_OK');\nexport const requestModel = createAction('REQUEST_MODEL');\nexport const setModel = createAction('SET_MODEL');\n// Model - modification\nexport const changeModelName = createAction('CHANGE_MODEL_NAME');\nexport const addThing = createAction('ADD_THING');\nexport const deleteThing = createAction('DELETE_THING');\nexport const addSimulationSensor = createAction('ADD_SIMULATION_SENSOR');\nexport const addSimulationActuator = createAction('ADD_SIMULATION_ACTUATOR');\nexport const deleteSimulationSensor = createAction('DELETE_SIMULATION_SENSOR');\nexport const deleteSimulationActuator = createAction('DELETE_SIMULATION_ACTUATOR');\nexport const changeStatusSensor = createAction('CHANGE_STATUS_SENSOR');\nexport const changeStatusActuator = createAction('CHANGE_STATUS_ACTUATOR');\nexport const resetModel = createAction('RESET_MODEL');\n// Save Model to Server\nexport const uploadModel = createAction('UPLOAD_MODEL');\nexport const uploadModelOK = createAction('UPLOAD_MODEL_OK');\n\nexport const requestAllDataRecorders = createAction('REQUEST_ALL_DATA_RECORDERS');\nexport const setAllDataRecorders = createAction('SET_ALL_DATA_RECORDERS');\nexport const requestDeleteDataRecorder = createAction('REQUEST_DELETE_DATA_RECORDER');\nexport const requestDuplicateDataRecorder = createAction('REQUEST_DUPLICATE_DATA_RECORDER');\nexport const deleteDataRecorderOK = createAction('DELETE_DATA_RECORDER_OK');\nexport const duplicateDataRecorderOK = createAction('DUPLICATE_DATA_RECORDER_OK');\nexport const requestAddNewDataRecorder = createAction('REQUEST_ADD_NEW_DATA_RECORDER');\nexport const addNewDataRecorderOK = createAction('ADD_NEW_DATA_RECORDER_OK');\nexport const requestUpdateDataRecorder = createAction('REQUEST_UPDATE_DATA_RECORDER');\nexport const updateDataRecorderOK = createAction('UPDATE_DATA_RECORDER_OK');\nexport const requestDataRecorder = createAction('REQUEST_DATA_RECORDER');\nexport const setDataRecorder = createAction('SET_DATA_RECORDER');\nexport const changeDataRecorderName = createAction('CHANGE_DATA_RECORDER_NAME');\nexport const resetDataRecorder = createAction('RESET_DATA_RECORDER');\nexport const requestStartDataRecorder = createAction('REQUEST_START_DATA_RECORDER');\nexport const requestStopDataRecorder = createAction('REQUEST_STOP_DATA_RECORDER');\nexport const requestDataRecorderStatus = createAction('REQUEST_DATA_RECORDER_STATUS');\nexport const setDataRecorderStatus = createAction('SET_DATA_RECORDER_STATUS');\n\n// Control the Simulation\n// export const sendDeployStart = createAction('SEND_DEPLOY_START');\n// export const deployStartOK = createAction('DEPLOY_START_OK');\n// export const sendDeployStop = createAction('SEND_DEPLOY_STOP');\n// export const deployStopOK = createAction('DEPLOY_STOP_OK');\n// export const requestDeployStatus = createAction('REQUEST_DEPLOY_STATUS');\n\n// Control the logs\nexport const requestAllLogFiles = createAction('REQUEST_ALL_LOG_FILES');\nexport const requestAllLogFilesOK = createAction('REQUEST_ALL_LOG_FILES_OK');\nexport const requestLogFile = createAction('REQUEST_LOG_FILE');\nexport const requestLogFileOK = createAction('REQUEST_LOG_FILE_OK');\nexport const requestDeleteLogFile = createAction('REQUEST_DELETE_LOG_FILE');\nexport const requestDeleteLogFileOK = createAction('REQUEST_DELETE_LOG_FILE_OK');\n\n// editing forms\nexport const showModal = createAction('SHOW_MODAL');\nexport const selectDevice = createAction('SELECT_DEVICE');\nexport const changeStatusThing = createAction('CHANGE_STATUS_THING');\nexport const selectSensor = createAction('SELECT_SENSOR');\nexport const selectActuator = createAction('SELECT_ACTUATOR');\nexport const selectDataStorage = createAction('SELECT_DATA_STORAGE');\n\n\n// Statistics\nexport const requestStats = createAction('REQUEST_STATS');\nexport const requestStatsOK = createAction('REQUEST_STATS_OK');\n\n// Data storage\nexport const requestDataStorage = createAction('REQUEST_DATA_STORAGE');\nexport const requestUpdateDataStorage = createAction('REQUEST_UPDATE_DATA_STORAGE');\nexport const setDataStorage = createAction('SET_DATA_STORAGE');\nexport const requestTestDataStorageConnection = createAction('REQUEST_TEST_DATA_STORAGE_CONNECTION');\nexport const setDataStorageConnectionStatus = createAction('SET_DATA_STORAGE_CONNECTION_STATUS');\n\n\n// Test Campaigns\nexport const requestAllTestCampaigns = createAction('REQUEST_ALL_TEST_CAMPAIGNS');\nexport const setAllTestCampaigns = createAction('SET_ALL_TEST_CAMPAIGNS');\nexport const setCurrentTestCampaign = createAction('SET_CURRENT_TEST_CAMPAIGN');\nexport const requestDeleteTestCampaign = createAction('REQUEST_DELETE_TEST_CAMPAIGN');\nexport const deleteTestCampaignOK = createAction('DELETE_TEST_CAMPAIGN_OK');\nexport const requestAddNewTestCampaign = createAction('REQUEST_ADD_NEW_TEST_CAMPAIGN');\nexport const addNewTestCampaignOK = createAction('ADD_NEW_TEST_CAMPAIGN_OK');\nexport const requestTestCampaign = createAction('REQUEST_TEST_CAMPAIGN');\nexport const requestUpdateTestCampaign = createAction('REQUEST_UPDATE_TEST_CAMPAIGN');\nexport const updateTestCampaignOK = createAction('UPDATE_TEST_CAMPAIGN_OK');\n// Manage devopts\nexport const requestLaunchTestCampaign = createAction('REQUEST_LAUNCH_TEST_CAMPAIGN');\nexport const requestStopTestCampaign = createAction('REQUEST_STOP_TEST_CAMPAIGN');\nexport const requestTestCampaignStatus = createAction('REQUEST_TEST_CAMPAIGN_STATUS');\nexport const setTestCampaignRunningStatus = createAction('SET_TEST_CAMPAIGN_RUNNING_STATUS');\n\n// Test cases\nexport const requestAllTestCases = createAction('REQUEST_ALL_TEST_CASES');\nexport const setAllTestCases = createAction('SET_ALL_TEST_CASES');\nexport const setCurrentTestCase = createAction('SET_CURRENT_TEST_CASE');\nexport const requestDeleteTestCase = createAction('REQUEST_DELETE_TEST_CASE');\nexport const deleteTestCaseOK = createAction('DELETE_TEST_CASE_OK');\nexport const requestAddNewTestCase = createAction('REQUEST_ADD_NEW_TEST_CASE');\nexport const addNewTestCaseOK = createAction('ADD_NEW_TEST_CASE_OK');\nexport const requestTestCase = createAction('REQUEST_TEST_CASE');\nexport const requestUpdateTestCase = createAction('REQUEST_UPDATE_TEST_CASE');\nexport const updateTestCaseOK = createAction('UPDATE_TEST_CASE_OK');\n\n\n// Dataset\nexport const requestAllDatasets = createAction('REQUEST_ALL_DATA_SETS');\nexport const setAllDatasets = createAction('SET_ALL_DATA_SETS');\nexport const setCurrentDataset = createAction('SET_CURRENT_DATA_SET');\nexport const requestDeleteDataset = createAction('REQUEST_DELETE_DATA_SET');\nexport const deleteDatasetOK = createAction('DELETE_DATA_SET_OK');\nexport const requestAddNewDataset = createAction('REQUEST_ADD_NEW_DATA_SET');\nexport const addNewDatasetOK = createAction('ADD_NEW_DATA_SET_OK');\nexport const requestDataset = createAction('REQUEST_DATA_SET');\nexport const requestUpdateDataset = createAction('REQUEST_UPDATE_DATA_SET');\nexport const updateDatasetOK = createAction('UPDATE_DATA_SET_OK');\n\n// Event\nexport const requestEventsByDatasetId = createAction('REQUEST_EVENTS_BY_DATASET_ID');\nexport const setEvents = createAction('SET_EVENTS');\nexport const requestDeleteEvent = createAction('REQUEST_DELETE_EVENT');\nexport const deleteEventOK = createAction('DELETE_EVENT_OK');\nexport const requestAddNewEvent = createAction('REQUEST_ADD_NEW_EVENT');\nexport const addNewEventOK = createAction('ADD_NEW_EVENT_OK');\nexport const requestEvent = createAction('REQUEST_EVENT');\nexport const requestUpdateEvent = createAction('REQUEST_UPDATE_EVENT');\nexport const updateEventOK = createAction('UPDATE_EVENT_OK');\n\n// Simulation\nexport const requestStartSimulation = createAction('REQUEST_START_SIMULATION');\nexport const requestStopSimulation = createAction('REQUEST_STOP_SIMULATION');\nexport const requestSimulationStatus = createAction('REQUEST_SIMULATION_STATUS');\nexport const setSimulationStatus = createAction('SET_SIMULATION_STATUS');\n\n// Devopts\nexport const requestDevopts = createAction('REQUEST_DEV_OPTS');\nexport const requestUpdateDevopts = createAction('REQUEST_UPDATE_DEV_OPTS');\nexport const setDevopts = createAction('SET_DEV_OPTS');\n","/**\n *\n * @param {Object} obj Object to be updated\n * @param {String} path Path to be updated\n * @param {Value} value the new value to be updated\n */\nconst updateObjectByPath = (obj, path, value) => {\n  let stack = path.split(\".\");\n  while (stack.length > 1) {\n    // Not at the end of the path\n    let key = stack.shift();\n    if (key.indexOf(\"[\") > 0) {\n      // Contains array index\n      const array = key.split(\"[\");\n      key = array[0];\n      let index = array[1].replace(\"]\", \"\");\n      if (!obj[key]) {\n        // Create a new array if it does not exist\n        obj[key] = [];\n      }\n      if (obj[key].length === 0) {\n        // Empty array\n        index = 0;\n      } else if (obj[key].length <= index || index < 0) {\n        // index out of range\n        index = obj[key].length;\n      }\n      if (!obj[key][index]) {\n        obj[key].push({});\n        // throw Error(`ERROR: Invalid data path: ${path} in object ${JSON.stringify(obj)}`);\n      }\n      obj = obj[key][index];\n    } else {\n      if (!obj[key]) {\n        // Create a new path if it does not exist\n        obj[key] = {};\n      }\n      obj = obj[key];\n    }\n  }\n  let lastKey = stack.shift();\n  // At the end of the path\n  if (lastKey.indexOf(\"[\") > 0) {\n    // Contains array index\n    const array = lastKey.split(\"[\");\n    lastKey = array[0];\n    let index = array[1].replace(\"]\", \"\");\n    if (value === null) {\n      // Remove an element\n      if (obj[lastKey] && obj[lastKey][index]) {\n        obj[lastKey].splice(index, 1);\n      }\n    } else {\n      // Add an element\n      if (!obj[lastKey]) {\n        // Create a new array if it does not exist\n        obj[lastKey] = [];\n      }\n      if (obj[lastKey].length === 0) {\n        // Empty array\n        index = 0;\n      } else if (obj[lastKey].length <= index || index < 0) {\n        // index out of range\n        index = obj[lastKey].length;\n      }\n      if (!obj[lastKey][index]) {\n        obj[lastKey].push(value);\n        // throw Error(`ERROR: Invalid data path: ${path} in object ${JSON.stringify(obj)}`);\n      } else {\n        obj[lastKey][index] = value;\n      }\n    }\n  } else {\n    // Not contains array index\n    obj[lastKey] = value;\n  }\n};\n\nconst deepCloneObject = (obj) => JSON.parse(JSON.stringify(obj));\n\n/**\n * Add new element into array\n * @param {Array} array The array to be added\n * @param {Object} newElement New element to be updated or added\n */\nconst addNewElementToArray = (array, newElement) => {\n  let found = false;\n  for (let index = 0; index < array.length; index++) {\n    const element = array[index];\n    if (element.id === newElement.id) {\n      // Found the element - update\n      array[index] = { ...newElement };\n      // array.splice(index, 1);\n      // array.push(newElement);\n      found = true;\n      break;\n    }\n  }\n  if (!found) {\n    array.push(newElement);\n  }\n  return array;\n};\n\nconst removeElementFromArray = (array, elmId) => {\n  let isDeleted = false;\n  for (let index = 0; index < array.length; index++) {\n    const element = array[index];\n    if (element.id === elmId) {\n      array.splice(index, 1);\n      isDeleted = true;\n      break;\n    }\n  }\n  if (!isDeleted) {\n    console.log(`[ERROR] Cannot find the element: ${elmId}`);\n    return null;\n  }\n  return array;\n};\n\nconst getCreatedTimeFromFileName = (fileName) => {\n  const array = fileName.split(\"_\");\n  let timeString = array[array.length - 1].replace(\".log\", \"\");\n  return new Date(Number(timeString));\n};\n\nconst getLastURLPath = (url) => {\n  const array = url.split(\"/\");\n  return array[array.length - 1];\n};\n\nconst isDataGenerator = () => {\n  return window.location.pathname.indexOf(\"data-generator\") === 1;\n};\n\nconst getQuery = (qname) => {\n  const query = new URLSearchParams(window.location.search);\n  return query.get(qname);\n};\n\n/**\n * Get the last path in the URL /this-is-the-last-path?not-this-part\n */\nconst getLastPath = () => {\n  const array = window.location.pathname.split('/');\n  let lastPath = array[array.length - 1];\n  if (lastPath) {\n    lastPath = lastPath.split('?')[0]; // Remove query path\n  }\n  return lastPath;\n}\n\nexport {\n  getQuery,\n  isDataGenerator,\n  getLastURLPath,\n  updateObjectByPath,\n  addNewElementToArray,\n  removeElementFromArray,\n  getCreatedTimeFromFileName,\n  deepCloneObject,\n  getLastPath\n};\n","import { createReducer } from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setModel,\n  resetModel,\n  changeModelName,\n  addThing,\n  deleteThing,\n  changeStatusThing,\n  addSimulationSensor,\n  deleteSimulationSensor,\n  changeStatusSensor,\n  addSimulationActuator,\n  deleteSimulationActuator,\n  changeStatusActuator,\n} from \"../actions\";\nimport { addNewElementToArray, removeElementFromArray } from \"../utils\";\n\nconst initState = { name: \"NewModel\" };\n\nexport default createReducer(\n  {\n    [setModel]: produce((draft, model) => (draft = model)),\n    [resetModel]: state => initState,\n    // modification\n    [changeModelName]: produce((draft, newName) => {\n      draft.name = newName;\n    }),\n    [addThing]: produce((draft, thing) => {\n      if (draft.things) {\n        const newThings = addNewElementToArray(draft.things, thing);\n        draft.things = [...newThings];\n      } else {\n        draft.things = [thing];\n      }\n    }),\n    [deleteThing]: produce((draft, thingID) => {\n      const newThings = removeElementFromArray(draft.things, thingID);\n      if (newThings) draft.things = [...newThings];\n    }),\n    [changeStatusThing]: produce((draft, thingID) => {\n      for (let index = 0; index < draft.things.length; index++) {\n        if (draft.things[index].id === thingID) {\n          draft.things[index].enable = !draft.things[index].enable;\n          return;\n        };\n      }\n      console.error(`[ERROR] Cannot find the thing ${thingID}`);\n    }),\n    [addSimulationSensor]: produce((draft, { thingID, sensor }) => {\n      let foundThing = false;\n      if (draft.things) {\n        for (let index = 0; index < draft.things.length; index++) {\n          if (draft.things[index].id === thingID) {\n            foundThing = true;\n            const newSensors = addNewElementToArray(\n              draft.things[index].sensors,\n              sensor\n            );\n            draft.things[index].sensors = [...newSensors];\n            break;\n          }\n        }\n      }\n\n      if (!foundThing) {\n        if (!draft.sensors) {\n          draft.sensors = [];\n        }\n        // Add to free sensors list\n        const newSensors = addNewElementToArray(draft.sensors, sensor);\n        draft.sensors = [...newSensors];\n      } else {\n        if (draft.sensors) {\n          const newSensors = removeElementFromArray(draft.sensors, sensor.id);\n          if (newSensors) draft.sensors = [...newSensors];\n        }\n      }\n    }),\n    [addSimulationActuator]: produce((draft, { thingID, actuator }) => {\n      let foundThing = false;\n      if (draft.things) {\n        for (let index = 0; index < draft.things.length; index++) {\n          if (draft.things[index].id === thingID) {\n            foundThing = true;\n            const newActuators = addNewElementToArray(\n              draft.things[index].actuators,\n              actuator\n            );\n            draft.things[index].actuators = [...newActuators];\n            break;\n          }\n        }\n      }\n\n      if (!foundThing) {\n        if (!draft.actuators) {\n          draft.actuators = [];\n        }\n        // Add to free actuators list\n        const newActuators = addNewElementToArray(draft.actuators, actuator);\n        draft.actuators = [...newActuators];\n      } else {\n        if (draft.actuators) {\n          const newActuators = removeElementFromArray(\n            draft.actuators,\n            actuator.id\n          );\n          if (newActuators) draft.actuators = [...newActuators];\n        }\n      }\n    }),\n    [deleteSimulationSensor]: produce((draft, { sensorID, thingID }) => {\n      if (!thingID) {\n        // Remove a free sensors\n        const newSensors = removeElementFromArray(draft.sensors, sensorID);\n        if (newSensors) {\n          draft.sensors = [...newSensors];\n        }\n      } else {\n        // Remove sensors from a thing\n        let foundThing = false;\n        for (let index = 0; index < draft.things.length; index++) {\n          if (draft.things[index].id === thingID) {\n            foundThing = true;\n            const newSensors = removeElementFromArray(\n              draft.things[index].sensors,\n              sensorID\n            );\n            if (newSensors) {\n              draft.things[index].sensors = [...newSensors];\n            }\n            break;\n          }\n        }\n        if (!foundThing) {\n          console.log(`[ERROR] Cannot remove ${sensorID} from ${thingID}`);\n        }\n      }\n    }),\n    [changeStatusSensor]: produce((draft, { sensorID, thingID }) => {\n      if (!thingID) {\n        // free sensors\n        if (draft.sensors) {\n          for (let index = 0; index < draft.sensors.length; index++) {\n            if (draft.sensors[index].id === sensorID) {\n              draft.sensors[index].enable = !draft.sensors[index].enable;\n              return;\n            }\n          }\n        }\n        console.log(`[ERROR] Cannot change status of sensor ${sensorID} in ${thingID}`);\n      } else {\n        // Remove sensors from a thing\n        for (let tIndex = 0; tIndex < draft.things.length; tIndex++) {\n          if (draft.things[tIndex].id === thingID) {\n            for (let index = 0; index < draft.things[tIndex].sensors.length; index++) {\n              if (draft.things[tIndex].sensors[index].id === sensorID) {\n                draft.things[tIndex].sensors[index].enable = !draft.things[tIndex].sensors[index].enable;\n                return;\n              }\n            }\n            break;\n          }\n        }\n        console.log(`[ERROR] Cannot change status of sensor ${sensorID} in ${thingID}`);\n      }\n    }),\n    [deleteSimulationActuator]: produce((draft, { actuatorID, thingID }) => {\n      if (!thingID) {\n        // Remove a free actuators\n        const newActuators = removeElementFromArray(\n          draft.actuators,\n          actuatorID\n        );\n        if (newActuators) {\n          draft.actuators = [...newActuators];\n        }\n      } else {\n        // Remove actuators from a thing\n        let foundThing = false;\n        for (let index = 0; index < draft.things.length; index++) {\n          if (draft.things[index].id === thingID) {\n            foundThing = true;\n            const newActuators = removeElementFromArray(\n              draft.things[index].actuators,\n              actuatorID\n            );\n            if (newActuators) {\n              draft.things[index].actuators = [...newActuators];\n            }\n            break;\n          }\n        }\n        if (!foundThing) {\n          console.log(`[ERROR] Cannot remove ${actuatorID} from ${thingID}`);\n        }\n      }\n    }),[changeStatusActuator]: produce((draft, { actuatorID, thingID }) => {\n      if (!thingID) {\n        // free actuator\n        if (draft.actuators) {\n          for (let index = 0; index < draft.actuators.length; index++) {\n            if (draft.actuators[index].id === actuatorID) {\n              draft.actuators[index].enable = !draft.actuators[index].enable;\n              return;\n            }\n          }\n        }\n        console.log(`[ERROR] Cannot change status of actuator ${actuatorID} in ${thingID}`);\n      } else {\n        // Remove sensors from a thing\n        for (let tIndex = 0; tIndex < draft.things.length; tIndex++) {\n          if (draft.things[tIndex].id === thingID) {\n            for (let index = 0; index < draft.things[tIndex].actuators.length; index++) {\n              if (draft.things[tIndex].actuators[index].id === actuatorID) {\n                draft.things[tIndex].actuators[index].enable = !draft.things[tIndex].actuators[index].enable;\n                return;\n              }\n            }\n            break;\n          }\n        }\n        console.log(`[ERROR] Cannot change status of actuator ${actuatorID} in ${thingID}`);\n      }\n    })\n  },\n  initState\n);","import { createReducer } from \"redux-act\";\n\nimport {\n  uploadModelOK,\n  uploadModel,\n  requestModel,\n  setModel,\n  setNotification,\n  requestLogFile,\n  requestLogFileOK,\n  requestAllModels,\n  deleteModelOK,\n  setAllModels,\n  requestDuplicateModel,\n  duplicateModelOK,\n  requestDeleteModel,\n  requestAddNewModel,\n  addNewModelOK,\n  requestUpdateModel,\n  updateModelOK,\n  requestDataStorage,\n  requestUpdateDataStorage,\n  setDataStorage,\n  requestTestDataStorageConnection,\n  setDataStorageConnectionStatus\n} from \"../actions\";\n\nconst initState = false;\n\nexport default createReducer(\n  {\n    [uploadModel]: state => true,\n    [requestModel]: state => true,\n    // [sendDeployStop]: state => true,\n    // [sendDeployStart]: state => true,\n    [setNotification]: state => false,\n    [setModel]: state => false,\n    [uploadModelOK]: state => false,\n    // [deployStopOK]: state => false,\n    // [deployStartOK]: state => false,\n    [requestLogFile]: state => true,\n    [requestLogFileOK]: state => false,\n    [requestAllModels]: state => true,\n    [setAllModels]: state => false,\n    [requestDeleteModel]: state => true,\n    [deleteModelOK]: state => false,\n    [requestDuplicateModel]: state => true,\n    [duplicateModelOK]: state => false,\n    [requestAddNewModel]: state => true,\n    [addNewModelOK]: state => false,\n    [requestUpdateModel]: state => true,\n    [updateModelOK]: state => false,\n    [requestDataStorage]: state => true,\n    [requestUpdateDataStorage]: state => true,\n    [setDataStorage]: state => false,\n    [requestTestDataStorageConnection]: state => true,\n    [setDataStorageConnectionStatus]: state => false,\n  },\n  initState\n);\n","import { createReducer } from \"redux-act\";\nimport {\n  setNotification,\n  resetNotification,\n  addThing,\n  deleteThing,\n  addSimulationSensor,\n  addSimulationActuator,\n  deleteSimulationSensor,\n  deleteSimulationActuator,\n} from \"../actions\";\n\nexport default createReducer(\n  {\n    [setNotification]: (state, { type, message }) => {\n      if (message !== {}) {\n        return { type, message };\n      } else {\n        return null;\n      }\n    },\n    [resetNotification]: state => null,\n    [addThing]: (state, thing) => ({\n      type: \"success\",\n      message: `Thing ${thing.id} has been added!`\n    }),\n    [deleteThing]: (state, thingID) => ({\n      type: \"success\",\n      message: `Thing ${thingID} has been removed!`\n    }),\n    [addSimulationSensor]: (state, {sensor, thingID}) => ({\n      type: \"success\",\n      message: `Sensor ${sensor.id} has been added ${thingID? `into Thing ${thingID}`: ''}!`\n    }),\n    [deleteSimulationSensor]: (state, {sensorID, thingID}) => ({\n      type: \"success\",\n      message: `Sensor ${sensorID} has been removed${thingID? `from Thing ${thingID}`: ''}!`\n    }),\n    [addSimulationActuator]: (state, {actuator, thingID}) => ({\n      type: \"success\",\n      message: `Actuator ${actuator.id} has been added ${thingID? `into Thing ${thingID}`: ''}!`\n    }),\n    [deleteSimulationActuator]: (state, {actuatorID, thingID}) => ({\n      type: \"success\",\n      message: `Actuator ${actuatorID} has been removed${thingID? `from Thing ${thingID}`: ''}!`\n    })\n  },\n  null\n);\n","import { createReducer } from \"redux-act\";\nimport produce from 'immer';\nimport { requestLogFileOK, requestAllLogFilesOK, requestDeleteLogFileOK } from \"../actions\";\n\nconst initState = {\n  logs: null,\n  logFiles: [],\n};\n\nexport default createReducer(\n  {\n    [requestLogFileOK]: (state, logs) => ({...state, logs}),\n    [requestAllLogFilesOK]: (state, logFiles) => ({...state, logFiles}),\n    [requestDeleteLogFileOK]: produce((draft, logFile) => {\n      const index = draft.logFiles.indexOf(logFile);\n      if (index > - 1) {\n        draft.logFiles.splice(index, 1);\n      }\n    })\n  },\n  initState\n);\n","import { createReducer } from 'redux-act';\nimport { selectDevice, selectSensor, selectActuator, showModal } from '../actions';\n\nconst initState = {\n  formID: null,\n  selectedDevice: null,\n  selectedSensor: null,\n  selectedActuator: null,\n  dataStorage: null\n}\nexport default createReducer({\n  [showModal] : (state, formID) => ({...state, formID}),\n  [selectDevice] : (state, selectedDevice) => ({...state, selectedDevice}),\n  [selectSensor] : (state, selectedSensor) => ({...state, selectedSensor}),\n  [selectActuator] : (state, selectedActuator) => ({...state, selectedActuator})\n}, initState);\n","import { createReducer } from 'redux-act';\nimport { setSimulationStatus } from '../actions';\n\nexport default createReducer({\n  [setSimulationStatus] : (state, status) => status\n}, false);\n","import { createReducer } from \"redux-act\";\nimport { requestStatsOK } from \"../actions\";\n\nconst initState = [];\n\nexport default createReducer(\n  {\n    [requestStatsOK]: (state, stats) => (stats),\n  },\n  initState\n);\n","import {\n  createReducer\n} from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setAllModels,\n  deleteModelOK,\n  duplicateModelOK,\n  addNewModelOK\n} from \"../actions\";\n\nexport default createReducer({\n    [setAllModels]: produce((draft, models) => (draft = models)),\n    [deleteModelOK]: produce((draft, modelFileName) => {\n      const index = draft.indexOf(modelFileName);\n      if (index === -1) {\n        console.error('Cannot find model to delete: ', modelFileName);\n      } else {\n        draft = draft.splice(index, 1);\n      }\n    }),\n    [duplicateModelOK]: produce((draft, dupModel) => draft = [...draft, dupModel]),\n    [addNewModelOK]:produce((draft, newModel) => draft = [...draft, newModel])\n  },\n  []\n);","import {\n  createReducer\n} from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setAllDataRecorders,\n  deleteDataRecorderOK,\n  duplicateDataRecorderOK,\n  addNewDataRecorderOK\n} from \"../actions\";\n\nexport default createReducer({\n    [setAllDataRecorders]: produce((draft, dataRecorders) => (draft = dataRecorders)),\n    [deleteDataRecorderOK]: produce((draft, dataRecorderFileName) => {\n      const index = draft.indexOf(dataRecorderFileName);\n      if (index === -1) {\n        console.error('Cannot find DataRecorder to delete: ', dataRecorderFileName);\n      } else {\n        draft = draft.splice(index, 1);\n      }\n    }),\n    [duplicateDataRecorderOK]: produce((draft, dupDataRecorder) => draft = [...draft, dupDataRecorder]),\n    [addNewDataRecorderOK]:produce((draft, newDataRecorder) => draft = [...draft, newDataRecorder])\n  },\n  []\n);","import { createReducer } from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setDataRecorder,\n  resetDataRecorder,\n  changeDataRecorderName,\n} from \"../actions\";\n\nconst initState = null;\n\nexport default createReducer(\n  {\n    [setDataRecorder]: produce((draft, dataRecorder) => (draft = dataRecorder)),\n    [resetDataRecorder]: state => initState,\n    // modification\n    [changeDataRecorderName]: produce((draft, newName) => {\n      draft.name = newName;\n    })\n  },\n  initState\n);","import { createReducer } from 'redux-act';\nimport { setDataRecorderStatus } from '../actions';\n\nexport default createReducer({\n  [setDataRecorderStatus] : (state, status) => status\n}, null);\n","import {\n  createReducer\n} from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setDataStorage,\n  setDataStorageConnectionStatus\n} from \"../actions\";\n\nconst initState = {\n  connConfig: null,\n  connectionStatus: false\n};\n\nexport default createReducer({\n    [setDataStorage]: produce((draft, dataStorage) => {\n      draft.connConfig = dataStorage;\n    }),\n    [setDataStorageConnectionStatus]: produce((draft, status) => {\n      draft.connectionStatus = status;\n    }),\n  },\n  initState\n);","import {\n  createReducer\n} from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setAllTestCampaigns,\n  setCurrentTestCampaign,\n  deleteTestCampaignOK,\n  addNewTestCampaignOK,\n  setTestCampaignRunningStatus\n} from \"../actions\";\n\nimport { addNewElementToArray, removeElementFromArray } from \"../utils\";\n\nconst initState = {\n  allTestCampaigns: [],\n  currentTestCampaign: 0,\n  runningStatus: null\n};\n\nexport default createReducer({\n    [setAllTestCampaigns]: produce((draft, testCampaigns) => {\n      draft.allTestCampaigns = testCampaigns;\n    }),\n    [addNewTestCampaignOK]: produce((draft, newTC) => {\n      if (draft.allTestCampaigns) {\n        const newAllTestCampaigns = addNewElementToArray(draft.allTestCampaigns, newTC);\n        draft.allTestCampaigns = [...newAllTestCampaigns];\n      } else {\n        draft.allTestCampaigns = [newTC];\n      }\n    }),\n    [deleteTestCampaignOK]: produce((draft, testCampaignId) => {\n      const newAllTestCampaigns = removeElementFromArray(draft.allTestCampaigns, testCampaignId);\n      if (newAllTestCampaigns) draft.allTestCampaigns = [...newAllTestCampaigns];\n    }),\n    [setCurrentTestCampaign]: produce((draft, testCampaign) => {\n      draft.currentTestCampaign = testCampaign;\n    }),\n    [setTestCampaignRunningStatus]: produce((draft, runningStatus) => {\n      draft.runningStatus = runningStatus;\n    }),\n  },\n  initState\n);","import {\n  createReducer\n} from \"redux-act\";\nimport {\n  setDevopts,\n} from \"../actions\";\n\nconst initState = null;\n\nexport default createReducer({\n    [setDevopts]: (state, devopts) => devopts,\n  },\n  initState\n);","import {\n  createReducer\n} from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setAllTestCases,\n  setCurrentTestCase,\n  deleteTestCaseOK,\n  addNewTestCaseOK\n} from \"../actions\";\n\nimport { addNewElementToArray, removeElementFromArray } from \"../utils\";\n\nconst initState = {\n  allTestCases: [],\n  currentTestCase: 0\n};\n\nexport default createReducer({\n    [setAllTestCases]: produce((draft, testCases) => {\n      draft.allTestCases = testCases;\n    }),\n    [addNewTestCaseOK]: produce((draft, newTC) => {\n      if (draft.allTestCases) {\n        const newAllTestCases = addNewElementToArray(draft.allTestCases, newTC);\n        draft.allTestCases = [...newAllTestCases];\n      } else {\n        draft.allTestCases = [newTC];\n      }\n    }),\n    [deleteTestCaseOK]: produce((draft, testCaseId) => {\n      const newAllTestCases = removeElementFromArray(draft.allTestCases, testCaseId);\n      if (newAllTestCases) draft.allTestCases = [...newAllTestCases];\n    }),\n    [setCurrentTestCase]: produce((draft, testCase) => {\n      draft.currentTestCase = testCase;\n    }),\n  },\n  initState\n);","import {\n  createReducer\n} from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setAllDatasets,\n  setCurrentDataset,\n  deleteDatasetOK,\n  addNewDatasetOK,\n  setEvents,\n  addNewEventOK,\n  deleteEventOK,\n  updateEventOK\n} from \"../actions\";\n\nimport { addNewElementToArray, removeElementFromArray } from \"../utils\";\n\nconst initState = {\n  allDatasets: [],\n  currentDataset: {\n    dataset: null,\n    events:[]\n  }\n};\n\nexport default createReducer({\n    [setAllDatasets]: produce((draft, datasets) => {\n      draft.allDatasets = datasets;\n    }),\n    [addNewDatasetOK]: produce((draft, newDS) => {\n      if (draft.allDatasets) {\n        const newAllDatasets = addNewElementToArray(draft.allDatasets, newDS);\n        draft.allDatasets = [...newAllDatasets];\n      } else {\n        draft.allDatasets = [newDS];\n      }\n      draft.currentDataset.dataset = newDS;\n    }),\n    [deleteDatasetOK]: produce((draft, datasetId) => {\n      const newAllDatasets = removeElementFromArray(draft.allDatasets, datasetId);\n      if (newAllDatasets) draft.allDatasets = [...newAllDatasets];\n    }),\n    [setCurrentDataset]: produce((draft, dataset) => {\n      draft.currentDataset.dataset = dataset;\n    }),\n    [setEvents]: produce((draft, events) => {\n      draft.currentDataset.events = events;\n    }),\n    [addNewEventOK]: produce((draft, newEvent) => {\n      if (draft) {\n        draft.currentDataset.events.push(newEvent);\n      } else {\n        draft = [newEvent];\n      }\n    }),\n    [deleteEventOK]: produce((draft, eventId) => {\n      const newEvents = [];\n      for (let index = 0; index < draft.currentDataset.events.length; index++) {\n        const event = draft.currentDataset.events[index];\n        if (event._id !== eventId) {\n          newEvents.push(event);\n        }\n      }\n      draft.currentDataset.events = [...newEvents];\n    }),\n    [updateEventOK]: produce((draft, newEvent) => {\n      for (let index = 0; index < draft.currentDataset.events.length; index++) {\n        if (draft.currentDataset.events[index]._id === newEvent._id) {\n          draft.currentDataset.events[index] = {...newEvent};\n        };\n      }\n    })\n  },\n  initState\n);","import {\n  combineReducers\n} from 'redux';\n\nimport modelReducer from './modelReducer';\nimport requestingReducer from './requestingReducer';\nimport notificationReducer from './notificationReducer';\nimport logsReducer from './logsReducer';\nimport editingFormReducer from './editingFormReducer';\nimport simulationStatusReducer from './simulationStatusReducer';\nimport statsReducer from './statsReducer';\nimport allModelsReducer from './allModelsReducer';\nimport allDataRecordersReducer from './allDataRecordersReducer';\nimport dataRecorderReducer from './dataRecorderReducer';\nimport dataRecorderStatusReducer from './dataRecorderStatusReducer';\nimport dataStorageReducer from './dataStorageReducer';\nimport testCampaignsReducer from './testCampaignsReducer';\nimport devoptsReducer from './devoptsReducer';\nimport testCasesReducer from './testCasesReducer';\nimport datasetsReducer from './datasetsReducer';\n\nconst rootReducer = combineReducers({\n  allDataRecorders: allDataRecordersReducer,\n  dataRecorder: dataRecorderReducer,\n  dataRecorderStatus: dataRecorderStatusReducer,\n  dataStorage: dataStorageReducer,\n  allModels: allModelsReducer,\n  model: modelReducer,\n  stats: statsReducer,\n  logs: logsReducer,\n  notify: notificationReducer,\n  requesting: requestingReducer,\n  editingForm: editingFormReducer,\n  simulationStatus: simulationStatusReducer,\n  testCampaigns: testCampaignsReducer,\n  devopts: devoptsReducer,\n  testCases: testCasesReducer,\n  datasets: datasetsReducer,\n});\n\nexport default rootReducer;\n","// read and pass the environment variables into reactjs application\n// const URL = `http://localhost:31057`;\nconst URL = \"\";\n\n// MODELS\nexport const requestAllModels = async () => {\n  const url = `${URL}/api/models`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.models;\n}\n\nexport const requestDeleteModel = async (modelFileName) => {\n  const url = `${URL}/api/models/${modelFileName}`;\n  const response = await fetch(url,{\n    method: 'DELETE',\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n}\n\nexport const requestDuplicateModel = async (modelFileName) => {\n  const url = `${URL}/api/models/${modelFileName}`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({\n      isDuplicated: true\n    })\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.modelFileName;\n}\n\nexport const requestModel = async (modelFileName) => {\n  const url = `${URL}/api/models/${modelFileName}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.model;\n};\n\nexport const uploadModel = async (model) => {\n  const url = `${URL}/api/models`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({model})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.modelFileName;\n};\n\nexport const updateModel = async (modelFileName, model) => {\n  const url = `${URL}/api/models/${modelFileName}`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({model})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.modelFileName;\n};\n\n// DATA RECORDERS\nexport const requestAllDataRecorders = async () => {\n  const url = `${URL}/api/data-recorders/models`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataRecorders;\n}\n\nexport const requestDeleteDataRecorder = async (dataRecorderFileName) => {\n  const url = `${URL}/api/data-recorders/models/${dataRecorderFileName}`;\n  const response = await fetch(url,{\n    method: 'DELETE',\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n}\n\nexport const requestDuplicateDataRecorder = async (dataRecorderFileName) => {\n  const url = `${URL}/api/data-recorders/models/${dataRecorderFileName}`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({\n      isDuplicated: true\n    })\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataRecorderFileName;\n}\n\nexport const requestDataRecorder = async (dataRecorderFileName) => {\n  const url = `${URL}/api/data-recorders/models/${dataRecorderFileName}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataRecorder;\n};\n\nexport const uploadDataRecorder = async (dataRecorder) => {\n  const url = `${URL}/api/data-recorders/models`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({dataRecorder})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataRecorderFileName;\n};\n\nexport const updateDataRecorder = async (dataRecorderFileName, dataRecorder) => {\n  const url = `${URL}/api/data-recorders/models/${dataRecorderFileName}`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({dataRecorder})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataRecorderFileName;\n};\n\nexport const sendRequestStartDataRecorder = async (dataRecorderFileName) => {\n  const url = `${URL}/api/data-recorders/start`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({dataRecorderFileName})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.status;\n}\n\nexport const sendRequestStopDataRecorder = async () => {\n  const url = `${URL}/api/data-recorders/stop`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.status;\n}\n\nexport const sendRequestDataRecorderStatus = async () => {\n  const url = `${URL}/api/data-recorders/status`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.status;\n};\n\n// DATA STORAGE\nexport const sendRequestDataStorage = async () => {\n  const url = `${URL}/api/data-storage`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataStorage;\n};\n\nexport const sendRequestUpdateDataStorage = async (dataStorage) => {\n  const url = `${URL}/api/data-storage`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({dataStorage})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataStorage;\n};\n\nexport const sendRequestTestDataStorageConnection = async (dataStorage) => {\n  const url = `${URL}/api/data-storage/test`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.connectionStatus;\n};\n\n\n\nexport const sendRequestLogFile = async (tool, logFile) => {\n  const url = `${URL}/api/logs/${tool}/${logFile}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.content;\n};\n\nexport const sendRequestDeleteLogFile = async (tool, logFile) => {\n  const url = `${URL}/api/logs/${tool}/${logFile}`;\n  const response = await fetch(url, {\n    method: 'DELETE'\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n};\n\n\nexport const sendRequestAllLogFiles = async (tool) => {\n  const url = `${URL}/api/logs/${tool}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.files;\n};\n\nexport const requestStartDeploy = async (tool, model) => {\n  const url = `${URL}/api/${tool}/deploy`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({model})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.simulationStatus;\n};\n\nexport const sendRequestStopSimulation = async () => {\n  const url = `${URL}/api/simulation/stop`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.simulationStatus;\n};\n\nexport const sendRequestSimulationStatus = async () => {\n  const url = `${URL}/api/simulation/status`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.simulationStatus;\n};\n\n\n// Test campaigns\nexport const sendRequestTestCampaign = async (tcId) => {\n  const url = `${URL}/api/test-campaigns/${tcId}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.testCampaign;\n};\n\nexport const sendRequestUpdateTestCampaign = async (id, testCampaign) => {\n  const url = `${URL}/api/test-campaigns/${id}`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({testCampaign})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.testCampaign;\n};\n\nexport const sendRequestAllTestCampaigns = async () => {\n  const url = `${URL}/api/test-campaigns`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.testCampaigns;\n};\n\nexport const sendRequestAddNewTestCampaign = async (testCampaign) => {\n  const url = `${URL}/api/test-campaigns`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({testCampaign})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.testCampaign;\n};\n\nexport const sendRequestDeleteTestCampaign = async (testCampaignId) => {\n  const url = `${URL}/api/test-campaigns/${testCampaignId}`;\n  const response = await fetch(url,{\n    method: 'DELETE',\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n};\n\n\n// Devopts\nexport const sendRequestDevopts = async () => {\n  const url = `${URL}/api/devopts`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.devopts;\n};\n\nexport const sendRequestUpdateDevopts = async (devopts) => {\n  const url = `${URL}/api/devopts`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({devopts})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.devopts;\n};\n\n\n// Test cases\nexport const sendRequestTestCase = async (tcId) => {\n  const url = `${URL}/api/test-cases/${tcId}`;\n  const response = await fetch(url);\n  const status = await response.json();\n  if (status.error) {\n    throw status.error;\n  }\n  return status.testCase;\n};\n\nexport const sendRequestUpdateTestCase = async (id, testCase) => {\n  const url = `${URL}/api/test-cases/${id}`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({testCase})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.testCase;\n};\n\nexport const sendRequestAllTestCases = async () => {\n  const url = `${URL}/api/test-cases`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.testCases;\n};\n\nexport const sendRequestAddNewTestCase = async (testCase) => {\n  const url = `${URL}/api/test-cases`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({testCase})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.testCase;\n};\n\nexport const sendRequestDeleteTestCase = async (testCaseId) => {\n  const url = `${URL}/api/test-cases/${testCaseId}`;\n  const response = await fetch(url,{\n    method: 'DELETE',\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n};\n\n\n// Dataset\nexport const sendRequestDataset = async (tcId) => {\n  const url = `${URL}/api/data-sets/${tcId}`;\n  const response = await fetch(url);\n  const status = await response.json();\n  if (status.error) {\n    throw status.error;\n  }\n  return status.dataset;\n};\n\nexport const sendRequestUpdateDataset = async (id, dataset) => {\n  const url = `${URL}/api/data-sets/${id}`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({dataset})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataset;\n};\n\nexport const sendRequestAllDatasets = async () => {\n  const url = `${URL}/api/data-sets`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.datasets;\n};\n\nexport const sendRequestAddNewDataset = async (dataset) => {\n  const url = `${URL}/api/data-sets`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({dataset})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataset;\n};\n\nexport const sendRequestDeleteDataset = async (datasetId) => {\n  const url = `${URL}/api/data-sets/${datasetId}`;\n  const response = await fetch(url,{\n    method: 'DELETE',\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n};\n\n// Event\nexport const sendRequestEvent = async (tcId) => {\n  const url = `${URL}/api/events/${tcId}`;\n  const response = await fetch(url);\n  const status = await response.json();\n  if (status.error) {\n    throw status.error;\n  }\n  return status.event;\n};\n\nexport const sendRequestUpdateEvent = async (id, event) => {\n  const url = `${URL}/api/events/${id}`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({event})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.event;\n};\n\nexport const sendRequestEventsByDatasetId = async (dsId) => {\n  const url = `${URL}/api/events?datasetId=${dsId}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.events;\n};\n\nexport const sendRequestAddNewEvent = async (event) => {\n  const url = `${URL}/api/events`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({event})\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.event;\n};\n\nexport const sendRequestDeleteEvent = async (eventId) => {\n  const url = `${URL}/api/events/${eventId}`;\n  const response = await fetch(url,{\n    method: 'DELETE',\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n};\n\n\nexport const sendRequestStartSimulation = async (modelFileName, datasetId, newDataset) => {\n  const url = `${URL}/api/simulation/start`;\n  const response = await fetch(url,{\n    method: 'POST',\n    headers: {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify({\n      modelFileName,\n      options: {\n        datasetId,\n        newDataset\n      }\n    })\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.simulationStatus;\n}\n\n// Test campaign\nexport const sendRequestLaunchTestCampaign = async () => {\n  const url = `${URL}/api/devopts/start`;\n  const response = await fetch(url);\n  const status = await response.json();\n  if (status.error) {\n    throw status.error;\n  }\n  return status.runningStatus;\n};\n\nexport const sendRequestStopTestCampaign = async () => {\n  const url = `${URL}/api/devopts/stop`;\n  const response = await fetch(url);\n  const status = await response.json();\n  if (status.error) {\n    throw status.error;\n  }\n  return status.runningStatus;\n};\n\nexport const sendRequestTestCampaignStatus = async () => {\n  const url = `${URL}/api/devopts/status`;\n  const response = await fetch(url);\n  const status = await response.json();\n  if (status.error) {\n    throw status.error;\n  }\n  return status.runningStatus;\n};\n\n","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  requestModel,\n  requestAllModels,\n  requestDeleteModel,\n  requestDuplicateModel,\n  uploadModel,\n  updateModel\n} from '../api';\nimport {\n  setModel,\n  setNotification,\n  setAllModels,  \n  deleteModelOK,  \n  duplicateModelOK,  \n  addNewModelOK,\n  updateModelOK\n} from '../actions';\n\nfunction* handleRequestModel(action) {\n  try {\n    const modelFileName = action.payload;\n    const model = yield call(() => requestModel(modelFileName));\n    yield put(setModel(model));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestDeleteModel(action) {  \n  try {\n    const modelFileName = action.payload;\n    yield call(() => requestDeleteModel(modelFileName));\n    yield put(deleteModelOK(modelFileName));\n    yield put(setNotification({type: 'success', message: `Model ${modelFileName} has been deleted!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestDuplicateModel(action) {  \n  try {\n    const modelFileName = action.payload;\n    const duplicatedModel = yield call(() => requestDuplicateModel(modelFileName));\n    yield put(duplicateModelOK(duplicatedModel));\n    yield put(setNotification({type: 'success', message: `Model ${duplicatedModel} has been created!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestAddNewModel(action) {  \n  try {\n    const model = action.payload;\n    const modelFileName = yield call(() => uploadModel(model));\n    yield put(addNewModelOK(modelFileName));\n    yield put(setNotification({type: 'success', message: `Model ${modelFileName} has been created!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestUpdateModel(action) {  \n  try {\n    const {modelFileName, model} = action.payload;\n    yield call(() => updateModel(modelFileName, model));\n    yield put(updateModelOK(modelFileName));\n    yield put(setNotification({type: 'success', message: `Model ${modelFileName} has been updated!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestAllModels() {\n  try {\n    const models = yield call(() => requestAllModels());\n    yield put(setAllModels(models));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* watchRequestModel() {\n  yield takeEvery('REQUEST_MODEL', handleRequestModel);\n  yield takeEvery('REQUEST_ALL_MODELS', handleRequestAllModels);\n  yield takeEvery('REQUEST_DELETE_MODEL', handleRequestDeleteModel);\n  yield takeEvery('REQUEST_DUPLICATE_MODEL', handleRequestDuplicateModel);\n  yield takeEvery('REQUEST_ADD_NEW_MODEL', handleRequestAddNewModel);\n  yield takeEvery('REQUEST_UPDATE_MODEL', handleRequestUpdateModel);\n}\n\nexport default watchRequestModel;\n","// watcher saga -> actions -> worker saga\nimport { call, put, takeEvery, select } from \"redux-saga/effects\";\n\nimport { uploadModel } from \"../api\";\nimport { uploadModelOK, setNotification } from \"../actions\";\n\nconst getModel = ({ model }) => model;\n\nfunction* handleSaveModel(action) {\n  try {\n    const tool = action.payload ? 'data-generator' : 'simulation';\n    let model = yield select(getModel);\n    if (model) {\n      const data = yield call(() => uploadModel(tool, model));\n      yield put(uploadModelOK(data.data));\n      yield put(setNotification({type: 'success', message: `Model ${model.name} has been updated!`}));\n    } else {\n      throw Error(\"Undefined model\");\n    }\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* watchSaveModel() {\n  yield takeEvery(\"UPLOAD_MODEL\", handleSaveModel);\n}\n\nexport default watchSaveModel;\n","// watcher saga -> actions -> worker saga\nimport { call, put, takeEvery } from \"redux-saga/effects\";\n\nimport {\n  sendRequestStartSimulation,\n  sendRequestStopSimulation,\n  sendRequestSimulationStatus\n} from \"../api\";\nimport {\n  setNotification,\n  setSimulationStatus\n} from \"../actions\";\n\nfunction* handleRequestStartSimulation(action) {\n  try {\n    const {modelFileName, datasetId, newDataset} = action.payload;\n    const SimulationStatus = yield call(() => sendRequestStartSimulation(modelFileName, datasetId, newDataset));\n    yield put(setSimulationStatus(SimulationStatus));\n    yield put(\n      setNotification({\n        type: \"success\",\n        message: `Simulation has been started!`\n      })\n    );\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({ type: \"error\", message: error }));\n  }\n}\n\nfunction* handleRequestStopSimulation() {\n  try {\n    yield call(() => sendRequestStopSimulation());\n    yield put(setSimulationStatus(null));\n    yield put(\n      setNotification({\n        type: \"success\",\n        message: `Simulation has been stopped!`\n      })\n    );\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({ type: \"error\", message: error }));\n  }\n}\n\nfunction* handleRequestSimulationStatus() {\n  try {\n    const status = yield call(() => sendRequestSimulationStatus());\n    // dispatch data\n    yield put(setSimulationStatus(status));\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({ type: \"error\", message: error }));\n  }\n}\n\nfunction* watchSimulation() {\n  yield takeEvery(\"REQUEST_START_SIMULATION\", handleRequestStartSimulation);\n  yield takeEvery(\"REQUEST_STOP_SIMULATION\", handleRequestStopSimulation);\n  yield takeEvery(\"REQUEST_SIMULATION_STATUS\", handleRequestSimulationStatus);\n}\n\nexport default watchSimulation;\n","// watcher saga -> actions -> worker saga\nimport { call, put, takeEvery } from \"redux-saga/effects\";\n\nimport { sendRequestLogFile, sendRequestAllLogFiles, sendRequestDeleteLogFile } from \"../api\";\nimport { requestLogFileOK, setNotification, requestAllLogFilesOK, requestDeleteLogFileOK } from \"../actions\";\n\nfunction* handleRequestAllLogFiles(action) {\n  try {\n    const tool = action.payload;\n    const logFiles = yield call(() => sendRequestAllLogFiles(tool));\n    yield put(requestAllLogFilesOK(logFiles));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({ type: \"error\", message: error }));\n  }\n}\n\nfunction* handleRequestLogFile(action) {\n  try {\n    const {tool, logFile} = action.payload;\n    const logs = yield call(() => sendRequestLogFile(tool, logFile));\n    yield put(requestLogFileOK(logs));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestDeleteLogFile(action) {\n  try {\n    const {tool, logFile} = action.payload;\n    yield call(() => sendRequestDeleteLogFile(tool, logFile));\n    yield put(requestDeleteLogFileOK(logFile));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* watchRequestLogs() {\n  yield takeEvery('REQUEST_LOG_FILE', handleRequestLogFile);\n  yield takeEvery(\"REQUEST_ALL_LOG_FILES\", handleRequestAllLogFiles);\n  yield takeEvery(\"REQUEST_DELETE_LOG_FILE\", handleRequestDeleteLogFile);\n}\n\nexport default watchRequestLogs;\n","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  requestDataRecorder,\n  requestAllDataRecorders,\n  requestDeleteDataRecorder,\n  requestDuplicateDataRecorder,\n  uploadDataRecorder,\n  updateDataRecorder,\n  sendRequestStartDataRecorder,\n  sendRequestStopDataRecorder,\n  sendRequestDataRecorderStatus\n} from '../api';\nimport {\n  setDataRecorder,\n  setNotification,\n  setAllDataRecorders,  \n  deleteDataRecorderOK,  \n  duplicateDataRecorderOK,  \n  addNewDataRecorderOK,\n  updateDataRecorderOK,\n  setDataRecorderStatus\n} from '../actions';\n\nfunction* handleRequestDataRecorder(action) {\n  try {\n    const dataRecorderFileName = action.payload;\n    const dataRecorder = yield call(() => requestDataRecorder(dataRecorderFileName));\n    yield put(setDataRecorder(dataRecorder));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestDeleteDataRecorder(action) {  \n  try {\n    const dataRecorderFileName = action.payload;\n    yield call(() => requestDeleteDataRecorder(dataRecorderFileName));\n    yield put(deleteDataRecorderOK(dataRecorderFileName));\n    yield put(setNotification({type: 'success', message: `DataRecorder ${dataRecorderFileName} has been deleted!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestDuplicateDataRecorder(action) {  \n  try {\n    const dataRecorderFileName = action.payload;\n    const duplicatedDataRecorder = yield call(() => requestDuplicateDataRecorder(dataRecorderFileName));\n    yield put(duplicateDataRecorderOK(duplicatedDataRecorder));\n    yield put(setNotification({type: 'success', message: `DataRecorder ${duplicatedDataRecorder} has been created!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestAddNewDataRecorder(action) {  \n  try {\n    const dataRecorder = action.payload;\n    const dataRecorderFileName = yield call(() => uploadDataRecorder(dataRecorder));\n    yield put(addNewDataRecorderOK(dataRecorderFileName));\n    yield put(setNotification({type: 'success', message: `DataRecorder ${dataRecorderFileName} has been created!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestUpdateDataRecorder(action) {  \n  try {\n    const {dataRecorderFileName, dataRecorder} = action.payload;\n    yield call(() => updateDataRecorder(dataRecorderFileName, dataRecorder));\n    yield put(updateDataRecorderOK(dataRecorderFileName));\n    yield put(setNotification({type: 'success', message: `DataRecorder ${dataRecorderFileName} has been updated!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestStartDataRecorder(action) {  \n  try {\n    const dataRecorderFileName = action.payload;\n    const status = yield call(() => sendRequestStartDataRecorder(dataRecorderFileName));\n    yield put(setDataRecorderStatus(status));\n    yield put(setNotification({type: 'success', message: `DataRecorder has been started!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestStopDataRecorder() {  \n  try {\n    yield call(() => sendRequestStopDataRecorder());\n    yield put(setDataRecorderStatus(null));\n    yield put(setNotification({type: 'success', message: `DataRecorder has been stopped!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestDataRecorderStatus() {  \n  try {\n    const status = yield call(() => sendRequestDataRecorderStatus());\n    yield put(setDataRecorderStatus(status));\n    // yield put(setNotification({type: 'success', message: `DataRecorder ${dataRecorderFileName} has been started!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestAllDataRecorders() {\n  try {\n    const dataRecorders = yield call(() => requestAllDataRecorders());\n    yield put(setAllDataRecorders(dataRecorders));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* watchRequestDataRecorder() {\n  yield takeEvery('REQUEST_DATA_RECORDER', handleRequestDataRecorder);\n  yield takeEvery('REQUEST_ALL_DATA_RECORDERS', handleRequestAllDataRecorders);\n  yield takeEvery('REQUEST_DELETE_DATA_RECORDER', handleRequestDeleteDataRecorder);\n  yield takeEvery('REQUEST_DUPLICATE_DATA_RECORDER', handleRequestDuplicateDataRecorder);\n  yield takeEvery('REQUEST_ADD_NEW_DATA_RECORDER', handleRequestAddNewDataRecorder);\n  yield takeEvery('REQUEST_UPDATE_DATA_RECORDER', handleRequestUpdateDataRecorder);\n  yield takeEvery('REQUEST_START_DATA_RECORDER', handleRequestStartDataRecorder);\n  yield takeEvery('REQUEST_STOP_DATA_RECORDER', handleRequestStopDataRecorder);\n  yield takeEvery('REQUEST_DATA_RECORDER_STATUS', handleRequestDataRecorderStatus);\n}\n\nexport default watchRequestDataRecorder;\n","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  sendRequestDataStorage,\n  sendRequestUpdateDataStorage,\n  sendRequestTestDataStorageConnection\n} from '../api';\nimport {\n  setNotification,\n  setDataStorage,\n  setDataStorageConnectionStatus\n} from '../actions';\n\nfunction* handleRequestDataStorage() {\n  try {\n    const dataStorage = yield call(() => sendRequestDataStorage());\n    yield put(setDataStorage(dataStorage));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestUpdateDataStorage(action) {  \n  try {\n    const newDataStorage = action.payload;\n    yield call(() => sendRequestUpdateDataStorage(newDataStorage));\n    yield put(setDataStorage(newDataStorage));\n    yield put(setNotification({type: 'success', message: `DataStorage has been updated!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestTestDataStorageConnection() {  \n  try {\n    const status = yield call(() => sendRequestTestDataStorageConnection());\n    yield put(setDataStorageConnectionStatus(status));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setDataStorageConnectionStatus(false));\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* watchRequestDataStorage() {\n  yield takeEvery('REQUEST_DATA_STORAGE', handleRequestDataStorage);\n  yield takeEvery('REQUEST_UPDATE_DATA_STORAGE', handleRequestUpdateDataStorage);\n  yield takeEvery('REQUEST_TEST_DATA_STORAGE_CONNECTION', handleRequestTestDataStorageConnection);\n}\n\nexport default watchRequestDataStorage;\n","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  sendRequestAllTestCampaigns,\n  sendRequestAddNewTestCampaign,\n  sendRequestDeleteTestCampaign,\n  sendRequestTestCampaign,\n  sendRequestUpdateTestCampaign,\n  sendRequestLaunchTestCampaign,\n  sendRequestStopTestCampaign,\n  sendRequestTestCampaignStatus,\n} from '../api';\nimport {\n  setNotification,\n  setAllTestCampaigns,\n  addNewTestCampaignOK,\n  deleteTestCampaignOK,\n  setCurrentTestCampaign,\n  setTestCampaignRunningStatus\n} from '../actions';\n\nfunction* handleRequestTestCampaign(action) {\n  try {\n    const tcId = action.payload;\n    const testCampaign = yield call(() => sendRequestTestCampaign(tcId));\n    yield put(setCurrentTestCampaign(testCampaign));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestUpdateTestCampaign(action) {\n  try {\n    const {id, testCampaign } = action.payload;\n    const newTestCampaign = yield call(() => sendRequestUpdateTestCampaign(id, testCampaign));\n    yield put(addNewTestCampaignOK(newTestCampaign));\n    yield put(setNotification({\n      type: 'success',\n      message: `A new test campaign ${newTestCampaign.name} has been added`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\n\nfunction* handleRequestAllTestCampaigns() {\n  try {\n    const allTestCampaigns = yield call(() => sendRequestAllTestCampaigns());\n    yield put(setAllTestCampaigns(allTestCampaigns));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestAddNewTestCampaign(action) {\n  try {\n    const testCampaign = action.payload;\n    const newTestCampaign = yield call(() => sendRequestAddNewTestCampaign(testCampaign));\n    yield put(addNewTestCampaignOK(newTestCampaign));\n    yield put(setNotification({\n      type: 'success',\n      message: `A new test campaign ${newTestCampaign.name} has been added`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestDeleteTestCampaign(action) {\n  try {\n    const testCampaignId = action.payload;\n    yield call(() => sendRequestDeleteTestCampaign(testCampaignId));\n    yield put(deleteTestCampaignOK(testCampaignId));\n    yield put(setNotification({\n      type: 'success',\n      message: `Test campaign ${testCampaignId} has been deleted`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestLaunchTestCampaign() {\n  try {\n    const runningStatus = yield call(() => sendRequestLaunchTestCampaign());\n    yield put(setTestCampaignRunningStatus(runningStatus));\n    yield put(setNotification({\n      type: 'success',\n      message: `Test campaign has been started`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestStopTestCampaign() {\n  try {\n    const runningStatus = yield call(() => sendRequestStopTestCampaign());\n    yield put(setTestCampaignRunningStatus(runningStatus));\n    yield put(setNotification({\n      type: 'success',\n      message: `Test campaign has been stopped`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestTestCampaignStatus() {\n  try {\n    const runningStatus = yield call(() => sendRequestTestCampaignStatus());\n    yield put(setTestCampaignRunningStatus(runningStatus));\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* watchTestCampaigns() {\n  yield takeEvery('REQUEST_TEST_CAMPAIGN', handleRequestTestCampaign);\n  yield takeEvery('REQUEST_UPDATE_TEST_CAMPAIGN', handleRequestUpdateTestCampaign);\n  yield takeEvery('REQUEST_ALL_TEST_CAMPAIGNS', handleRequestAllTestCampaigns);\n  yield takeEvery('REQUEST_ADD_NEW_TEST_CAMPAIGN', handleRequestAddNewTestCampaign);\n  yield takeEvery('REQUEST_DELETE_TEST_CAMPAIGN', handleRequestDeleteTestCampaign);\n  yield takeEvery('REQUEST_LAUNCH_TEST_CAMPAIGN', handleRequestLaunchTestCampaign);\n  yield takeEvery('REQUEST_STOP_TEST_CAMPAIGN', handleRequestStopTestCampaign);\n  yield takeEvery('REQUEST_TEST_CAMPAIGN_STATUS', handleRequestTestCampaignStatus);\n}\n\nexport default watchTestCampaigns;","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  sendRequestAllTestCases,\n  sendRequestAddNewTestCase,\n  sendRequestDeleteTestCase,\n  sendRequestTestCase,\n  sendRequestUpdateTestCase\n} from '../api';\nimport {\n  setNotification,\n  setAllTestCases,\n  addNewTestCaseOK,\n  deleteTestCaseOK,\n  setCurrentTestCase,\n} from '../actions';\n\nfunction* handleRequestTestCase(action) {\n  try {\n    const tcId = action.payload;\n    const testCase = yield call(() => sendRequestTestCase(tcId));\n    yield put(setCurrentTestCase(testCase));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestUpdateTestCase(action) {\n  try {\n    const {id, testCase } = action.payload;\n    const newTestCase = yield call(() => sendRequestUpdateTestCase(id, testCase));\n    yield put(addNewTestCaseOK(newTestCase));\n    yield put(setNotification({\n      type: 'success',\n      message: `A new test case ${newTestCase.name} has been added`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\n\nfunction* handleRequestAllTestCases() {\n  try {\n    const allTestCases = yield call(() => sendRequestAllTestCases());\n    yield put(setAllTestCases(allTestCases));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestAddNewTestCase(action) {\n  try {\n    const testCase = action.payload;\n    const newTestCase = yield call(() => sendRequestAddNewTestCase(testCase));\n    yield put(addNewTestCaseOK(newTestCase));\n    yield put(setNotification({\n      type: 'success',\n      message: `A new test case ${newTestCase.name} has been added`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestDeleteTestCase(action) {\n  try {\n    const testCaseId = action.payload;\n    yield call(() => sendRequestDeleteTestCase(testCaseId));\n    yield put(deleteTestCaseOK(testCaseId));\n    yield put(setNotification({\n      type: 'success',\n      message: `Test case ${testCaseId} has been deleted`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* watchTestCases() {\n  yield takeEvery('REQUEST_TEST_CASE', handleRequestTestCase);\n  yield takeEvery('REQUEST_UPDATE_TEST_CASE', handleRequestUpdateTestCase);\n  yield takeEvery('REQUEST_ALL_TEST_CASES', handleRequestAllTestCases);\n  yield takeEvery('REQUEST_ADD_NEW_TEST_CASE', handleRequestAddNewTestCase);\n  yield takeEvery('REQUEST_DELETE_TEST_CASE', handleRequestDeleteTestCase);\n}\n\nexport default watchTestCases;","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  sendRequestAllDatasets,\n  sendRequestAddNewDataset,\n  sendRequestDeleteDataset,\n  sendRequestDataset,\n  sendRequestUpdateDataset\n} from '../api';\nimport {\n  setNotification,\n  setAllDatasets,\n  addNewDatasetOK,\n  deleteDatasetOK,\n  setCurrentDataset,\n} from '../actions';\n\nfunction* handleRequestDataset(action) {\n  try {\n    const tcId = action.payload;\n    const dataset = yield call(() => sendRequestDataset(tcId));\n    yield put(setCurrentDataset(dataset));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestUpdateDataset(action) {\n  try {\n    const {id, Dataset } = action.payload;\n    const newDataset = yield call(() => sendRequestUpdateDataset(id, Dataset));\n    yield put(addNewDatasetOK(newDataset));\n    yield put(setNotification({\n      type: 'success',\n      message: `A new dataset ${newDataset.name} has been added`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\n\nfunction* handleRequestAllDatasets() {\n  try {\n    const allDatasets = yield call(() => sendRequestAllDatasets());\n    yield put(setAllDatasets(allDatasets));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestAddNewDataset(action) {\n  try {\n    const Dataset = action.payload;\n    const newDataset = yield call(() => sendRequestAddNewDataset(Dataset));\n    yield put(addNewDatasetOK(newDataset));\n    yield put(setNotification({\n      type: 'success',\n      message: `A new dataset ${newDataset.name} has been added`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestDeleteDataset(action) {\n  try {\n    const datasetId = action.payload;\n    yield call(() => sendRequestDeleteDataset(datasetId));\n    yield put(deleteDatasetOK(datasetId));\n    yield put(setNotification({\n      type: 'success',\n      message: `Test case ${datasetId} has been deleted`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* watchDatasets() {\n  yield takeEvery('REQUEST_DATA_SET', handleRequestDataset);\n  yield takeEvery('REQUEST_UPDATE_DATA_SET', handleRequestUpdateDataset);\n  yield takeEvery('REQUEST_ALL_DATA_SETS', handleRequestAllDatasets);\n  yield takeEvery('REQUEST_ADD_NEW_DATA_SET', handleRequestAddNewDataset);\n  yield takeEvery('REQUEST_DELETE_DATA_SET', handleRequestDeleteDataset);\n}\n\nexport default watchDatasets;","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  sendRequestEventsByDatasetId,\n  sendRequestAddNewEvent,\n  sendRequestDeleteEvent,\n  sendRequestEvent,\n  sendRequestUpdateEvent\n} from '../api';\nimport {\n  setNotification,\n  setEvents,\n  addNewEventOK,\n  deleteEventOK,\n  updateEventOK\n} from '../actions';\n\nfunction* handleRequestEvent(action) {\n  try {\n    const tcId = action.payload;\n    yield call(() => sendRequestEvent(tcId));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestEventsByDatasetId(action) {\n  try {\n    const dsId = action.payload;\n    const events = yield call(() => sendRequestEventsByDatasetId(dsId));\n    yield put(setEvents(events));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestUpdateEvent(action) {\n  try {\n    const {id, event } = action.payload;\n    yield call(() => sendRequestUpdateEvent(id, event));\n    yield put(updateEventOK(event));\n    yield put(setNotification({\n      type: 'success',\n      message: `The event ${id} has been updated`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\n\nfunction* handleRequestAllEvents() {\n  try {\n    const allEvents = yield call(() => sendRequestEventsByDatasetId());\n    yield put(setEvents(allEvents));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestAddNewEvent(action) {\n  try {\n    const event = action.payload;\n    const newEvent = yield call(() => sendRequestAddNewEvent(event));\n    yield put(addNewEventOK(newEvent));\n    yield put(setNotification({\n      type: 'success',\n      message: `A new event ${newEvent._id} has been added`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestDeleteEvent(action) {\n  try {\n    const eventId = action.payload;\n    yield call(() => sendRequestDeleteEvent(eventId));\n    yield put(deleteEventOK(eventId));\n    yield put(setNotification({\n      type: 'success',\n      message: `Event ${eventId} has been deleted`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* watchEvents() {\n  yield takeEvery('REQUEST_EVENT', handleRequestEvent);\n  yield takeEvery('REQUEST_EVENTS_BY_DATASET_ID', handleRequestEventsByDatasetId);\n  yield takeEvery('REQUEST_UPDATE_EVENT', handleRequestUpdateEvent);\n  yield takeEvery('REQUEST_ALL_EVENTS', handleRequestAllEvents);\n  yield takeEvery('REQUEST_ADD_NEW_EVENT', handleRequestAddNewEvent);\n  yield takeEvery('REQUEST_DELETE_EVENT', handleRequestDeleteEvent);\n}\n\nexport default watchEvents;","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  sendRequestDevopts, sendRequestUpdateDevopts\n} from '../api';\nimport {\n  setNotification,\n  setDevopts,\n} from '../actions';\n\nfunction* handleRequestDevopts() {\n  try {\n    const devopts = yield call(() => sendRequestDevopts());\n    yield put(setDevopts(devopts));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestUpdateDevopts(action) {\n  try {\n    const newDevopts = action.payload;\n    yield call(() => sendRequestUpdateDevopts(newDevopts));\n    yield put(setDevopts(newDevopts));\n    yield put(setNotification({type: 'success', message: `The dev Opts flow has been updated`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* watchDevopts() {\n  yield takeEvery('REQUEST_DEV_OPTS', handleRequestDevopts);\n  yield takeEvery('REQUEST_UPDATE_DEV_OPTS', handleRequestUpdateDevopts);\n}\n\nexport default watchDevopts;\n","import { all } from \"redux-saga/effects\";\n\nimport requestModelSaga from \"./requestModelSaga\";\nimport uploadModelSaga from \"./uploadModelSaga\";\nimport simulationSaga from \"./simulationSaga\";\nimport requestLogsSaga from './requestLogsSaga';\nimport requestDataRecorderSaga from \"./requestDataRecorderSaga\";\nimport dataStorageSaga from './dataStorageSaga';\nimport testCampaignsSaga from './testCampaignsSaga';\nimport testCasesSaga from './testCasesSaga';\nimport datasetsSaga from './datasetsSaga';\nimport eventsSaga from './eventsSaga';\nimport devoptsSaga from './devoptsSaga';\n\nfunction* rootSaga() {\n  yield all([\n    requestModelSaga(),\n    requestDataRecorderSaga(),\n    uploadModelSaga(),\n    simulationSaga(),\n    requestLogsSaga(),\n    dataStorageSaga(),\n    testCampaignsSaga(),\n    devoptsSaga(),\n    testCasesSaga(),\n    datasetsSaga(),\n    eventsSaga(),\n  ]);\n}\n\nexport default rootSaga;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst configStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(\n    rootReducer,\n    compose(\n      applyMiddleware(sagaMiddleware)\n      ,\n      window.__REDUX_DEVTOOLS_EXTENSION__ ?\n        window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n    ),\n  );\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default configStore;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Layout, Menu, Row, Col } from \"antd\";\nimport {\n  ClusterOutlined, DatabaseOutlined, DeploymentUnitOutlined, InteractionOutlined, FileTextOutlined, FolderOpenOutlined, EyeOutlined,\n} from \"@ant-design/icons\";\n\nimport {\n  setNotification,\n} from \"../../actions\";\nimport \"./styles.css\";\n\nconst { Header } = Layout;\n\nclass TSHeader extends Component {\n  render() {\n    const menuLinks = [\n      '/test-campaigns',\n      '/test-cases',\n      '/models',\n      '/simulation',\n      '/data-recorders',\n      '/data-sets',\n      '/data-storage'\n    ];\n    // Calculate the selected menu\n    let selectedMenu = 0;\n    const fullPath = window.location.pathname;\n    let currentPositionIndex = fullPath.length - 1;\n    for (let index = 0; index < menuLinks.length; index++) {\n      const positionIndex = fullPath.indexOf(menuLinks[index]);\n      if ( positionIndex > -1 && positionIndex < currentPositionIndex) {\n        currentPositionIndex = positionIndex;\n        selectedMenu = index;\n      }\n    }\n\n    return (\n      <Header>\n        <Row>\n          <Col span={4}>\n            <a href=\"/\">\n              <img\n                src={'/img/Logo.png'}\n                className=\"logo\"\n                alt=\"Logo\"\n                style={{ maxWidth: \"250px\", objectFit: \"contain\" }}\n              />\n            </a>\n          </Col>\n          <Col span={14} push={6}>\n            <Menu theme=\"light\" mode=\"horizontal\" style={{ lineHeight: \"64px\" }} selectedKeys={`${selectedMenu}`}>\n              <Menu.Item key=\"0\">\n                <a href={menuLinks[0]}>\n                  <InteractionOutlined />\n                  Test Campaign\n                </a>\n              </Menu.Item>\n              <Menu.Item key=\"1\">\n                <a href={menuLinks[1]}>\n                  <FolderOpenOutlined />\n                  Test Case\n                </a>\n              </Menu.Item>\n              <Menu.Item key=\"2\">\n                <a href={menuLinks[2]}>\n                  <ClusterOutlined />\n                  Topology\n                </a>\n              </Menu.Item>\n              <Menu.Item key=\"3\">\n                <a href={menuLinks[3]}>\n                  <DeploymentUnitOutlined />\n                  Simulation\n                </a>\n              </Menu.Item>\n              <Menu.Item key=\"4\">\n                <a href={menuLinks[4]}>\n                  <EyeOutlined />\n                  Data Recorder\n                </a>\n              </Menu.Item>\n              <Menu.Item key=\"5\">\n                <a href={menuLinks[5]}>\n                  <FileTextOutlined />\n                  Data Set\n                </a>\n              </Menu.Item>\n              <Menu.Item key=\"6\">\n                <a href={menuLinks[6]}>\n                  <DatabaseOutlined />\n                  Data Storage\n                </a>\n              </Menu.Item>\n            </Menu>\n          </Col>\n        </Row>\n\n      </Header>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ requesting }) => ({\n  requesting,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNotification: ({ type, message }) =>\n    dispatch(setNotification({ type, message })),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(TSHeader);\n","import TSHeader from './TSHeader';\n\nexport default TSHeader;\n","import TSModal from './TSModal';\n\nexport default TSModal;","import React from \"react\";\nimport { Modal } from \"antd\";\nimport \"./style.css\";\n\nconst TSModal = ({ visible, title, footer, onCancel, children }) => (\n  <Modal visible={visible} title={title} footer={footer} onCancel={onCancel}>\n    {children}\n  </Modal>\n);\n\nexport default TSModal;\n","import React from \"react\";\nimport { Form, Input } from \"antd\";\nconst FormTextAreaItem = ({\n  label,\n  defaultValue,\n  onChange,\n  helpText = null,\n  rules=null,\n}) => (\n  <Form.Item label={label} name={label} extra={helpText} rules={rules}>\n    <Input.TextArea\n      rows={4}\n      onChange={(v) => onChange(v.target.value)}\n      style={{ minWidth: 300 }} \n    >\n      {defaultValue}\n    </Input.TextArea>\n  </Form.Item>\n);\n\nexport default FormTextAreaItem;\n","import React from 'react';\nimport { Form, Select } from \"antd\";\n\nconst FormSelectItem = ({label, defaultValue, onChange, options, helpText = null }) => (\n  <Form.Item label={label} extra={helpText}>\n    <Select\n      defaultValue={defaultValue ? defaultValue : (options ? options[0] : null) }\n      onChange={v => onChange( v)}\n      style={{ minWidth: 300 }} \n    >\n      {options.map(tid => (\n        <Select.Option value={tid} key={tid}>{tid}</Select.Option>\n      ))}\n    </Select>\n  </Form.Item>\n)\n\nexport default FormSelectItem;","import React from \"react\";\nimport { Form, InputNumber } from \"antd\";\n\nconst FormNumberItem = ({\n  label,\n  defaultValue,\n  min,\n  max,\n  onChange,\n  placeholder,\n  helpText = null,\n  rules = null,\n}) => (\n  <Form.Item label={label} extra={helpText} rules={rules}>\n    <InputNumber\n      min={min}\n      max={max}\n      defaultValue={defaultValue}\n      onChange={(v) => onChange(v)}\n      placeholder={placeholder}\n    />\n  </Form.Item>\n);\n\nexport default FormNumberItem;\n","import React from 'react';\nimport { Form, Switch } from \"antd\";\n\nconst FormSwitchItem = ({label, checked, onChange, checkedChildren, unCheckedChildren, helpText = null}) =>(\n  <Form.Item label={label} extra={helpText}>\n    <Switch\n      onChange={v => onChange(v)}\n      checkedChildren={checkedChildren}\n      unCheckedChildren={unCheckedChildren}\n      checked={checked}\n    />\n  </Form.Item>\n);\n\nexport default FormSwitchItem;","import React from \"react\";\nimport { Form, DatePicker } from \"antd\";\nimport moment from 'moment';\n\nconst { RangePicker } = DatePicker;\n\nconst FormTimeRangeItem = ({ label, onChange, defaultValue, helpText = null }) => {\n  let startTime = moment();\n  let endTime = moment();\n  if (defaultValue && defaultValue.length === 2) {\n    startTime = moment(defaultValue[0]);\n    endTime = moment(defaultValue[1]);\n  }\n  return (\n    <Form.Item label={label} extra={helpText}>\n    <RangePicker\n      defaultValue={[startTime, endTime]}\n      showTime={{ format: \"HH:mm\" }}\n      format=\"YYYY-MM-DD HH:mm\"\n      onChange={(value, dateString) =>\n        onChange([\n          new Date(dateString[0]).getTime(),\n          new Date(dateString[1]).getTime()\n        ])\n      }\n    />\n  </Form.Item>\n  )\n};\n\nexport default FormTimeRangeItem;\n","import React from \"react\";\nimport { Form, Checkbox } from \"antd\";\n\nconst FormCheckBoxItem = ({ label, defaultValue, onChange, options, helpText = null  }) => (\n  <Form.Item label={label} extra={helpText}>\n    <Checkbox.Group\n      options={options}\n      defaultValue={defaultValue}\n      onChange={onChange}\n    />\n  </Form.Item>\n);\n\nexport default FormCheckBoxItem;\n","import React from \"react\";\nimport { Form, InputNumber, List, Card } from \"antd\";\n\nconst FormRegularNumberItem = ({ label, items, onChange, helpText = null  }) => (\n  <Form.Item label={label} extra={helpText}>\n    <List\n      grid={{ gutter: 16, column: items.length }}\n      dataSource={items}\n      renderItem={(item) => (\n        <List.Item>\n          <Card size=\"small\" bordered={false}  title={item.title}>\n            <InputNumber\n              onChange={(v) => onChange(item.dataPath, v)}\n              defaultValue={item.defaultValue ? item.defaultValue : 0}\n              placeholder={item.title}\n            />\n          </Card>\n        </List.Item>\n      )}\n    />\n  </Form.Item>\n);\n\nexport default FormRegularNumberItem;\n","import React from \"react\";\nimport { Form, Typography } from \"antd\";\nconst { Text } = Typography;\n\nconst FormEditableTextItem = ({ label, defaultValue, onChange, helpText=null }) => (\n  <Form.Item label={label} extra={helpText}>\n      <Text\n        editable={{\n          onChange: (v) => {\n            onChange(v);\n          },\n        }}\n        code\n      >\n        {typeof defaultValue === \"string\" ? defaultValue : JSON.stringify(defaultValue)}\n      </Text>\n  </Form.Item>\n);\n\nexport default FormEditableTextItem;\n","import React from \"react\";\nimport { Form, Typography } from \"antd\";\nconst { Text } = Typography;\n\nconst FormTextNotEditableItem = ({ label, value, helpText = null, copyable = false }) => (\n  <Form.Item label={label} name={label} extra={helpText}>\n    <Text copyable={copyable}>{value}</Text>\n  </Form.Item>\n);\n\nexport default FormTextNotEditableItem;\n","import React from \"react\";\nimport { Collapse } from \"antd\";\n\nconst { Panel } = Collapse;\n\nconst CollapseForm = ({ title, children, bordered = true, active, extra=null }) => (\n  <Collapse accordion style={{margin: '10px'}} defaultActiveKey={active ? ['1'] : null} bordered={bordered}>\n    <Panel header={title} key=\"1\" extra={extra}>\n      {children}\n    </Panel>\n  </Collapse>\n);\n\nexport default CollapseForm;\n","import CollapseForm from './CollapseForm';\nexport default CollapseForm;","import React from \"react\";\nimport { FormEditableTextItem, FormCheckBoxItems } from \"../../FormItems\";\nimport \"./DataSourceForm.css\";\nimport { Button } from \"antd\";\nimport CollapseForm from \"../../CollapseForm\";\n\nconst defaultBehaviours = [\n  \"AB_FIX_VALUE\",\n  \"AB_INVALID_VALUE\",\n  \"NORMAL_BEHAVIOUR\",\n];\n\nconst DataSourceForm = ({\n  dataPath,\n  defaultValue,\n  onChange,\n  behaviours,\n  children,\n}) => (\n  <CollapseForm title={defaultValue.key}>\n      <FormEditableTextItem\n        label=\"key\"\n        defaultValue={defaultValue.key}\n        onChange={(v) => onChange(`${dataPath}.key`, v)}\n        placeholder=\"Require\"\n        helpText=\"The key or the id to identify this measurement\"\n        rules = {[\n              {\n                required: true,\n                message: \"Key is required!\"\n              }\n            ]}\n      />\n      <FormEditableTextItem\n        label=\"Resource Id\"\n        defaultValue={defaultValue.resourceId}\n        onChange={(v) => onChange(`${dataPath}.resourceId`, v)}\n        placeholder=\"Optional\"\n        helpText=\"The resource id if the report follows the IPSO standard! For example: 5700 - for sensor value\"\n      />\n      <FormEditableTextItem\n        label=\"unit\"\n        defaultValue={defaultValue.unit}\n        onChange={(v) => onChange(`${dataPath}.unit`, v)}\n        placeholder=\"Unit of the measurement\"\n        helpText=\"The unit of this measurement\"\n      />\n      <FormCheckBoxItems\n        label=\"Behaviours\"\n        defaultValue={defaultValue.behaviours}\n        onChange={(v) => onChange(`${dataPath}.behaviours`, v)}\n        options={\n          behaviours ? defaultBehaviours.concat(behaviours) : defaultBehaviours\n        }\n        helpText=\"The abnormal behaviours of the measurement.\"\n      />\n      {children}\n      <Button type=\"danger\" onClick={() => onChange(dataPath, null)}>\n        Remove\n      </Button>\n  </CollapseForm>\n);\n\nexport default DataSourceForm;\n","import React from \"react\";\nimport DataSourceForm from \"./DataSourceForm\";\nimport { FormNumberItem, FormRegularNumberItem } from \"../../FormItems\";\n\nconst EnergyForm = ({ dataPath, defaultValue, onChange }) => (\n  <React.Fragment>\n    <DataSourceForm\n      dataPath={dataPath}\n      defaultValue={defaultValue}\n      onChange={(dPath, v) => onChange(dPath, v)}\n    >\n      <FormNumberItem\n        label=\"Init Value\"\n        min={1}\n        max={65535}\n        defaultValue={defaultValue.initValue}\n        onChange={(v) => onChange(`${dataPath}.initValue`, v)}\n        helpText=\"The initialize energy value!\"\n      />\n      <FormRegularNumberItem\n        label=\"Energy\"\n        items={[\n          {\n            title: \"Consum\",\n            dataPath: `${dataPath}.consumInOnePeriod`,\n            defaultValue: defaultValue.consumInOnePeriod,\n          },\n          {\n            title: \"Low\",\n            dataPath: `${dataPath}.low`,\n            defaultValue: defaultValue.low,\n          },\n          {\n            title: \"Slow Down Rate\",\n            dataPath: `${dataPath}.slowDownRate`,\n            defaultValue: defaultValue.slowDownRate,\n          },\n        ]}\n        onChange={(dPath, v) => onChange(dPath, v)}\n        helpText=\"The energy specification!\"\n      />\n    </DataSourceForm>\n  </React.Fragment>\n);\n\nexport default EnergyForm;\n","import React from \"react\";\nimport DataSourceForm from \"./DataSourceForm\";\nimport { FormSwitchItem } from \"../../FormItems\";\n\nconst BooleanForm = ({ dataPath, defaultValue, onChange }) => (\n  <React.Fragment>\n    <DataSourceForm\n      dataPath={dataPath}\n      defaultValue={defaultValue}\n      onChange={(dPath, v) => onChange(dPath, v)}\n    >\n      <FormSwitchItem\n        label=\"Init Value\"\n        onChange={(v) => onChange(`${dataPath}.initValue`, v)}\n        checked={defaultValue.initValue ? true : false}\n        checkedChildren={\"True\"}\n        unCheckedChildren={\"False\"}\n        helpText=\"Initial value!\"\n      />\n    </DataSourceForm>\n  </React.Fragment>\n);\n\nexport default BooleanForm;\n","import React from \"react\";\nimport DataSourceForm from \"./DataSourceForm\";\nimport { FormSelectItem, FormEditableTextItem } from \"../../FormItems\";\n\nconst EnumForm = ({ dataPath, defaultValue, onChange }) => (\n  <React.Fragment>\n    <DataSourceForm\n      dataPath={dataPath}\n      defaultValue={defaultValue}\n      onChange={(dPath, v) => onChange(dPath, v)}\n    >\n      <FormSelectItem\n        label=\"Init Value\"\n        defaultValue={defaultValue.initValue}\n        onChange={(v) => onChange(`${dataPath}.initValue`, v)}\n        options={defaultValue.values}\n        helpText=\"Initial value!\"\n      />\n      <FormEditableTextItem\n        label=\"Value\"\n        defaultValue={JSON.stringify(defaultValue.values)}\n        onChange={(v) => onChange(`${dataPath}.values`, JSON.parse(v))}\n        placeholder=\"value1, value2, value3\"\n        helpText=\"The list of possible values. Each value should be separated by a comma (,)\"\n        rules = {[\n              {\n                required: true,\n                message: \"Values is required!\"\n              }\n            ]}\n      />\n    </DataSourceForm>\n  </React.Fragment>\n);\n\nexport default EnumForm;\n","import React from \"react\";\nimport DataSourceForm from \"./DataSourceForm\";\nimport {\n  FormNumberItem,\n  FormRegularNumberItem,\n  FormSwitchItem,\n} from \"../../FormItems\";\nimport CollapseForm from '../../CollapseForm';\nconst defaultValueConstraints = {\n  min: 0,\n  max: 100,\n  regularMin: 0,\n  regularMax: 100,\n  step: 2,\n};\nconst ValueConstraintForm = ({ defaultValue, dataPath, onChange }) => (\n  <CollapseForm title={\"Value Constraints\"}>\n    <FormRegularNumberItem\n      label=\"Range\"\n      items={[\n        {\n          title: \"Min\",\n          dataPath: `${dataPath}.min`,\n          defaultValue: defaultValue.min,\n        },\n        {\n          title: \"Max\",\n          dataPath: `${dataPath}.max`,\n          defaultValue: defaultValue.max,\n        },\n      ]}\n      onChange={(dPath, v) => onChange(dPath, v)}\n      helpText=\"The valid value range. For example the humage lifespan can be from 0 - 200\"\n    />\n    <FormRegularNumberItem\n      label=\"Regular Range\"\n      items={[\n        {\n          title: \"Regular Min\",\n          dataPath: `${dataPath}.regularMin`,\n          defaultValue: defaultValue.regularMin,\n        },\n        {\n          title: \"Regular Max\",\n          dataPath: `${dataPath}.regularMax`,\n          defaultValue: defaultValue.regularMax,\n        },\n        {\n          title: \"Step\",\n          dataPath: `${dataPath}.step`,\n          defaultValue: defaultValue.step,\n        },\n      ]}\n      onChange={(dPath, v) => onChange(dPath, v)}\n      helpText=\"The regular value range. For example the teenages age can be from 13-19. The step is the maximum different between 2 reports!\"\n    />\n  </CollapseForm>\n);\n\nconst IntegerFloatForm = ({ dataPath, defaultValue, onChange }) => (\n  <React.Fragment>\n    <DataSourceForm\n      dataPath={dataPath}\n      defaultValue={defaultValue}\n      onChange={(dPath, v) => onChange(dPath, v)}\n      behaviours={[\n        \"AB_VALUE_OUT_OF_RANGE\",\n        \"AB_VALUE_OUT_OF_REGULAR_RANGE\",\n        \"AB_VALUE_CHANGE_OUT_OF_REGULAR_STEP\",\n      ]}\n    >\n      <FormNumberItem\n        label=\"Init Value\"\n        defaultValue={defaultValue.initValue}\n        onChange={(v) => onChange(`${dataPath}.initValue`, v)}\n        helpText=\"Initial value!\"\n      />\n      <FormSwitchItem\n        label=\"Value Constraints\"\n        onChange={(v) => onChange(`${dataPath}.withValueConstraints`, v)}\n        checked={defaultValue.withValueConstraints ? true : false}\n        checkedChildren={\"Enable\"}\n        unCheckedChildren={\"Disable\"}\n        helpText=\"Enable or disable the value constraints specification\"\n      />\n      {defaultValue.withValueConstraints ? (\n        defaultValue.valueConstraints ? (\n          <ValueConstraintForm\n            defaultValue={defaultValue.valueConstraints}\n            dataPath={`${dataPath}.valueConstraints`}\n            onChange={(dPath, v) => onChange(dPath, v)}\n          />\n        ) : (\n          <ValueConstraintForm\n            defaultValue={defaultValueConstraints}\n            dataPath={`${dataPath}.valueConstraints`}\n            onChange={(dPath, v) => onChange(dPath, v)}\n          />\n        )\n      ) : (\n        <React.Fragment></React.Fragment>\n      )}\n    </DataSourceForm>\n  </React.Fragment>\n);\n\nexport default IntegerFloatForm;\n","import React, { Fragment } from \"react\";\nimport BooleanForm from \"./BooleanForm\";\nimport EnumForm from \"./EnumForm\";\nimport IntegerFloatForm from \"./IntegerFloatForm\";\n\nconst MultipleDataSources = ({ dataPath, sources, onChange }) => (\n  <Fragment>\n    {sources.map((source, index) => {\n      if (source) {\n        switch (source.type) {\n          case \"DATA_SOURCE_BOOLEAN\":\n            return <BooleanForm\n              key={index}\n              dataPath={`${dataPath}[${index}]`}\n              defaultValue={source}\n              onChange={(dPath, v) => onChange(dPath, v)}\n            />;\n          case \"DATA_SOURCE_ENUM\":\n            return <EnumForm\n              key={index}\n              dataPath={`${dataPath}[${index}]`}\n              defaultValue={source}\n              onChange={(dPath, v) => onChange(dPath, v)}\n            />;\n          case \"DATA_SOURCE_INTEGER\":\n          case \"DATA_SOURCE_FLOAT\":\n            return <IntegerFloatForm\n              key={index}\n              dataPath={`${dataPath}[${index}]`}\n              defaultValue={source}\n              onChange={(dPath, v) => onChange(dPath, v)}\n            />;\n        }\n      }\n    })}\n  </Fragment>\n);\nexport default MultipleDataSources;\n","import React from \"react\";\nimport {\n  FormNumberItem,\n  FormCheckBoxItems,\n  FormSwitchItem,\n} from \"../FormItems\";\n\nimport EnergyForm from \"./DataSourceForms/EnergyForm\";\nimport MultipleDataSources from \"./DataSourceForms/MultipleDataSources\";\nimport { Button, Divider, Dropdown, Menu } from \"antd\";\nimport { UpOutlined } from \"@ant-design/icons\";\n\nconst initEnergy = () => ({\n  type: \"DATA_SOURCE_ENERGY\",\n  key: \"battery\",\n  resourceId: \"battery-01\",\n  initValue: 1500,\n  unit: \"mA\",\n  behaviours: [],\n  low: 1000,\n  slowDownRate: 2,\n  consumInOnePeriod: 200,\n});\n\nconst initBoolean = () => ({\n  type: \"DATA_SOURCE_BOOLEAN\",\n  key: \"your-boolean-data-key\",\n  resourceId: \"boolean-measure-id\",\n  initValue: true,\n  unit: \"\",\n  behaviours: [],\n});\n\nconst initEnum = () => ({\n  type: \"DATA_SOURCE_ENUM\",\n  key: \"your-enum-data-key\",\n  resourceId: \"enum-measure-id\",\n  initValue: \"value1\",\n  unit: \"\",\n  behaviours: [],\n  values: [\"value1\", \"value2\"],\n});\n\nconst initInteger = () => ({\n  type: \"DATA_SOURCE_INTEGER\",\n  key: \"your-integer-data-key\",\n  resourceId: \"integer-measure-id\",\n  initValue: 10,\n  unit: \"\",\n  behaviours: [],\n  valueConstraints: {\n    min: 0,\n    max: 100,\n    regularMin: 20,\n    regularMax: 80,\n    step: 1,\n  },\n});\n\nconst initFloat = () => ({\n  type: \"DATA_SOURCE_FLOAT\",\n  key: \"your-float-data-key\",\n  resourceId: \"float-measure-id\",\n  initValue: 10.0,\n  unit: \"\",\n  behaviours: [],\n  valueConstraints: {\n    min: 0,\n    max: 100,\n    regularMin: 20,\n    regularMax: 80,\n    step: 1,\n  },\n});\n\nconst DataGeneratorForm = ({ dataPath, dataSpecs, onDataChange }) => (\n  <React.Fragment>\n    <FormNumberItem\n      label=\"Number of Instance\"\n      min={1}\n      max={1000000}\n      placeholder=\"Number of instances\"\n      defaultValue={dataSpecs.scale ? dataSpecs.scale : 1}\n      onChange={(v) => onDataChange(`${dataPath}.scale`, v)}\n      helpText=\"The number of device with the same configuration. The id of device will be indexed automatically!\"\n    />\n    <FormNumberItem\n      label=\"Time Internal (in seconds)\"\n      min={1}\n      max={65535}\n      defaultValue={dataSpecs.timePeriod ? dataSpecs.timePeriod : 5}\n      onChange={(v) => onDataChange(`${dataPath}.timePeriod`, v)}\n      helpText=\"The time period to define the publishing data frequency\"\n      rules={[\n        {\n          required: true,\n          message: \"Time internal is required!\",\n        },\n      ]}\n    />\n\n    <FormCheckBoxItems\n      label=\"Sensor Behaviours\"\n      defaultValue={dataSpecs.sensorBehaviours}\n      onChange={(v) => onDataChange(`${dataPath}.sensorBehaviours`, v)}\n      options={[\n        \"AB_LOW_ENERGY\",\n        \"AB_OUT_OF_ENERGY\",\n        \"AB_NODE_FAILED\",\n        \"AB_DOS_ATTACK\",\n        \"AB_SLOW_DOS_ATTACK\",\n        \"NORMAL_BEHAVIOUR\",\n      ]}\n      helpText=\"The possible behaviours of the sensor\"\n    />\n    {dataSpecs.sensorBehaviours.indexOf(\"AB_DOS_ATTACK\") > -1 && (\n      <FormNumberItem\n        label=\"Speedup rate\"\n        min={1}\n        max={100}\n        defaultValue={dataSpecs.dosAttackSpeedUpRate}\n        onChange={(v) => onDataChange(`${dataPath}.dosAttackSpeedUpRate`, v)}\n        helpText=\"The speedup rate in DDOS attack. Define how many time faster the sensor will publish data compare to normal condition\"\n      />\n    )}\n    {dataSpecs.sensorBehaviours.indexOf(\"AB_NODE_FAILED\") > -1 && (\n      <FormNumberItem\n        label=\"Time Before Failed (seconds)\"\n        min={1}\n        max={65535}\n        defaultValue={dataSpecs.timeBeforeFailed}\n        onChange={(v) => onDataChange(`${dataPath}.timeBeforeFailed`, v)}\n        helpText=\"The time before this device going to be failed!\"\n      />\n    )}\n    <FormSwitchItem\n      label=\"IP Smart Object Format\"\n      onChange={(v) => onDataChange(`${dataPath}.isIPSOFormat`, v)}\n      checked={dataSpecs.isIPSOFormat ? true : false}\n      checkedChildren={\"Enable\"}\n      unCheckedChildren={\"Disable\"}\n      helpText=\"Change the data report to IP Smart Object format\"\n    />\n    <Divider>\n      <h3>Measurements</h3>\n    </Divider>\n    <FormSwitchItem\n      label=\"Energy Measurement\"\n      onChange={(v) => {\n        onDataChange(`${dataPath}.withEnergy`, v);\n        if (v && !dataSpecs.energy) {\n          onDataChange(`${dataPath}.energy`, initEnergy());\n        }\n      }}\n      checked={dataSpecs.withEnergy ? true : false}\n      checkedChildren={\"Enable\"}\n      unCheckedChildren={\"Disable\"}\n      helpText=\"Enable or disable the energy measurement for this device\"\n    />\n    {dataSpecs.withEnergy && (\n      <EnergyForm\n        dataPath={`${dataPath}.energy`}\n        defaultValue={dataSpecs.energy ? dataSpecs.energy : initEnergy()}\n        onChange={(dPath, v) => onDataChange(dPath, v)}\n      />\n    )}\n    <MultipleDataSources\n      dataPath={`${dataPath}.sources`}\n      sources={dataSpecs.sources ? dataSpecs.sources : []}\n      onChange={(dPath, v) => onDataChange(dPath, v)}\n    />\n    <Dropdown\n      overlay={\n        <Menu>\n          <Menu.Item\n            key=\"1\"\n            onClick={() => {\n              const index = dataSpecs.sources.length;\n              const dPath = `${dataPath}.sources[${index}]`;\n              onDataChange(dPath, initBoolean());\n            }}\n          >\n            Boolean Data Type\n          </Menu.Item>\n          <Menu.Item\n            key=\"2\"\n            onClick={() => {\n              const index = dataSpecs.sources.length;\n              const dPath = `${dataPath}.sources[${index}]`;\n              onDataChange(dPath, initEnum());\n            }}\n          >\n            Enum Data Type\n          </Menu.Item>\n          <Menu.Item\n            key=\"3\"\n            onClick={() => {\n              const index = dataSpecs.sources.length;\n              const dPath = `${dataPath}.sources[${index}]`;\n              onDataChange(dPath, initInteger());\n            }}\n          >\n            Integer Data Type\n          </Menu.Item>\n          <Menu.Item\n            key=\"4\"\n            onClick={() => {\n              const index = dataSpecs.sources.length;\n              const dPath = `${dataPath}.sources[${index}]`;\n              onDataChange(dPath, initFloat());\n            }}\n          >\n            Float Data Type\n          </Menu.Item>\n        </Menu>\n      }\n      placement=\"topLeft\"\n    >\n      <Button type=\"primary\" style={{ margin: \"20px\" }}>\n        Add New Measure <UpOutlined />\n      </Button>\n    </Dropdown>\n  </React.Fragment>\n);\n\nexport default DataGeneratorForm;\n","import React, { Component } from \"react\";\nimport TSModal from \"../TSModal\";\nimport { Form, Button } from \"antd\";\nimport {\n  FormSwitchItem,\n  FormEditableTextItem,\n  FormTextNotEditableItem,\n  FormSelectItem,\n} from \"../FormItems\";\n\nimport {\n  updateObjectByPath,\n} from \"../../utils\";\nimport DataGeneratorForm from \"./DataGeneratorForm\";\n\nclass SensorModal extends Component {\n  constructor(props) {\n    super(props);\n    const { sensorData } = props;\n    this.state = {\n      sensorData,\n      isChanged: false,\n    };\n  }\n\n  onDataChange(dataPath, value) {\n    this.setState((prevState) => {\n      const newData = { ...prevState };\n      updateObjectByPath(newData, dataPath, value);\n      return { ...newData, isChanged: true };\n    });\n  }\n\n  saveData() {\n    const { sensorData } = this.state;\n    this.props.onOK(sensorData);\n    this.props.onClose();\n  }\n\n  render() {\n    const { sensorData, isChanged } = this.state;\n    const {enable, onClose, deviceId} = this.props;\n    if (!sensorData) return null;\n    const reportFormats = ['PLAIN_DATA','JSON_OBJECT','IPSO_FORMAT'];\n    const reportFormatHelpTexts=[\n      'Report only the value of the sensor. The value will be in array if the sensor has multiple measurements',\n      'Report the value of the sensor in JSON Object format, with the keys are defined in the description of the sensor',\n      'Report the value of the sensor in JSON Object and follow the IPSO format, with the keys are defined in the description of the sensor',\n    ]\n    return (\n      <TSModal\n        title={`Sensor ${sensorData.name}`}\n        visible={enable}\n        onCancel={() => onClose()}\n        footer={[\n          <Button key=\"cancel\" onClick={() => onClose()}>\n            Cancel\n          </Button>,\n          <Button key=\"ok\" type=\"primary\" onClick={() => this.saveData()} disabled={isChanged ? false: true}>\n            OK\n          </Button>,\n        ]}\n      >\n        <Form\n          labelCol={{\n            span: 4,\n          }}\n          wrapperCol={{\n            span: 14,\n          }}\n        >\n          <FormTextNotEditableItem label=\"Device\" value={deviceId} />\n          <FormEditableTextItem\n            label=\"Id\"\n            defaultValue={sensorData.id}\n            onChange={(v) => this.onDataChange(\"sensorData.id\", v)}\n            placeholder=\"Identify of the device\"\n            helpText=\"The identify of the device\"\n            rules={[\n              {\n                required: true,\n                message: \"Id is required!\",\n              },\n            ]}\n          />\n          <FormEditableTextItem\n            label=\"Object Id\"\n            defaultValue={sensorData.objectId}\n            onChange={(v) => this.onDataChange(\"sensorData.objectId\", v)}\n            placeholder=\"Identify of the type of device (IPSO Standard)\"\n            helpText=\"The identify of the device type based on IPSO format. For example 3313 - for temperature\"\n          />\n          <FormEditableTextItem\n            label=\"Name\"\n            defaultValue={sensorData.name}\n            onChange={(v) => this.onDataChange(\"sensorData.name\", v)}\n            helpText=\"The name of the device\"\n          />\n          <FormEditableTextItem\n            label=\"Topic\"\n            defaultValue={sensorData.topic}\n            onChange={(v) => this.onDataChange(\"sensorData.topic\", v)}\n            helpText=\"The topic to which the sensor will publish data!\"\n          />\n          <FormSwitchItem\n            label=\"Enable\"\n            onChange={(v) => this.onDataChange(\"sensorData.enable\", v)}\n            checked={sensorData.enable ? true : false}\n            checkedChildren={\"On\"}\n            unCheckedChildren={\"Off\"}\n            helpText=\"Enable or disable this device from the simulation\"\n          />\n          <FormSelectItem\n            label=\"Report Format\"\n            defaultValue={reportFormats[sensorData.reportFormat]}\n            helpText={reportFormatHelpTexts[sensorData.reportFormat]}\n            options={reportFormats}\n            onChange={v => this.onDataChange('sensorData.reportFormat', reportFormats.indexOf(v))}\n          />\n          <FormSelectItem\n            label=\"Data Source\"\n            defaultValue={sensorData.dataSource}\n            options={['DATA_SOURCE_DATASET','DATA_SOURCE_GENERATOR','DATA_SOURCE_RECORDER']}\n            onChange={v => this.onDataChange('sensorData.dataSource', v)}\n          />\n          <DataGeneratorForm\n            dataPath={\"sensorData.dataSpecs\"}\n            dataSpecs={sensorData.dataSpecs}\n            onDataChange={(dataPath, value) => this.onDataChange(dataPath, value)}\n          />\n        </Form>\n      </TSModal>\n    );\n  }\n}\n\nexport default SensorModal;\n","import SensorModal from './SensorModal';\nimport './style.css';\nexport default SensorModal;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport TSModal from \"../TSModal\";\nimport {\n  addSimulationActuator,\n  showModal,\n  selectActuator,\n} from \"../../actions\";\nimport { Form, Button } from \"antd\";\nimport {\n  updateObjectByPath,\n} from \"../../utils\";\nimport {\n  FormTextNotEditableItem,\n  FormNumberItem,\n  FormSwitchItem,\n  FormEditableTextItem,\n} from \"../FormItems\";\n\nclass ActuatorModal extends Component {\n  constructor(props) {\n    super(props);\n    const { actuatorData } = props;\n    this.state = {\n      actuatorData,\n      isChanged: false\n    };\n  }\n\n  onDataChange(dataPath, value) {\n    this.setState((prevState) => {\n      const newData = { ...prevState };\n      updateObjectByPath(newData, dataPath, value);\n      return { ...newData, isChanged: true };\n    });\n  }\n\n  saveData() {\n    const {actuatorData} = this.state;\n    this.props.onOK({actuatorData});\n    this.props.onClose();\n  }\n\n  render() {\n    const { actuatorData, isChanged } = this.state;\n    if (!actuatorData) return null;\n    const { deviceId, onClose, enable} = this.props;\n    return (\n      <TSModal\n        title={\"Actuator\"}\n        visible={enable}\n        onCancel={() => onClose()}\n        footer={\n          [<Button key=\"cancel\" onClick={() => onClose()}>\n          Cancel\n        </Button>,\n        <Button key=\"ok\" type=\"primary\" onClick={() => this.saveData()} disabled={isChanged? false:true}>\n          OK\n        </Button>]\n        }\n      >\n        <Form\n          labelCol={{\n            span: 4,\n          }}\n          wrapperCol={{\n            span: 14,\n          }}\n        >\n        <FormTextNotEditableItem label=\"Device\" value={deviceId} />\n          <FormEditableTextItem\n            label=\"Id\"\n            defaultValue={actuatorData.id}\n            onChange={(v) => this.onDataChange(\"actuatorData.id\", v)}\n            helpText=\"The identify of the actuator\"\n            rules = {[\n              {\n                required: true,\n                message: \"Id is required!\"\n              }\n            ]}\n          />\n          <FormEditableTextItem\n            label=\"Object Id\"\n            defaultValue={actuatorData.objectId}\n            onChange={(v) => this.onDataChange(\"actuatorData.objectId\", v)}\n            placeholder=\"Identify of device type (IP Smart Object Format)\"\n            helpText=\"The identify of the device type based on IPSO format. For example 3313 - for temperature\"\n          />\n          <FormEditableTextItem\n            label=\"Name\"\n            defaultValue={actuatorData.name}\n            onChange={(v) => this.onDataChange(\"actuatorData.name\", v)}\n            helpText=\"The actuator's name\"\n          />\n          <FormNumberItem\n            label=\"Number of Instance\"\n            min={1}\n            max={1000000}\n            placeholder=\"Number of instances\"\n            defaultValue={actuatorData.scale ? actuatorData.scale : 1}\n            onChange={(v) => this.onDataChange(\"actuatorData.scale\", v)}\n            helpText=\"The number of actuators with the same configuration. The id of the generated actuator will be indexed automatically\"\n          />\n          <FormEditableTextItem\n            label=\"Topic\"\n            defaultValue={actuatorData.topic}\n            onChange={(v) => this.onDataChange(\"actuatorData.topic\", v)}\n            helpText=\"The MQTT/STOMP topic on which the actuator will be listening to receive actuated data\"\n          />\n          <FormSwitchItem\n            label=\"Enable\"\n            onChange={(v) => this.onDataChange(\"actuatorData.enable\", v)}\n            checked={actuatorData.enable ? true : false}\n            checkedChildren={\"On\"}\n            unCheckedChildren={\"Off\"}\n            helpText=\"Enable or disable this actuator from the simulation\"\n          />\n        </Form>\n      </TSModal>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ editingForm, model }) => ({\n  formID: editingForm.formID,\n  selectedActuator: editingForm.selectedActuator,\n  model,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  showModal: (modalID) => dispatch(showModal(modalID)),\n  selectActuator: (act) => dispatch(selectActuator(act)),\n  addSimulationActuator: (deviceID, data) =>\n    dispatch(addSimulationActuator({ deviceID, actuator: data })),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(ActuatorModal);\n","import ActuatorModal from './ActuatorModal';\nimport './style.css';\nexport default ActuatorModal;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport JSONEditor from 'jsoneditor/dist/jsoneditor-minimalist';\nimport 'jsoneditor/dist/jsoneditor.css';\n\n/**\n * @typedef {{\n * tree: string,\n * view: string,\n * form: string,\n * code: string,\n * text: string,\n * allValues: Array<string>\n * }} TJsonEditorModes\n */\nconst modes = {\n    tree: 'tree',\n    view: 'view',\n    form: 'form',\n    code: 'code',\n    text: 'text'\n};\n\nconst values = Object.values(modes);\n\nmodes.allValues = values;\n\n/**\n * @type {object}\n * @property {object} [value]\n * @property {string} [mode='tree'] - Set the editor mode.\n * @property {string} [name=undefined] - Initial field name for the root node\n * @property {object} [schema] - Validate the JSON object against a JSON schema.\n * @property {object} [schemaRefs] - Schemas that are referenced using\n * the $ref property\n * @property {Function} [onChange] - Set a callback function\n * triggered when the contents of the JSONEditor change.\n * Called without parameters. Will only be triggered on changes made by the user.\n * Return new json.\n * @property {Function} [onError] - Set a callback function triggered when an error occurs.\n * Invoked with the error as first argument.\n * The callback is only invoked for errors triggered by a users action,\n * like switching from code mode to tree mode or clicking\n * the Format button whilst the editor doesn't contain valid JSON.\n * @property {Function} [onModeChange] - Set a callback function\n * triggered right after the mode is changed by the user.\n * @property {object} [ace] - Provide a version of the Ace editor.\n * Only applicable when mode is code\n * @property {object} [ajv] - Provide a instance of ajv,\n * the library used for JSON schema validation.\n * @property {string} [theme] - Set the Ace editor theme,\n * uses included 'ace/theme/jsoneditor' by default.\n * @property {boolean} [history=false] - Enables history,\n * adds a button Undo and Redo to the menu of the JSONEditor. Only applicable when\n * mode is 'tree' or 'form'\n * @property {boolean} [navigationBar=true] - Adds navigation bar to the menu\n * the navigation bar visualize the current position on the\n * tree structure as well as allows breadcrumbs navigation.\n * @property {boolean} [statusBar=true] - Adds status bar to the buttom of the editor\n * the status bar shows the cursor position and a count of the selected characters.\n * Only applicable when mode is 'code' or 'text'.\n * @property {boolean} [search=true] - Enables a search box in\n * the upper right corner of the JSONEditor.\n * @property {Array<string>} [allowedModes] - Create a box in the editor menu where\n * the user can switch between the specified modes.\n * @property {(string|PropTypes.elementType)} [tag='div'] - Html element, or react element to render\n * @property {object} [htmlElementProps] - html element custom props\n * @property {Function} [innerRef] - callback to get html element reference\n */\nexport default class Editor extends Component {\n    constructor(props) {\n        super(props);\n\n        this.htmlElementRef = null;\n        this.jsonEditor = null;\n\n        this.handleChange = this.handleChange.bind(this);\n        this.setRef = this.setRef.bind(this);\n        this.collapseAll = this.collapseAll.bind(this);\n        this.expandAll = this.expandAll.bind(this);\n        this.focus = this.focus.bind(this);\n    }\n\n    componentDidMount() {\n        const {\n            allowedModes,\n            innerRef,\n            htmlElementProps,\n            tag,\n            onChange,\n            ...rest\n        } = this.props;\n\n        this.createEditor({\n            ...rest,\n            modes: allowedModes\n        });\n    }\n\n    // eslint-disable-next-line react/sort-comp\n    componentDidUpdate({\n        allowedModes,\n        schema,\n        name,\n        theme,\n        schemaRefs,\n        innerRef,\n        htmlElementProps,\n        tag,\n        onChange,\n        ...rest\n    }) {\n        if (this.jsonEditor) {\n            if (theme !== this.props.theme) {\n                this.createEditor({\n                    ...rest,\n                    theme,\n                    modes: allowedModes\n                });\n            } else {\n                if (schema !== this.props.schema\n                    || schemaRefs !== this.props.schemaRefs\n                ) {\n                    this.jsonEditor.setSchema(schema, schemaRefs);\n                }\n\n                if (name !== this.jsonEditor.getName()) {\n                    this.jsonEditor.setName(name);\n                }\n            }\n        }\n    }\n\n    shouldComponentUpdate({ htmlElementProps }) {\n        return htmlElementProps !== this.props.htmlElementProps;\n    }\n\n    componentWillUnmount() {\n        if (this.jsonEditor) {\n            this.jsonEditor.destroy();\n            this.jsonEditor = null;\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (this.props.value !== newProps.value) {\n            this.jsonEditor.set(newProps.value);\n        }\n    }\n\n    setRef(element) {\n        this.htmlElementRef = element;\n        if (this.props.innerRef) {\n            this.props.innerRef(element);\n        }\n    }\n\n    createEditor({ value, ...rest }) {\n        if (this.jsonEditor) {\n            this.jsonEditor.destroy();\n        }\n\n        this.jsonEditor = new JSONEditor(this.htmlElementRef, {\n            onChange: this.handleChange,\n            ...rest\n        });\n\n        this.jsonEditor.set(value);\n    }\n\n    handleChange() {\n        if (this.props.onChange) {\n            try {\n                const text = this.jsonEditor.getText();\n                if (text === '') {\n                    this.props.onChange(null);\n                }\n\n                const currentJson = this.jsonEditor.get();\n                if (this.props.value !== currentJson) {\n                    this.props.onChange(currentJson);\n                }\n            } catch (err) {\n                this.err = err;\n            }\n        }\n    }\n\n    collapseAll() {\n        if (this.jsonEditor) {\n            this.jsonEditor.collapseAll();\n        }\n    }\n\n    expandAll() {\n        if (this.jsonEditor) {\n            this.jsonEditor.expandAll();\n        }\n    }\n\n    focus() {\n        if (this.jsonEditor) {\n            this.jsonEditor.focus();\n        }\n    }\n\n    render() {\n        const {\n            htmlElementProps,\n            tag\n        } = this.props;\n\n        return React.createElement(\n            tag,\n            {\n                ...htmlElementProps,\n                ref: this.setRef\n            }\n        );\n    }\n}\n\nEditor.propTypes = {\n    //  jsoneditor props\n    value: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    mode: PropTypes.oneOf(values),\n    name: PropTypes.string,\n    schema: PropTypes.object,\n    schemaRefs: PropTypes.object,\n\n    onChange: PropTypes.func,\n    onError: PropTypes.func,\n    onModeChange: PropTypes.func,\n\n    ace: PropTypes.object,\n    ajv: PropTypes.object,\n    theme: PropTypes.string,\n    history: PropTypes.bool,\n    navigationBar: PropTypes.bool,\n    statusBar: PropTypes.bool,\n    search: PropTypes.bool,\n    allowedModes: PropTypes.arrayOf(PropTypes.oneOf(values)),\n\n    //  custom props\n    tag: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n    htmlElementProps: PropTypes.object,\n    innerRef: PropTypes.func,\n};\n\nEditor.defaultProps = {\n    tag: 'div',\n    mode: modes.tree,\n    history: false,\n    search: true,\n    navigationBar: true,\n    statusBar: true,\n};\n\n/**\n * @type TJsonEditorModes\n */\nEditor.modes = modes;\n","import JSONView from './JSONView';\n\nexport default JSONView;\n","import React from 'react';\nimport JsonEditor from './Editor';\n\nimport ace from 'brace';\nimport 'brace/mode/json';\nimport 'brace/theme/github';\n\nimport './style.css';\n\nconst JSONView = ({value, onChange}) => (\n  <JsonEditor\n    value={value}\n    onChange={onChange}\n    allowedModes={[\"tree\", \"code\"]}\n    ace={ace}\n    theme=\"ace/theme/github\"\n  />\n)\n\nexport default JSONView;","import React from \"react\";\nimport { Layout } from \"antd\";\nimport VERSION from \"../../VERSION\";\n\nconst { Footer } = Layout;\nconst TSFooter = () => (\n  <Footer style={{ textAlign: \"center\", marginTop: \"30px\" }}>\n    ENACT ©{new Date().getFullYear()} Created by{\" \"}\n    <a href=\"https://www.montimage.com\">Montimage</a>. Version {VERSION}\n  </Footer>\n);\n\nexport default TSFooter;\n","import TSFooter from './TSFooter';\n\nexport default TSFooter;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { notification, Spin, Layout, Typography } from \"antd\";\nimport { resetNotification } from \"../actions\";\nimport TSFooter from \"../components/TSFooter\";\nimport \"./styles.css\";\nconst { Title, Text } = Typography;\n\nconst { Content } = Layout;\n\nclass LayoutPage extends Component {\n\n  render() {\n    const {\n      requesting,\n      notify,\n      resetNotification,\n      pageTitle,\n      pageSubTitle,\n    } = this.props;\n    return (\n      <Layout style={{backgroundColor: 'white'}}>\n        {notify &&\n          notification[notify.type]({\n            message: notify.type.toUpperCase(),\n            description:\n              typeof notify.message === \"object\"\n                ? JSON.stringify(notify.message)\n                : notify.message,\n            onClose: () => resetNotification(),\n          })}\n        <Layout style={{ padding: \"0px 48px 48px\", margin: \"30px 50px 50px\" }}>\n          <Content>\n            {pageTitle && <Title level={2}>{pageTitle}</Title>}\n            {pageSubTitle && <Text type=\"secondary\">{pageSubTitle}</Text>}\n            <div style={{ paddingTop: \"30px\" }} className=\"site-layout-content\">\n              {requesting ? <Spin tip=\"Loading...\" /> : this.props.children}\n              <TSFooter />\n            </div>\n          </Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ requesting, notify }) => ({\n  notify,\n  requesting,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetNotification: () => dispatch(resetNotification()),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(LayoutPage);\n","import React from \"react\";\n\nimport { FormEditableTextItem } from \"../FormItems\";\nconst MongoDBOptions = ({ defaultValue, dataPath, onDataChange }) => (\n  <React.Fragment>\n    <FormEditableTextItem\n      label=\"User\"\n      defaultValue={defaultValue.user}\n      onChange={(v) => onDataChange(`${dataPath ? `${dataPath}.` : \"\"}user`, v)}\n      placeholder=\"Username\"\n      helpText=\"Username to connect to database\"\n    />\n    <FormEditableTextItem\n      label=\"Password\"\n      defaultValue={defaultValue.password}\n      onChange={(v) =>\n        onDataChange(`${dataPath ? `${dataPath}.` : \"\"}password`, v)\n      }\n      placeholder=\"Password\"\n      helpText=\"Password to connect to database\"\n    />\n    <FormEditableTextItem\n      label=\"Database\"\n      defaultValue={defaultValue.dbname}\n      onChange={(v) =>\n        onDataChange(`${dataPath ? `${dataPath}.` : \"\"}dbname`, v)\n      }\n      placeholder=\"Database name\"\n      helpText=\"The database's name to working with\"\n      rules={[\n        {\n          required: true,\n          message: \"Database's name is required!\",\n        },\n      ]}\n    />\n  </React.Fragment>\n);\n\nexport default MongoDBOptions;\n","import ConnectionConfig from './ConnectionConfig';\nexport default ConnectionConfig;","import React from \"react\";\n\nimport MongoDBOptions from \"./MongoDBOptions\";\nimport CollapseForm from \"../CollapseForm\";\nimport { FormNumberItem, FormEditableTextItem } from \"../FormItems\";\n\nconst ConnectionConfig = ({ defaultValue, dataPath, onDataChange, type }) => (\n  <CollapseForm title=\"Connection Configuration\" bordered={false} active={true}>\n    <FormEditableTextItem\n      label=\"Host\"\n      defaultValue={defaultValue.host}\n      onChange={(v) => onDataChange(`${dataPath ? `${dataPath}.` : \"\"}host`, v)}\n      helpText=\"Host name\"\n      rules = {[\n              {\n                required: true,\n                message: \"Host name is required!\"\n              }\n            ]}\n    />\n    <FormNumberItem\n      label=\"Port\"\n      min={1023}\n      max={65535}\n      defaultValue={defaultValue.port}\n      onChange={(v) => onDataChange(`${dataPath ? `${dataPath}.` : \"\"}port`, v)}\n      helpText=\"Port number\"\n      rules = {[\n              {\n                required: true,\n                message: \"Port number is required!\"\n              }\n            ]}\n    />\n    {type === \"MONGODB\" && (\n      <React.Fragment>\n        <MongoDBOptions\n          defaultValue={defaultValue}\n          dataPath={dataPath}\n          onDataChange={onDataChange}\n        />\n      </React.Fragment>\n    )}\n    <FormEditableTextItem\n      label=\"Options\"\n      defaultValue={JSON.stringify(defaultValue.options)}\n      onChange={(v) =>\n        onDataChange(`${dataPath ? `${dataPath}.` : \"\"}options`, v)\n      }\n      placeholder=\"{}\"\n      helpText=\"Connection options. Depends on the protocol. It must be in JSON format!\"\n    />\n  </CollapseForm>\n);\n\nexport default ConnectionConfig;\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Switch, Form, List, Typography, Divider } from \"antd\";\n// all the edit forms\nimport SensorModal from \"../components/SensorModal\";\nimport ActuatorModal from \"../components/ActuatorModal\";\n\nimport {\n  requestModel,\n  requestAddNewModel,\n  requestUpdateModel,\n  showModal,\n  selectDevice,\n  changeModelName,\n  deleteThing,\n  changeStatusThing,\n  selectSensor,\n  deleteSimulationSensor,\n  changeStatusSensor,\n  selectActuator,\n  deleteSimulationActuator,\n  changeStatusActuator,\n  requestDataStorage,\n} from \"../actions\";\nimport JSONView from \"../components/JSONView\";\nimport LayoutPage from \"./LayoutPage\";\n\nimport {\n  SwitcherOutlined,\n  ExportOutlined,\n  CaretRightOutlined,\n} from \"@ant-design/icons\";\nimport {\n  FormEditableTextItem,\n  FormSelectItem,\n  FormTextAreaItem,\n} from \"../components/FormItems\";\nimport ConnectionConfig from \"../components/ConnectionConfig\";\nimport CollapseForm from \"../components/CollapseForm\";\nimport {\n  getQuery,\n  getLastPath,\n  updateObjectByPath,\n  deepCloneObject,\n} from \"../utils\";\n\nconst { Text } = Typography;\n\nconst ModelDeviceItem = ({\n  data,\n  onChange,\n  onDelete,\n  onDuplicate,\n  changeModalId,\n  selectedModalId,\n  onEnable,\n}) => (\n  <CollapseForm\n    title={`${data.name}`}\n    extra={\n      <Fragment>\n        <Switch\n          defaultChecked={data.enable ? true : false}\n          checkedChildren=\"Enable\"\n          unCheckedChildren=\"Disable\"\n          onClick={(value, event) => {\n            event.stopPropagation();\n            onEnable();\n          }}\n          style={{ marginRight: 10 }}\n        />\n        <Button\n          onClick={(event) => {\n            event.stopPropagation();\n            onDuplicate();\n          }}\n          size=\"small\"\n          style={{ marginRight: 10 }}\n        >\n          Duplicate\n        </Button>\n        <Button\n          onClick={(event) => {\n            event.stopPropagation();\n            onDelete();\n          }}\n          size=\"small\"\n          danger\n        >\n          Delete\n        </Button>\n      </Fragment>\n    }\n  >\n    <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n      <FormEditableTextItem\n        label=\"Name\"\n        defaultValue={data.name}\n        onChange={(newName) => onChange(\"name\", newName)}\n      />\n      <FormEditableTextItem\n        label=\"Id\"\n        defaultValue={data.id}\n        onChange={(newId) => onChange(\"id\", newId)}\n      />\n      <Divider orientation=\"left\">Test Broker </Divider>\n      <FormSelectItem\n        label=\"Protocol\"\n        defaultValue={data.testBroker.protocol}\n        onChange={(v) => onChange(\"testBroker.protocol\", v)}\n        options={[\"MQTT\", \"MONGODB\"]}\n      />\n      <ConnectionConfig\n        defaultValue={data.testBroker.connConfig}\n        dataPath={\"testBroker.connConfig\"}\n        onDataChange={onChange}\n        type={data.testBroker.protocol}\n      />\n      <Divider orientation=\"left\">Production Broker </Divider>\n      {data.productionBroker ? (\n        <Fragment>\n          <FormSelectItem\n            label=\"Protocol\"\n            defaultValue={data.productionBroker.protocol}\n            onChange={(v) => onChange(\"productionBroker.protocol\", v)}\n            options={[\"MQTT\", \"MONGODB\"]}\n          />\n          <ConnectionConfig\n            defaultValue={data.productionBroker.connConfig}\n            dataPath={\"productionBroker.connConfig\"}\n            onDataChange={onChange}\n            type={data.productionBroker.protocol}\n          />\n          <Button danger onClick={() => onChange(\"productionBroker\", null)}>\n            Remove Production Broker\n          </Button>\n        </Fragment>\n      ) : (\n        <Button\n          onClick={() =>\n            onChange(\"productionBroker\", {\n              protocol: \"MQTT\",\n              connConfig: {\n                host: \"localhost\",\n                port: 1883,\n                options: null,\n              },\n            })\n          }\n        >\n          Add Production Broker\n        </Button>\n      )}\n      <Divider orientation=\"left\">Sensors</Divider>\n      <List\n        header={<strong>Sensors ({data.sensors.length})</strong>}\n        footer={\n          <Button onClick={() => showModal(\"SENSOR-FORM\")}>\n            Add New Sensor\n          </Button>\n        }\n        size=\"small\"\n        bordered\n        dataSource={data.sensors}\n        renderItem={(item, index) => (\n          <List.Item\n            actions={[\n              <Switch\n                checkedChildren=\"Enable\"\n                unCheckedChildren=\"Disable\"\n                defaultChecked={item.enable ? true : false}\n                onChange={() =>\n                  onChange(`sensors[${index}].enable`, !item.enable)\n                }\n              />,\n              <Button\n                size=\"small\"\n                key=\"edit\"\n                onClick={() => changeModalId(item.id)}\n              >\n                Edit\n              </Button>,\n              <Button\n                size=\"small\"\n                key=\"duplicate\"\n                onClick={() => {\n                  const newSensor = {\n                    ...item,\n                    id: `${item.id}-duplicated`,\n                    name: `${item.name} [duplicaed]`,\n                  };\n                  let newSensors = [...data.sensors, newSensor];\n                  onChange(\"sensors\", newSensors);\n                }}\n              >\n                Duplicate\n              </Button>,\n              <Button\n                size=\"small\"\n                danger\n                key=\"delete\"\n                onClick={() => {\n                  if (data.sensors.length === 1) {\n                    onChange(\"sensors\", []);\n                  } else {\n                    let newSensors = [...data.sensors];\n                    newSensors.splice(index, 1);\n                    onChange(\"sensors\", newSensors);\n                  }\n                }}\n              >\n                Delete\n              </Button>,\n            ]}\n          >\n            <Text>{item.name}</Text>\n            <SensorModal\n              enable={selectedModalId === item.id}\n              sensorData={item}\n              deviceId={data.id}\n              onOK={(dataPath, value) =>\n                onChange(`sensors[${index}].${dataPath}`, value)\n              }\n              onClose={() => {\n                changeModalId(null);\n              }}\n            />\n          </List.Item>\n        )}\n      />\n      <p></p>\n      <Divider orientation=\"left\">Actuator </Divider>\n      <List\n        header={<strong>Actuators ({data.actuators.length})</strong>}\n        footer={\n          <Button onClick={() => showModal(\"ACTUATOR-FORM\")}>\n            Add New Actuator\n          </Button>\n        }\n        size=\"small\"\n        bordered\n        dataSource={data.actuators}\n        renderItem={(item, index) => (\n          <List.Item\n            actions={[\n              <Switch\n                checkedChildren=\"Enable\"\n                unCheckedChildren=\"Disable\"\n                defaultChecked={item.enable ? true : false}\n                onChange={() =>\n                  onChange(`actuators[${index}].enable`, !item.enable)\n                }\n              />,\n              <Button\n                size=\"small\"\n                key=\"edit\"\n                onClick={() => changeModalId(item.id)}\n              >\n                Edit\n              </Button>,\n              <Button\n                size=\"small\"\n                key=\"duplicate\"\n                onClick={() => {\n                  const newActuator = {\n                    ...item,\n                    id: `${item.id}-duplicated`,\n                    name: `${item.name} [duplicaed]`,\n                  };\n                  let newActuators = [...data.actuators, newActuator];\n                  onChange(\"actuators\", newActuators);\n                }}\n              >\n                Duplicate\n              </Button>,\n              <Button\n                size=\"small\"\n                danger\n                key=\"delete\"\n                onClick={() => {\n                  if (data.actuators.length === 1) {\n                    onChange(\"actuators\", []);\n                  } else {\n                    let newActuators = [...data.actuators];\n                    newActuators.splice(index, 1);\n                    onChange(\"actuators\", newActuators);\n                  }\n                }}\n              >\n                Delete\n              </Button>,\n            ]}\n          >\n            <Text>{item.name}</Text>\n            <ActuatorModal\n              enable={selectedModalId === item.id}\n              actuatorData={item}\n              deviceId={data.id}\n              onOK={(dataPath, value) =>\n                onChange(`actuators[${index}].${dataPath}`, value)\n              }\n              onClose={() => {\n                changeModalId(null);\n              }}\n            />\n          </List.Item>\n        )}\n      />\n    </Form>\n  </CollapseForm>\n);\n\nconst newDevice = () => {\n  const currentTime = Date.now();\n  return {\n    id: `id-new-device-${currentTime}`,\n    name: `name-new-device-${currentTime}`,\n    enable: false,\n    scale: 1,\n    behaviours: [],\n    timeToDown: 0,\n    testBroker: {\n      protocol: \"MQTT\",\n      connConfig: {\n        host: \"192.168.1.21\",\n        port: 1883,\n        options: null,\n      },\n    },\n    productionBroker: null,\n    sensors: [],\n    actuators: [],\n  };\n};\n\nclass ModelPage extends Component {\n  constructor(props) {\n    super(props);\n    let modelFileName = getLastPath();\n    let isNewModel = modelFileName.indexOf(\".json\") === -1;\n    this.state = {\n      modelFileName: isNewModel ? `${modelFileName}.json` : modelFileName,\n      tempModel: isNewModel\n        ? {\n            name: modelFileName,\n          }\n        : {},\n      isNewModel,\n      selectedModalId: null,\n      isChanged: false,\n    };\n\n    this.onModelChange = this.onModelChange.bind(this);\n  }\n\n  componentDidMount() {\n    let modelFileName = getLastPath();\n    if (modelFileName.indexOf(\".json\") === -1) {\n      // This is a new model page\n      this.setState({\n        modelFileName: `${modelFileName}.json`,\n        tempModel: {\n          name: modelFileName,\n        },\n        isNewModel: true,\n      });\n    } else {\n      this.props.requestModel(modelFileName);\n      this.setState({ modelFileName, isNewModel: false });\n    }\n    this.props.fetchDataStorage();\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.setState({\n      tempModel: deepCloneObject(newProps.model),\n    });\n  }\n\n  onModelChange(newModel) {\n    this.setState({\n      tempModel: newModel,\n      isChanged: true,\n    });\n  }\n\n  onDataChange(dataPath, value) {\n    this.setState((prevState) => {\n      const newData = { ...prevState.tempModel };\n      updateObjectByPath(newData, dataPath, value);\n      return { tempModel: newData, error: null, isChanged: true };\n    });\n  }\n\n  exportModel(model) {\n    if (model) {\n      const fileData = JSON.stringify(model);\n      const blob = new Blob([fileData], { type: \"text/json\" });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.download = `${model.name.replace(/ /g, \"\")}.json`;\n      link.href = url;\n      link.click();\n    }\n  }\n\n  addNewDevice() {\n    this.setState((prevState) => ({\n      tempModel: {\n        ...prevState.tempModel,\n        devices: [...prevState.tempModel.devices, newDevice()],\n      },\n      isChanged: true,\n    }));\n  }\n\n  changeModalId(newId) {\n    this.setState({ selectedModalId: newId });\n  }\n\n  addCustomDataStorage() {\n    const { dataStorage } = this.props;\n    if (dataStorage) {\n      this.onDataChange(\"dataStorage\", dataStorage);\n    } else {\n      this.onDataChange(\"dataStorage\", {\n        protocol: \"MONGODB\",\n        connConfig: {\n          host: \"localhost\",\n          port: 27017,\n          username: null,\n          password: null,\n          dbname: \"my_db_name\",\n          options: null,\n        },\n      });\n    }\n  }\n\n  render() {\n    const {\n      modelFileName,\n      tempModel,\n      isNewModel,\n      selectedModalId,\n      isChanged,\n    } = this.state;\n    const { addNewModel, updateModel, showModal } = this.props;\n\n    let viewType = getQuery(\"view\");\n    if (!viewType) viewType = \"form\";\n    let view = null;\n    if (viewType === \"json\") {\n      view = <JSONView value={tempModel} onChange={this.onModelChange} />;\n    } else {\n      view = (\n        <Fragment>\n          <p></p>\n          <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n            <FormEditableTextItem\n              label=\"Name\"\n              defaultValue={tempModel.name}\n              onChange={(newName) => this.onDataChange(\"name\", newName)}\n            />\n            <Divider orientation=\"left\">Dataset </Divider>\n            <p>The Id of data source</p>\n            <FormEditableTextItem\n              label=\"Dataset Id\"\n              defaultValue={tempModel.datasetId ? tempModel.datasetId : null}\n              onChange={(newDatasetId) =>\n                this.onDataChange(\"datasetId\", newDatasetId)\n              }\n            />\n            {tempModel.newDataset ? (\n              <Fragment>\n                <p>New Dataset to save the simulated data</p>\n                <FormEditableTextItem\n                  label=\"Id\"\n                  placeholder=\"Dataset Id\"\n                  helpText=\"The Id of the dataset to be used in the simulation\"\n                  defaultValue={tempModel.newDataset.id}\n                  onChange={(value) =>\n                    this.onDataChange(\"newDataset.id\", value)\n                  }\n                />\n                <FormEditableTextItem\n                  label=\"Name\"\n                  placeholder=\"Name\"\n                  defaultValue={tempModel.newDataset.name}\n                  onChange={(value) =>\n                    this.onDataChange(\"newDataset.name\", value)\n                  }\n                />\n                <FormTextAreaItem\n                  label=\"Description\"\n                  defaultValue={tempModel.newDataset.description}\n                  onChange={(value) =>\n                    this.onDataChange(\"newDataset.description\", value)\n                  }\n                />\n                <FormEditableTextItem\n                  label=\"Tags\"\n                  placeholder=\"Tags\"\n                  defaultValue={JSON.stringify(tempModel.newDataset.tags)}\n                  onChange={(value) =>\n                    this.onDataChange(\"newDataset.tags\", JSON.parse(value))\n                  }\n                />\n                <Button\n                  danger\n                  onClick={() => this.onDataChange(\"newDataset\", null)}\n                >\n                  Remove New Dataset\n                </Button>\n              </Fragment>\n            ) : (\n              <Button\n                onClick={() =>\n                  this.onDataChange(\"newDataset\", {\n                    id: `new-data-set-${Date.now()}`,\n                    name: `New Data Set ${Date.now()}`,\n                    description: \"Dataset descriptions\",\n                    tags: [\"recorded\", \"random\", \"test\"],\n                  })\n                }\n              >\n                Add New Dataset\n              </Button>\n            )}\n            <Divider orientation=\"left\">Data Storage </Divider>\n            {tempModel.dataStorage ? (\n              <Fragment>\n                <ConnectionConfig\n                  defaultValue={tempModel.dataStorage.connConfig}\n                  dataPath={\"dataStorage.connConfig\"}\n                  onDataChange={(dataPath, value) =>\n                    this.onDataChange(dataPath, value)\n                  }\n                  type={tempModel.dataStorage.protocol}\n                />\n                <Button\n                  danger\n                  onClick={() => this.onDataChange(\"dataStorage\", null)}\n                >\n                  Remove Custom Data Storage\n                </Button>\n              </Fragment>\n            ) : (\n              <Fragment>\n              <p>Use <a href=\"/data-storage\" target=\"_blank\">Default Data Storage</a></p>\n                <Button onClick={() => this.addCustomDataStorage()}>\n                  Add Custom Data Storage\n                </Button>\n              </Fragment>\n            )}\n          </Form>\n          <Divider orientation=\"left\">Devices </Divider>\n          {tempModel.devices ? (\n            <Fragment>\n              <p>Number of devices: {tempModel.devices.length}</p>\n              <Button onClick={() => showModal(\"THING-FORM\")}>\n                Add New Device\n              </Button>\n              {tempModel.devices.map((device, index) => (\n                <ModelDeviceItem\n                  key={index}\n                  data={device}\n                  selectedModalId={selectedModalId}\n                  changeModalId={(newId) => this.changeModalId(newId)}\n                  onEnable={() => {\n                    this.onDataChange(\n                      `devices[${index}].enable`,\n                      !device.enable\n                    );\n                  }}\n                  onChange={(dataPath, value) =>\n                    this.onDataChange(`devices[${index}].${dataPath}`, value)\n                  }\n                  onDelete={() => {\n                    let newDevices = [...tempModel.devices];\n                    newDevices.splice(index, 1);\n                    this.onDataChange(\"devices\", newDevices);\n                  }}\n                  onDuplicate={() => {\n                    let newDevice = {\n                      ...device,\n                      id: `${device.id}-duplicated`,\n                      name: `${device.name} [duplicated]`,\n                    };\n                    let newDevices = [...tempModel.devices, newDevice];\n                    this.onDataChange(\"devices\", newDevices);\n                  }}\n                />\n              ))}\n            </Fragment>\n          ) : (\n            <Button onClick={() => showModal(\"THING-FORM\")}>\n              Add New Device\n            </Button>\n          )}\n          <p></p>\n          <ActuatorModal />\n        </Fragment>\n      );\n    }\n\n    return (\n      <Fragment>\n        <LayoutPage>\n          <a\n            href={`${window.location.pathname}?view=${\n              viewType === \"json\" ? \"form\" : \"json\"\n            }`}\n            style={{ marginRight: 10 }}\n          >\n            {\" \"}\n            <SwitcherOutlined /> Switch View\n          </a>\n          <Button\n            onClick={() => this.exportModel(tempModel)}\n            style={{ marginRight: 10 }}\n          >\n            <ExportOutlined />\n            Export Model\n          </Button>\n          <a type=\"button\" href={`/simulation?model=${modelFileName}`}>\n            <Button type=\"primary\">\n              <CaretRightOutlined /> Simulate\n            </Button>\n          </a>\n          <p></p>\n          {view}\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              if (isNewModel) {\n                addNewModel(tempModel);\n              } else {\n                updateModel(modelFileName, tempModel);\n              }\n            }}\n            style={{ marginTop: \"10px\" }}\n            disabled={isChanged ? false : true}\n          >\n            Save\n          </Button>\n        </LayoutPage>\n      </Fragment>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ model, dataStorage }) => ({\n  model,\n  dataStorage: dataStorage.connConfig,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchDataStorage: () => dispatch(requestDataStorage()),\n  requestModel: (modelFileName) => dispatch(requestModel(modelFileName)),\n  addNewModel: (newModel) => dispatch(requestAddNewModel(newModel)),\n  updateModel: (modelFileName, model) =>\n    dispatch(requestUpdateModel({ modelFileName, model })),\n  showModal: (formID) => dispatch(showModal(formID)),\n  changeModelName: (newName) => dispatch(changeModelName(newName)),\n  selectDevice: (device) => dispatch(selectDevice(device)),\n  deleteThing: (thingID) => dispatch(deleteThing(thingID)),\n  changeStatusThing: (thingID) => dispatch(changeStatusThing(thingID)),\n  selectSensor: (sensor) => dispatch(selectSensor(sensor)),\n  deleteSensor: (sensorID, thingID) =>\n    dispatch(deleteSimulationSensor({ sensorID, thingID })),\n  changeStatusSensor: (sensorID, thingID) =>\n    dispatch(changeStatusSensor({ sensorID, thingID })),\n  selectActuator: (actuator) => dispatch(selectActuator(actuator)),\n  deleteActuator: (actuatorID, thingID) =>\n    dispatch(deleteSimulationActuator({ actuatorID, thingID })),\n  changeStatusActuator: (actuatorID, thingID) =>\n    dispatch(changeStatusActuator({ actuatorID, thingID })),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(ModelPage);\n","import React, { Component } from 'react';\nimport LayoutPage from './LayoutPage';\nimport { getLastPath, getQuery } from \"../utils\";\nclass DummyPage extends Component {\n  componentDidMount() {\n    const tool = getLastPath();\n    const logFile = getQuery('logFile');\n    console.log(tool, logFile);\n  }\n\n  render() {\n    const {message} = this.props;\n    return (\n      <LayoutPage pageTitle=\"Dummy Page\" pageSubTitle=\"This is a dummy page\">\n        <div> Hello from Dummy Page: {message}</div>\n      </LayoutPage>\n    );\n  }\n}\n\nexport default DummyPage;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Form } from \"antd\";\n\nimport {\n  requestDataStorage,\n  requestUpdateDataStorage,\n  requestTestDataStorageConnection,\n} from \"../actions\";\nimport JSONView from \"../components/JSONView\";\nimport LayoutPage from \"./LayoutPage\";\nimport { getQuery, updateObjectByPath, deepCloneObject } from \"../utils\";\nimport ConnectionConfig from \"../components/ConnectionConfig\";\n\nclass DataStoragePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tempDataStorage: { connConfig: {} },\n      connectionStatus: false,\n      isDSChanged: false,\n    };\n\n    this.onDataStorageChange = this.onDataStorageChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.requestDataStorage();\n    this.props.testConnection();\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.setState({\n      tempDataStorage: deepCloneObject(newProps.dataStorage),\n      connectionStatus: newProps.connectionStatus,\n    });\n  }\n\n  onDataStorageChange(newDataStorage) {\n    this.setState({\n      tempDataStorage: newDataStorage,\n      isDSChanged: true,\n    });\n  }\n\n  onDataChange(dataPath, value) {\n    this.setState((prevState) => {\n      const newData = { ...prevState.tempDataStorage };\n      // console.log(dataPath, value);\n      updateObjectByPath(newData, dataPath, value);\n      return { tempDataStorage: newData, isDSChanged: true };\n    });\n  }\n\n  render() {\n    const { tempDataStorage, connectionStatus, isDSChanged } = this.state;\n    const { updateDataStorage, testConnection } = this.props;\n\n    let viewType = getQuery(\"view\");\n    if (!viewType) viewType = \"form\";\n    let view = null;\n    if (viewType === \"json\") {\n      view = (\n        <JSONView value={tempDataStorage} onChange={this.onDataStorageChange} />\n      );\n    } else {\n      view = (\n        <Form\n          labelCol={{\n            span: 4,\n          }}\n          wrapperCol={{\n            span: 14,\n          }}\n        >\n          <ConnectionConfig\n            defaultValue={tempDataStorage.connConfig}\n            dataPath={\"connConfig\"}\n            onDataChange={(dataPath, value) =>\n              this.onDataChange(dataPath, value)\n            }\n            type=\"MONGODB\"\n          />\n        </Form>\n      );\n    }\n    return (\n      <LayoutPage>\n        Connection Status:{\" \"}\n        <strong>\n          {\" \"}\n          {connectionStatus ? (\n            <span style={{ color: \"green\" }}>Connected</span>\n          ) : (\n            <span style={{ color: \"red\" }}>Not Connected</span>\n          )}{\" \"}\n        </strong>\n        {view}\n        <Button\n          style={{ marginTop: \"10px\", marginRight: \"10px\" }}\n          onClick={() => {\n            if (isDSChanged) {\n              updateDataStorage(tempDataStorage);\n              this.setState({ isDSChanged: false });\n              setTimeout(testConnection, 3000);\n            } else {\n              testConnection();\n            }\n          }}\n        >\n          Test Connection\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            updateDataStorage(tempDataStorage);\n            this.setState({ isDSChanged: false });\n            setTimeout(testConnection, 3000);\n          }}\n          style={{ marginTop: \"10px\" }}\n          disabled={this.state.isDSChanged ? false : true}\n        >\n          Save\n        </Button>\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ dataStorage }) => ({\n  dataStorage: dataStorage.connConfig,\n  connectionStatus: dataStorage.connectionStatus,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestDataStorage: () => dispatch(requestDataStorage()),\n  updateDataStorage: (newDataStorage) =>\n    dispatch(requestUpdateDataStorage(newDataStorage)),\n  testConnection: () => dispatch(requestTestDataStorageConnection()),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(DataStoragePage);\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Table, Button, Form } from \"antd\";\nimport { BuildOutlined, CopyOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestAllTestCampaigns,\n  requestAddNewTestCampaign,\n  requestDeleteTestCampaign,\n  requestDevopts,\n  requestUpdateDevopts,\n  requestLaunchTestCampaign,\n  requestStopTestCampaign,\n  requestTestCampaignStatus,\n} from \"../actions\";\nimport {\n  FormEditableTextItem,\n  FormTextNotEditableItem,\n} from \"../components/FormItems\";\nimport CollapseForm from \"../components/CollapseForm\";\n\nclass TestCampaignListPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      webhookURL: undefined,\n      testCampaignId: \"Select the test Campaign for next build\",\n      isChanged: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchTestCampaigns();\n    this.props.fetchDevopts();\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (newProps.devopts) {\n      this.setState(newProps.devopts);\n    }\n  }\n\n  duplicateTestCampaign(tc) {\n    const newTc = {\n      id: `${tc.id}-[duplicated]`,\n      name: `${tc.name}-[duplicated]`,\n      description: tc.description,\n      testCaseIds: tc.testCaseIds,\n    };\n    this.props.addNewTestCampaign(newTc);\n  }\n\n  updateWebhookURL(wb) {\n    this.setState({\n      webhookURL: wb,\n      isChanged: true,\n    });\n  }\n\n  updateTestCampaignId(tcId) {\n    this.setState({\n      testCampaignId: tcId,\n      isChanged: true,\n    });\n  }\n\n  render() {\n    const {\n      testCampaigns,\n      deleteTestCampaign,\n      updateDevopts,\n      launchTestCampaign,\n      stopTestCampaign,\n      runningStatus,\n    } = this.props;\n    const { webhookURL, testCampaignId, isChanged } = this.state;\n    const dataSource = testCampaigns.map((tc) => ({ ...tc, key: tc.id }));\n    const columns = [\n      {\n        title: \"Id\",\n        key: \"data\",\n        render: (tc) => (\n          <a href={`/test-campaigns/${tc.id}`}>\n            {tc.id === testCampaignId ? (\n              <strong>\n                {tc.id} <span style={{ color: \"green\" }}>**Next Build**</span>\n              </strong>\n            ) : (\n              tc.id\n            )}\n          </a>\n        ),\n      },\n      {\n        title: \"Action\",\n        key: \"data\",\n        width: 500,\n        render: (tc) => (\n          <Fragment>\n            <Button\n              size=\"small\"\n              onClick={() => this.updateTestCampaignId(tc.id)}\n              style={{ marginRight: 10 }}\n            >\n              <BuildOutlined /> Select for next Build\n            </Button>\n            <Button\n              size=\"small\"\n              style={{ marginRight: 10 }}\n              onClick={() => this.duplicateTestCampaign(tc)}\n            >\n              {\" \"}\n              <CopyOutlined /> Duplicate\n            </Button>\n            {tc.reportFileName && (\n              <Button\n                size=\"small\"\n                style={{ marginRight: 10 }}\n                onClick={() =>\n                  console.log(\n                    \"[TestCampaignList] View report of test campaign: \",\n                    tc\n                  )\n                }\n              >\n                <a href={`/reports/test-campaigns/${tc.reportFileName}`}>\n                  View Report\n                </a>\n              </Button>\n            )}\n            <Button\n              size=\"small\"\n              danger\n              onClick={() => deleteTestCampaign(tc.id)}\n            >\n              <DeleteOutlined /> Delete\n            </Button>\n          </Fragment>\n        ),\n      },\n    ];\n    return (\n      <LayoutPage\n        pageTitle=\"Test Campaign\"\n        pageSubTitle=\"All the test campaigns\"\n      >\n        <CollapseForm title=\"Configuration for next build\" active={true}>\n          <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n            <FormEditableTextItem\n              label=\"WebhookURL\"\n              defaultValue={webhookURL}\n              onChange={(wb) => this.updateWebhookURL(wb)}\n            />\n            <FormTextNotEditableItem\n              label=\"Next build\"\n              value={\n                <a href={`/test-campaigns/${testCampaignId}`}>\n                  <strong>{testCampaignId}</strong>\n                </a>\n              }\n            />\n            <Form.Item\n              wrapperCol={{\n                xs: {\n                  span: 24,\n                  offset: 0,\n                },\n                sm: {\n                  span: 16,\n                  offset: 4,\n                },\n              }}\n            >\n              <Button\n                onClick={() => {\n                  updateDevopts({\n                    webhookURL,\n                    testCampaignId,\n                  });\n                  this.setState({ isChanged: false });\n                }}\n                disabled={isChanged ? false : true}\n                type=\"primary\"\n                style={{ marginRight: 10 }}\n              >\n                Save\n              </Button>\n              {runningStatus ? (\n                <Fragment>\n                  {runningStatus.isRunning ? (\n                    <Button\n                      type=\"primary\"\n                      danger\n                      onClick={() => stopTestCampaign()}\n                    >\n                      Stop\n                    </Button>\n                  ) : (\n                    <Button\n                      type=\"primary\"\n                      onClick={() => launchTestCampaign()}\n                      disabled={isChanged ? true : false}\n                    >\n                      Launch\n                    </Button>\n                  )}\n                  <a\n                    href={`/logs/test-campaigns?logFile=${runningStatus.logFile}`}\n                  >\n                    <Button type=\"link\">View Log</Button>\n                  </a>\n                </Fragment>\n              ) : (\n                <Button\n                  type=\"primary\"\n                  onClick={() => launchTestCampaign()}\n                  disabled={isChanged ? true : false}\n                >\n                  Launch\n                </Button>\n              )}\n            </Form.Item>\n          </Form>\n        </CollapseForm>\n        <a href={`/test-campaigns/new-campaign-${Date.now()}`}>\n          <Button style={{ marginBottom: \"10px\" }}>Add New Campaign</Button>\n        </a>\n        <Table columns={columns} dataSource={dataSource} />\n        <p></p>\n        <a href={`/logs/test-campaigns`}>View All Campaign Logs</a>\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ testCampaigns, devopts }) => ({\n  testCampaigns: testCampaigns.allTestCampaigns,\n  runningStatus: testCampaigns.runningStatus,\n  devopts,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchTestCampaigns: () => dispatch(requestAllTestCampaigns()),\n  fetchDevopts: () => dispatch(requestDevopts()),\n  fetchTestCampaignStatus: () => dispatch(requestTestCampaignStatus()),\n  updateDevopts: (newDevopts) => dispatch(requestUpdateDevopts(newDevopts)),\n  deleteTestCampaign: (testCampaignId) =>\n    dispatch(requestDeleteTestCampaign(testCampaignId)),\n  addNewTestCampaign: (testCampaign) =>\n    dispatch(requestAddNewTestCampaign(testCampaign)),\n  launchTestCampaign: () => dispatch(requestLaunchTestCampaign()),\n  stopTestCampaign: () => dispatch(requestStopTestCampaign()),\n});\n\nexport default connect(\n  mapPropsToStates,\n  mapDispatchToProps\n)(TestCampaignListPage);\n","import React from 'react';\nconst SimulationStatus = ({data}) => (\n  <p>{JSON.stringify(data)}</p>\n)\n\nexport default SimulationStatus;","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Menu, Dropdown, Table } from \"antd\";\nimport {\n  ClearOutlined,\n  ImportOutlined,\n  DownOutlined,\n  CaretRightOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n} from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestAllModels,\n  requestDeleteModel,\n  requestDuplicateModel,\n  requestAddNewModel,\n  requestStartSimulation,\n  requestSimulationStatus,\n} from \"../actions\";\nimport SimulationStatus from \"../components/SimulationStatus/SimulationStatus\";\n\nclass ModelListPage extends Component {\n  onUpload(files) {\n    const fileReader = new FileReader();\n    fileReader.onloadend = () => {\n      try {\n        const newModel = JSON.parse(fileReader.result);\n        this.props.importNewModel(newModel);\n      } catch (error) {\n        this.props.setNotification({ type: \"error\", message: error });\n      }\n    };\n    fileReader.readAsText(files[0]);\n  }\n\n  componentDidMount() {\n    this.props.fetchAllModels();\n  }\n\n  render() {\n    const { allModels, deleteModel, duplicateModel, simulationStatus, startSimulation } = this.props;\n    const dataSource = allModels.map((model, index) => ({\n      name: model,\n      key: index,\n    }));\n    const columns = [\n      {\n        title: \"Name\",\n        key: \"data\",\n        render: (model) => (\n          <a href={`/models/${model.name}`}>\n            {model.name.replace(\".json\", \"\")}\n          </a>\n        ),\n      },\n      {\n        title: \"Action\",\n        key: \"action\",\n        width: 350,\n        render: item => (\n          <Fragment>\n            <a type=\"button\" href={`/simulation?model=${item.name}`}>\n              <Button\n                style={{marginRight: 10}} size=\"small\" type=\"dashed\" onClick={() => startSimulation(item.name)}>\n                <CaretRightOutlined /> Simulate\n              </Button>\n            </a>\n            <Button\n              style={{marginRight: 10}}\n              size=\"small\"\n              onClick={() => duplicateModel(item.name)}\n            >\n              <CopyOutlined /> Duplicate\n            </Button>\n            <Button\n              size=\"small\"\n              onClick={() => deleteModel(item.name)}\n              danger\n            >\n              <DeleteOutlined />\n              Delete\n            </Button>\n          </Fragment>\n        ),\n      },\n    ];\n\n    return (\n      <LayoutPage\n        pageTitle=\"Topology\"\n        pageSubTitle=\"Defines the topology and the specification of the sensors, actuators and the gateways\"\n      >\n        {simulationStatus &&\n        <SimulationStatus\n          data={simulationStatus}\n        />}\n        <Dropdown\n          overlay={\n            <Menu>\n              <Menu.Item key=\"model:3\">\n                <a href={`/models/new-model-${Date.now()}`}>\n                  <ClearOutlined /> Create New\n                </a>\n              </Menu.Item>\n              <Menu.Item\n                key=\"model:1\"\n                onClick={() => this.inputFileDOM.click()}\n              >\n                <ImportOutlined /> Import From File\n                <input\n                  type=\"file\"\n                  onChange={(event) => this.onUpload(event.target.files)}\n                  ref={(input) => {\n                    this.inputFileDOM = input;\n                  }}\n                  style={{ display: \"none\" }}\n                  accept=\".json\"\n                  multiple={false}\n                />\n              </Menu.Item>\n            </Menu>\n          }\n          trigger={[\"click\"]}\n        >\n          <Button\n            className=\"ant-dropdown-link\"\n            onClick={(e) => e.preventDefault()}\n            style={{ marginBottom: \"15px\" }}\n          >\n            Add Model <DownOutlined />\n          </Button>\n        </Dropdown>\n        <Table columns={columns} dataSource={dataSource} />\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ allModels, simulationStatus }) => ({\n  allModels,\n  simulationStatus,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAllModels: () => dispatch(requestAllModels()),\n  fetchSimulationStatus: () => dispatch(requestSimulationStatus()),\n  deleteModel: (modelFileName) => dispatch(requestDeleteModel(modelFileName)),\n  duplicateModel: (modelFileName) =>\n    dispatch(requestDuplicateModel(modelFileName)),\n  importNewModel: (model) => dispatch(requestAddNewModel(model)),\n  startSimulation: (modelFileName) => dispatch(requestStartSimulation({modelFileName})),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(ModelListPage);\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Menu, Dropdown, Table } from \"antd\";\nimport {\n  ClearOutlined,\n  ImportOutlined,\n  DownOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  CaretRightOutlined,\n} from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestAllDataRecorders,\n  requestDeleteDataRecorder,\n  requestDuplicateDataRecorder,\n  requestAddNewDataRecorder,\n  requestStartDataRecorder,\n} from \"../actions\";\n\nclass DataRecorderListPage extends Component {\n  onUpload(files) {\n    const fileReader = new FileReader();\n    fileReader.onloadend = () => {\n      try {\n        const newDataRecorder = JSON.parse(fileReader.result);\n        this.props.importNewDataRecorder(newDataRecorder);\n      } catch (error) {\n        this.props.setNotification({ type: \"error\", message: error });\n      }\n    };\n    fileReader.readAsText(files[0]);\n  }\n\n  componentDidMount() {\n    this.props.fetchAllDataRecorders();\n  }\n\n  render() {\n    const {\n      allDataRecorders,\n      deleteDataRecorder,\n      duplicateDataRecorder,\n      startDataRecorder,\n    } = this.props;\n    const dataSource = allDataRecorders.map((model, index) => ({\n      name: model,\n      key: index,\n    }));\n    const columns = [\n      {\n        title: \"Name\",\n        key: \"data\",\n        render: (model) => (\n          <a href={`/data-recorders/${model.name}`}>\n            {model.name.replace(\".json\", \"\")}\n          </a>\n        ),\n      },\n      {\n        title: \"Action\",\n        key: \"action\",\n        width: 350,\n        render: (item) => (\n          <Fragment>\n            <a type=\"button\" href={`/data-recorders/${item.name}`}>\n              <Button\n                style={{ marginRight: 10 }}\n                size=\"small\"\n                type=\"dashed\"\n                onClick={() => startDataRecorder(item.name)}\n              >\n                <CaretRightOutlined /> Launch\n              </Button>\n            </a>\n            <Button\n              style={{ marginRight: 10 }}\n              size=\"small\"\n              onClick={() => duplicateDataRecorder(item.name)}\n            >\n              <CopyOutlined /> Duplicate\n            </Button>\n            <Button\n              size=\"small\"\n              onClick={() => deleteDataRecorder(item.name)}\n              danger\n            >\n              <DeleteOutlined />\n              Delete\n            </Button>\n          </Fragment>\n        ),\n      },\n    ];\n\n    return (\n      <LayoutPage\n        pageTitle=\"DataRecorder\"\n        pageSubTitle=\"DataRecorder will collect data from the target environment and store the data into the DataStorage and also can forward the data into the simulation environment\"\n      >\n        <Dropdown\n          overlay={\n            <Menu>\n              <Menu.Item key=\"DataRecorder:3\">\n                <a href={`/data-recorders/new-DataRecorder-${Date.now()}`}>\n                  <ClearOutlined /> Create New\n                </a>\n              </Menu.Item>\n              <Menu.Item\n                key=\"DataRecorder:1\"\n                onClick={() => this.inputFileDOM.click()}\n              >\n                <ImportOutlined /> Import From File\n                <input\n                  type=\"file\"\n                  onChange={(event) => this.onUpload(event.target.files)}\n                  ref={(input) => {\n                    this.inputFileDOM = input;\n                  }}\n                  style={{ display: \"none\" }}\n                  accept=\".json\"\n                  multiple={false}\n                />\n              </Menu.Item>\n            </Menu>\n          }\n          trigger={[\"click\"]}\n        >\n          <Button\n            className=\"ant-dropdown-link\"\n            onClick={(e) => e.preventDefault()}\n            style={{ marginBottom: \"15px\" }}\n          >\n            Add DataRecorder <DownOutlined />\n          </Button>\n        </Dropdown>\n\n        <Table columns={columns} dataSource={dataSource} />\n        <p></p>\n        <a href={`/logs/data-recorders`}>View Logs</a>\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ allDataRecorders }) => ({\n  allDataRecorders,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAllDataRecorders: () => dispatch(requestAllDataRecorders()),\n  startDataRecorder: (dataRecorderFileName) =>\n    dispatch(requestStartDataRecorder(dataRecorderFileName)),\n  deleteDataRecorder: (dataRecorderFileName) =>\n    dispatch(requestDeleteDataRecorder(dataRecorderFileName)),\n\n  duplicateDataRecorder: (dataRecorderFileName) =>\n    dispatch(requestDuplicateDataRecorder(dataRecorderFileName)),\n  importNewDataRecorder: (dataRecorder) =>\n    dispatch(requestAddNewDataRecorder(dataRecorder)),\n});\n\nexport default connect(\n  mapPropsToStates,\n  mapDispatchToProps\n)(DataRecorderListPage);\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Switch, Form, List, Typography, Divider, Alert } from \"antd\";\nimport {\n  SwitcherOutlined,\n  ExportOutlined,\n  CaretRightOutlined,\n  CloseSquareOutlined,\n} from \"@ant-design/icons\";\n\nimport {\n  requestDataRecorder,\n  requestAddNewDataRecorder,\n  requestUpdateDataRecorder,\n  showModal,\n  changeDataRecorderName,\n  requestStartDataRecorder,\n  requestDataRecorderStatus,\n  requestStopDataRecorder,\n  requestDataStorage,\n} from \"../actions\";\nimport JSONView from \"../components/JSONView\";\nimport LayoutPage from \"./LayoutPage\";\n\nimport {\n  getQuery,\n  getLastPath,\n  updateObjectByPath,\n  deepCloneObject,\n} from \"../utils\";\nimport {\n  FormEditableTextItem,\n  FormSelectItem,\n  FormTextAreaItem,\n} from \"../components/FormItems\";\nimport ConnectionConfig from \"../components/ConnectionConfig\";\nimport CollapseForm from \"../components/CollapseForm\";\n\nconst { Text } = Typography;\n\nconst DataRecorderItem = ({\n  data,\n  onChange,\n  onDelete,\n  onDuplicate,\n  onEnable,\n}) => (\n  <CollapseForm\n    title={`${data.name}`}\n    extra={\n      <Fragment>\n        <Switch\n          defaultChecked={data.enable ? true : false}\n          checkedChildren=\"Enable\"\n          unCheckedChildren=\"Disable\"\n          onClick={(value, event) => {\n            event.stopPropagation();\n            onEnable();\n          }}\n          style={{ marginRight: 10 }}\n        />\n        <Button\n          onClick={(event) => {\n            event.stopPropagation();\n            onDuplicate();\n          }}\n          size=\"small\"\n          style={{ marginRight: 10 }}\n        >\n          Duplicate\n        </Button>\n        <Button\n          onClick={(event) => {\n            event.stopPropagation();\n            onDelete();\n          }}\n          size=\"small\"\n          danger\n        >\n          Delete\n        </Button>\n      </Fragment>\n    }\n  >\n    <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n      <FormEditableTextItem\n        label=\"Name\"\n        defaultValue={data.name}\n        onChange={(newName) => onChange(\"name\", newName)}\n      />\n      <FormEditableTextItem\n        label=\"Id\"\n        defaultValue={data.id}\n        onChange={(newId) => onChange(\"id\", newId)}\n      />\n      <Divider orientation=\"left\">Source </Divider>\n      <FormSelectItem\n        label=\"Protocol\"\n        defaultValue={data.source.protocol}\n        onChange={(v) => onChange(\"source.protocol\", v)}\n        options={[\"MQTT\", \"MONGODB\"]}\n      />\n      <ConnectionConfig\n        defaultValue={data.source.connConfig}\n        dataPath={\"source.connConfig\"}\n        onDataChange={onChange}\n        type={data.source.protocol}\n      />\n      <List\n        header={<strong>Upstreams ({data.source.upStreams.length})</strong>}\n        footer={\n          <Button\n            onClick={() => {\n              const newUpStreams = [\n                ...data.source.upStreams,\n                `new-up-stream-${Date.now()}`,\n              ];\n              onChange(\"source.upStreams\", newUpStreams);\n            }}\n          >\n            Add New UpStream\n          </Button>\n        }\n        size=\"small\"\n        bordered\n        dataSource={data.source.upStreams}\n        renderItem={(item, index) => (\n          <List.Item\n            actions={[\n              <Button\n                size=\"small\"\n                danger\n                key=\"delete\"\n                onClick={() => {\n                  if (data.source.upStreams.length === 1) {\n                    onChange(\"source.upStreams\", []);\n                  } else {\n                    let newUpStreams = [...data.source.upStreams];\n                    newUpStreams.splice(index, 1);\n                    onChange(\"source.upStreams\", newUpStreams);\n                  }\n                }}\n              >\n                Delete\n              </Button>,\n            ]}\n          >\n            <Text\n              editable={{\n                onChange: (v) => onChange(`source.upStreams[${index}]`, v),\n              }}\n            >\n              {item}\n            </Text>\n          </List.Item>\n        )}\n      />\n      <p></p>\n      <List\n        header={<strong>Downstreams ({data.source.downStreams.length})</strong>}\n        footer={\n          <Button\n            onClick={() => {\n              const newDownStreams = [\n                ...data.source.downStreams,\n                `new-down-stream-${Date.now()}`,\n              ];\n              onChange(\"source.downStreams\", newDownStreams);\n            }}\n          >\n            Add New DownStream\n          </Button>\n        }\n        size=\"small\"\n        bordered\n        dataSource={data.source.downStreams}\n        renderItem={(item, index) => (\n          <List.Item\n            actions={[\n              <Button\n                size=\"small\"\n                danger\n                key=\"delete\"\n                onClick={() => {\n                  if (data.source.downStreams.length === 1) {\n                    onChange(\"source.downStreams\", []);\n                  } else {\n                    let newDownstreams = [...data.source.downStreams];\n                    newDownstreams.splice(index, 1);\n                    onChange(\"source.downStreams\", newDownstreams);\n                  }\n                }}\n              >\n                Delete\n              </Button>,\n            ]}\n          >\n            <Text\n              value={item}\n              editable={{\n                onChange: (v) => onChange(`source.downStreams[${index}]`, v),\n              }}\n            >\n              {item}\n            </Text>\n          </List.Item>\n        )}\n      />\n      <Divider orientation=\"left\">Forward </Divider>\n      {data.forward ? (\n        <Fragment>\n          <FormSelectItem\n            label=\"Protocol\"\n            defaultValue={data.forward.protocol}\n            onChange={(v) => onChange(\"forward.protocol\", v)}\n            options={[\"MQTT\", \"MONGODB\"]}\n          />\n          <ConnectionConfig\n            defaultValue={data.forward.connConfig}\n            dataPath={\"forward.connConfig\"}\n            onDataChange={onChange}\n            type={data.forward.protocol}\n          />\n          <Button danger onClick={() => onChange(\"forward\", null)}>\n            Remove Forward\n          </Button>\n        </Fragment>\n      ) : (\n        <Button\n          onClick={() =>\n            onChange(\"forward\", {\n              protocol: \"MQTT\",\n              connConfig: {\n                host: \"localhost\",\n                port: 1883,\n                options: null,\n              },\n            })\n          }\n        >\n          Add Forward\n        </Button>\n      )}\n    </Form>\n  </CollapseForm>\n);\n\nconst newTempDataRecorder = (name) => {\n  const currentTime = Date.now();\n  return {\n    name: name,\n    dataRecorders: [],\n    dataset: {\n      id: `new-data-set-id-${currentTime}`,\n      name: `new-data-set-name-${currentTime}`,\n      description: `new-data-set-description-${currentTime}`,\n      tags: [\"generated\"],\n    },\n  };\n};\n\nconst newDataRecorder = () => {\n  const currentTime = Date.now();\n  return {\n    id: `id-new-data-recorder-${currentTime}`,\n    name: `name-new-data-recorder-${currentTime}`,\n    enable: false,\n    source: {\n      protocol: \"MQTT\",\n      connConfig: {\n        host: \"localhost\",\n        port: 1883,\n        options: null,\n      },\n      upStreams: [],\n      downStreams: [],\n    },\n  };\n};\n\nclass DataRecorderPage extends Component {\n  constructor(props) {\n    super(props);\n    let dataRecorderFileName = decodeURI(getLastPath());\n    let isNewDataRecorder = dataRecorderFileName.indexOf(\".json\") === -1;\n    this.state = {\n      dataRecorderFileName: isNewDataRecorder\n        ? `${dataRecorderFileName}.json`\n        : dataRecorderFileName,\n      tempDataRecorder: isNewDataRecorder\n        ? newTempDataRecorder(dataRecorderFileName)\n        : {},\n      isNewDataRecorder,\n      isChanged: false,\n    };\n\n    this.onDataRecorderChange = this.onDataRecorderChange.bind(this);\n  }\n\n  componentDidMount() {\n    let dataRecorderFileName = decodeURI(getLastPath());\n    const {\n      requestDataRecorder,\n      fetchDataRecorderStatus,\n      fetchDataStorage,\n    } = this.props;\n    if (dataRecorderFileName.indexOf(\".json\") === -1) {\n      // This is a new DataRecorder page\n      this.setState({\n        dataRecorderFileName,\n        tempDataRecorder: newTempDataRecorder(dataRecorderFileName),\n        isNewDataRecorder: true,\n      });\n    } else {\n      requestDataRecorder(dataRecorderFileName);\n      this.setState({ dataRecorderFileName, isNewDataRecorder: false });\n      fetchDataRecorderStatus();\n    }\n    fetchDataStorage();\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { dataRecorder } = newProps;\n    if (dataRecorder) {\n      this.setState({\n        tempDataRecorder: deepCloneObject(newProps.dataRecorder),\n      });\n    }\n  }\n\n  onDataRecorderChange(newDataRecorder) {\n    this.setState({\n      tempDataRecorder: newDataRecorder,\n      isChanged: true,\n    });\n  }\n\n  onDataChange(dataPath, value) {\n    this.setState((prevState) => {\n      const newData = { ...prevState.tempDataRecorder };\n      updateObjectByPath(newData, dataPath, value);\n      return { tempDataRecorder: newData, error: null, isChanged: true };\n    });\n  }\n\n  addNewDataRecorder() {\n    this.setState((prevState) => ({\n      tempDataRecorder: {\n        ...prevState.tempDataRecorder,\n        dataRecorders: [\n          ...prevState.tempDataRecorder.dataRecorders,\n          newDataRecorder(),\n        ],\n      },\n      isChanged: true,\n    }));\n  }\n\n  exportModel(model) {\n    if (model) {\n      const fileData = JSON.stringify(model);\n      const blob = new Blob([fileData], { type: \"text/json\" });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.download = `${model.name.replace(/ /g, \"\")}.json`;\n      link.href = url;\n      link.click();\n    }\n  }\n\n  addCustomDataStorage() {\n    const { dataStorage } = this.props;\n    if (dataStorage) {\n      this.onDataChange(\"dataStorage\", dataStorage);\n    } else {\n      this.onDataChange(\"dataStorage\", {\n        protocol: \"MONGODB\",\n        connConfig: {\n          host: \"localhost\",\n          port: 27017,\n          username: null,\n          password: null,\n          dbname: \"my_db_name\",\n          options: null,\n        },\n      });\n    }\n  }\n\n  render() {\n    const {\n      dataRecorderFileName,\n      tempDataRecorder,\n      isNewDataRecorder,\n      isChanged,\n    } = this.state;\n    const {\n      addNewDataRecorder,\n      updateDataRecorder,\n      startDataRecorder,\n      dataRecorderStatus,\n      stopDataRecorder,\n    } = this.props;\n\n    let viewType = getQuery(\"view\");\n    if (!viewType) viewType = \"form\";\n    let view = null;\n    //TODO: Fix JSON view - do not reload while editting\n    if (viewType === \"json\") {\n      view = (\n        <JSONView\n          value={tempDataRecorder}\n          onChange={this.onDataRecorderChange}\n        />\n      );\n    } else {\n      view = (\n        <Fragment>\n          <p></p>\n          <FormEditableTextItem\n            label=\"Name\"\n            defaultValue={tempDataRecorder.name}\n            onChange={(newName) => this.onDataChange(\"name\", newName)}\n          />\n          {tempDataRecorder.dataset && (\n            <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n              <Divider orientation=\"left\">Data Storage </Divider>\n              {tempDataRecorder.dataStorage ? (\n                <Fragment>\n                  <ConnectionConfig\n                    defaultValue={tempDataRecorder.dataStorage.connConfig}\n                    dataPath={\"dataStorage.connConfig\"}\n                    onDataChange={(dataPath, value) =>\n                      this.onDataChange(dataPath, value)\n                    }\n                    type={tempDataRecorder.dataStorage.protocol}\n                  />\n                  <Button danger onClick={() => this.onDataChange('dataStorage', null)}>\n                    Remove Custom Data Storage\n                  </Button>\n                </Fragment>\n              ) : (\n                <Fragment>\n                  <p>Use <a href=\"/data-storage\" target=\"_blank\">Default Data Storage</a></p>\n                  <Button onClick={() => this.addCustomDataStorage()}>\n                    Add Custom Data Storage\n                  </Button>\n                </Fragment>\n              )}\n              <Divider orientation=\"left\">Dataset </Divider>\n              <p>Define the Dataset to save the recorded data</p>\n              <FormEditableTextItem\n                label=\"Id\"\n                placeholder=\"Dataset Id\"\n                defaultValue={tempDataRecorder.dataset.id}\n                onChange={(value) => this.onDataChange(\"dataset.id\", value)}\n              />\n              <FormEditableTextItem\n                label=\"Name\"\n                placeholder=\"Name\"\n                defaultValue={tempDataRecorder.dataset.name}\n                onChange={(value) => this.onDataChange(\"dataset.name\", value)}\n              />\n              <FormTextAreaItem\n                label=\"Description\"\n                placeholder=\"Description\"\n                defaultValue={tempDataRecorder.dataset.description}\n                onChange={(value) =>\n                  this.onDataChange(\"dataset.description\", value)\n                }\n              />\n              <FormEditableTextItem\n                label=\"Tags\"\n                placeholder=\"Tags\"\n                defaultValue={JSON.stringify(tempDataRecorder.dataset.tags)}\n                onChange={(value) =>\n                  this.onDataChange(\"dataset.tags\", JSON.parse(value))\n                }\n              />\n            </Form>\n          )}\n          <Divider orientation=\"left\">Data Recorders </Divider>\n          {tempDataRecorder.dataRecorders ? (\n            <Fragment>\n              <p>\n                Number of recorders: {tempDataRecorder.dataRecorders.length}\n              </p>\n              <Button onClick={() => this.addNewDataRecorder()}>\n                Add New Data Recorder\n              </Button>\n              {tempDataRecorder.dataRecorders.map((dr, index) => (\n                <DataRecorderItem\n                  key={index}\n                  data={dr}\n                  onChange={(dataPath, value) =>\n                    this.onDataChange(\n                      `dataRecorders[${index}].${dataPath}`,\n                      value\n                    )\n                  }\n                  onEnable={() => {\n                    this.onDataChange(\n                      `dataRecorders[${index}].enable`,\n                      !dr.enable\n                    );\n                  }}\n                  onDelete={() => {\n                    let newDataRecorders = [...tempDataRecorder.dataRecorders];\n                    newDataRecorders.splice(index, 1);\n                    this.onDataChange(\"dataRecorders\", newDataRecorders);\n                  }}\n                  onDuplicate={() => {\n                    let dataRecorder = {\n                      ...dr,\n                      id: `${dr.id}-duplicated`,\n                      name: `${dr.name} [duplicated]`,\n                    };\n                    let newDataRecorders = [\n                      ...tempDataRecorder.dataRecorders,\n                      dataRecorder,\n                    ];\n                    this.onDataChange(\"dataRecorders\", newDataRecorders);\n                  }}\n                />\n              ))}\n            </Fragment>\n          ) : (\n            <Button onClick={() => this.addNewDataRecorder()}>\n              Add New Data Recorder\n            </Button>\n          )}\n          <p></p>\n        </Fragment>\n      );\n    }\n\n    return (\n      <LayoutPage>\n        {dataRecorderStatus && (\n          <Alert\n            style={{ marginBottom: \"15px\" }}\n            message={\n              <div>\n                <p>Model: {dataRecorderStatus.model}.</p>\n                <p>\n                  Started time:{\" \"}\n                  {new Date(\n                    dataRecorderStatus.startedTime\n                  ).toLocaleTimeString()}\n                  .\n                </p>\n                <p>\n                  Log file:{\" \"}\n                  <a\n                    href={`/logs/data-recorders?logFile=${dataRecorderStatus.logFile}`}\n                  >\n                    {dataRecorderStatus.logFile}\n                  </a>\n                  .\n                </p>\n                Dataset:{\" \"}\n                <a href={`/data-sets/${tempDataRecorder.dataset.id}`}>\n                  {tempDataRecorder.dataset.name}\n                </a>\n              </div>\n            }\n            type=\"success\"\n          />\n        )}\n        <a\n          href={`${window.location.pathname}?view=${\n            viewType === \"json\" ? \"form\" : \"json\"\n          }`}\n          style={{ marginRight: 10 }}\n        >\n          <SwitcherOutlined /> Switch View\n        </a>\n        <Button\n          style={{ marginRight: 10 }}\n          onClick={() => this.exportModel(tempDataRecorder)}\n        >\n          <ExportOutlined />\n          Export Model\n        </Button>\n        {dataRecorderStatus && dataRecorderStatus.isRunning ? (\n          <Button type=\"danger\" onClick={() => stopDataRecorder()}>\n            <CloseSquareOutlined /> Stop\n          </Button>\n        ) : (\n          <Button\n            type=\"primary\"\n            key=\"item-start\"\n            onClick={() => startDataRecorder(dataRecorderFileName)}\n            disabled={dataRecorderStatus || isChanged ? true : false}\n          >\n            <CaretRightOutlined /> Start\n          </Button>\n        )}\n        <p></p>\n        {view}\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            if (isNewDataRecorder) {\n              addNewDataRecorder(tempDataRecorder);\n            } else {\n              updateDataRecorder(dataRecorderFileName, tempDataRecorder);\n            }\n            this.setState({ isChanged: false });\n          }}\n          style={{ marginTop: \"10px\" }}\n          disabled={isChanged ? false : true}\n        >\n          Save\n        </Button>\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({\n  dataRecorder,\n  dataRecorderStatus,\n  dataStorage,\n}) => ({\n  dataRecorder,\n  dataRecorderStatus,\n  dataStorage: dataStorage.connConfig,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchDataStorage: () => dispatch(requestDataStorage()),\n  requestDataRecorder: (dataRecorderFileName) =>\n    dispatch(requestDataRecorder(dataRecorderFileName)),\n  fetchDataRecorderStatus: () => dispatch(requestDataRecorderStatus()),\n  addNewDataRecorder: (newDataRecorder) =>\n    dispatch(requestAddNewDataRecorder(newDataRecorder)),\n  updateDataRecorder: (dataRecorderFileName, dataRecorder) =>\n    dispatch(requestUpdateDataRecorder({ dataRecorderFileName, dataRecorder })),\n  showModal: (formID) => dispatch(showModal(formID)),\n  changeDataRecorderName: (newName) =>\n    dispatch(changeDataRecorderName(newName)),\n  startDataRecorder: (dataRecorderFileName) =>\n    dispatch(requestStartDataRecorder(dataRecorderFileName)),\n  stopDataRecorder: () => dispatch(requestStopDataRecorder()),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(DataRecorderPage);\n","import React from \"react\";\nimport TSModal from \"../TSModal\";\nimport { Checkbox, List } from \"antd\";\n\nconst SelectionModal = ({\n  onCancel,\n  onChange,\n  enable,\n  options,\n  defaultValue,\n  title\n}) => (\n  <TSModal\n    title={title}\n    visible={enable}\n    onCancel={() => onCancel()}\n    footer={[]}\n  >\n    <Checkbox.Group\n      style={{ width: \"100%\" }}\n      defaultValue={defaultValue}\n      onChange={(values) => onChange(values)}\n    >\n      <List\n        size=\"small\"\n        dataSource={options}\n        renderItem={(item) => (\n          <List.Item>\n            <Checkbox value={item.id}>{item.name}</Checkbox>\n          </List.Item>\n        )}\n      />\n    </Checkbox.Group>\n  </TSModal>\n);\nexport default SelectionModal;\n","import SelectionModal from './SelectionModal';\nimport './style.css';\nexport default SelectionModal;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Table, Menu, Dropdown, Button, Form } from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestTestCampaign,\n  requestAddNewTestCampaign,\n  requestUpdateTestCampaign,\n  requestAllTestCases,  \n} from \"../actions\";\nimport { FormEditableTextItem } from \"../components/FormItems\";\nimport SelectionModal from \"../components/SelectionModal\";\nimport { getLastPath } from \"../utils\";\n\n//TODO: add test case\nclass TestCampaignPage extends Component {\n  constructor(props) {\n    super(props);\n    const { testCampaign } = props;\n    if (testCampaign) {\n      const { id, name, description, testCaseIds } = testCampaign;\n      this.state = {\n        id,\n        originalId: id,\n        name,\n        description,\n        testCaseIds,\n        isChanged: false,\n        isNew: false,\n        showTestCaseModal: false,\n      };\n    } else {\n      const currentTime = Date.now();\n      const tcId = getLastPath();\n      this.state = {\n        id: tcId,\n        originalId: null,\n        name: `new-test-campaign-${currentTime}-name`,\n        description: `new-test-campaign-${currentTime}-description`,\n        testCaseIds: [],\n        isChanged: true,\n        isNew: true,\n        showTestCaseModal: false,\n      };\n    }\n  }\n\n  componentDidMount() {\n    const tcId = getLastPath();\n    this.props.fetchTestCampaign(tcId);\n    this.props.fetchTestCases();\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { testCampaign } = newProps;\n    if (testCampaign) {\n      const { id, name, description, testCaseIds } = testCampaign;\n      this.setState({\n        id,\n        originalId: id,\n        name,\n        description,\n        testCaseIds,\n        isChanged: false,\n        isNew: false,\n      });\n    }\n  }\n\n  moveTestCaseUp(index) {\n    const { testCaseIds } = this.state;\n    let newTestCaseIds = [...testCaseIds];\n    const selectTC = newTestCaseIds[index];\n    newTestCaseIds[index] = newTestCaseIds[index - 1];\n    newTestCaseIds[index - 1] = selectTC;\n    this.setState({ testCaseIds: newTestCaseIds, isChanged: true });\n  }\n\n  moveTestCaseDown(index) {\n    const { testCaseIds } = this.state;\n    let newTestCaseIds = [...testCaseIds];\n    const selectTC = newTestCaseIds[index];\n    newTestCaseIds[index] = newTestCaseIds[index + 1];\n    newTestCaseIds[index + 1] = selectTC;\n    this.setState({ testCaseIds: newTestCaseIds, isChanged: true });\n  }\n\n  removeTestCase(index) {\n    const { testCaseIds } = this.state;\n    let newTestCaseIds = [...testCaseIds];\n    newTestCaseIds.splice(index, 1);\n    this.setState({ testCaseIds: newTestCaseIds, isChanged: true });\n  }\n\n  updateTestCaseIds(values) {\n    this.setState({ testCaseIds: values, isChanged: true });\n  }\n\n  updateId(newId) {\n    if (newId !== this.state.originalId) {\n      this.setState({ id: newId, isChanged: true });\n    }\n  }\n  updateName(newName) {\n    this.setState({ name: newName, isChanged: true });\n  }\n  updateDescription(newDescription) {\n    this.setState({ description: newDescription, isChanged: true });\n  }\n\n  saveTestCampaign() {\n    const {\n      id,\n      name,\n      description,\n      testCaseIds,\n      originalId,\n      isNew,\n    } = this.state;\n    if (isNew) {\n      this.props.addNewTestCampaign({ id, name, description, testCaseIds });\n      this.setState({ isChanged: false, isNew: false, originalId: id });\n    } else {\n      this.props.updateTestCampaign(originalId, {\n        id,\n        name,\n        description,\n        testCaseIds,\n      });\n      this.setState({ isChanged: false, originalId: id });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      name,\n      description,\n      testCaseIds,\n      isChanged,\n      showTestCaseModal,\n    } = this.state;\n\n    const dataSource = testCaseIds.map((tcId, index) => ({\n      id: tcId,\n      key: index,\n    }));\n    const columns = [\n      {\n        title: \"Id\",\n        key: \"data\",\n        render: (tc) => <a href={`/test-cases/${tc.id}`}>{tc.id}</a>,\n      },\n      {\n        title: \"Action\",\n        key: \"data\",\n        render: (tc) => (\n          <Dropdown\n            overlay={\n              <Menu>\n                {tc.key > 0 && (\n                  <Menu.Item\n                    key=\"moveup\"\n                    onClick={() => this.moveTestCaseUp(tc.key)}\n                  >\n                    Move Up\n                  </Menu.Item>\n                )}\n                {tc.key < testCaseIds.length - 1 && (\n                  <Menu.Item\n                    key=\"movedown\"\n                    onClick={() => this.moveTestCaseDown(tc.key)}\n                  >\n                    Move Down\n                  </Menu.Item>\n                )}\n                <Menu.Item\n                  key=\"delete\"\n                  onClick={() => this.removeTestCase(tc.key)}\n                >\n                  Remove\n                </Menu.Item>\n              </Menu>\n            }\n          >\n            <a\n              className=\"ant-dropdown-link\"\n              onClick={(e) => e.preventDefault()}\n            >\n              <Button>\n                Action <DownOutlined />\n              </Button>\n            </a>\n          </Dropdown>\n        ),\n      },\n    ];\n    return (\n      <LayoutPage\n        pageTitle={name}\n        pageSubTitle=\"View and update the test campaign detail\"\n      >        \n        <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n          <FormEditableTextItem\n            label=\"Id\"\n            defaultValue={id}\n            onChange={(newId) => this.updateId(newId)}\n          />\n          <FormEditableTextItem\n            label=\"Name\"\n            defaultValue={name}\n            onChange={(newName) => this.updateName(newName)}\n          />\n          <FormEditableTextItem\n            label=\"Description\"\n            defaultValue={description}\n            onChange={(newDescription) =>\n              this.updateDescription(newDescription)\n            }\n          />\n        </Form>\n        <Button\n          style={{ marginBottom: \"10px\" }}\n          onClick={() => {\n            if (showTestCaseModal === false) {\n              this.setState({ showTestCaseModal: true });\n            }\n          }}\n        >\n          Add Test Case\n          <SelectionModal\n            title=\"Select test cases\"\n            enable={showTestCaseModal}\n            onCancel={() => {\n              this.setState({ showTestCaseModal: false });\n            }}\n            defaultValue={testCaseIds}\n            options={this.props.allTestCases}\n            onChange={(values) => this.updateTestCaseIds(values)}\n          />\n        </Button>\n        <Table columns={columns} dataSource={dataSource} />\n        {isChanged && (\n          <Button\n            onClick={() => this.saveTestCampaign()}\n            disabled={isChanged ? false : true}\n            type=\"primary\"\n          >\n            Save\n          </Button>\n        )}\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ testCampaigns, testCases }) => ({\n  testCampaign: testCampaigns.currentTestCampaign,\n  allTestCases: testCases.allTestCases,\n  runningStatus: testCampaigns.runningStatus,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchTestCampaign: (testCampaignId) =>\n    dispatch(requestTestCampaign(testCampaignId)),\n  fetchTestCases: () => dispatch(requestAllTestCases()),\n  updateTestCampaign: (originalId, updatedTestCampaign) =>\n    dispatch(\n      requestUpdateTestCampaign({\n        id: originalId,\n        testCampaign: updatedTestCampaign,\n      })\n    ),\n  addNewTestCampaign: (testCampaign) =>\n    dispatch(requestAddNewTestCampaign(testCampaign)),  \n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(TestCampaignPage);\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Table, Button } from \"antd\";\nimport { DeleteOutlined, CopyOutlined } from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestAllTestCases,\n  requestAddNewTestCase,\n  requestDeleteTestCase,\n} from \"../actions\";\n\nclass TestCaseListPage extends Component {\n\n  componentDidMount() {\n    this.props.fetchTestCases();\n  }\n\n  duplicateTestCase(tc) {\n    const newTc = {\n      id: `${tc.id}-[duplicated]`,\n      name: `${tc.name}-[duplicated]`,\n      description: tc.description,\n      testCaseIds: tc.testCaseIds,\n    };\n    this.props.addNewTestCase(newTc);\n  }\n\n  render() {\n    const { testCases, deleteTestCase } = this.props;\n    const dataSource = testCases.map((tc) => ({ ...tc, key: tc.id }));\n    const columns = [\n      {\n        title: \"Id\",\n        key: \"data\",\n        render: (tc) => <a href={`/test-cases/${tc.id}`}> {tc.name} </a>,\n      },\n      {\n        title: \"Action\",\n        key: \"data\",\n        width: 300,\n        render: (tc) => (\n          <Fragment>\n            <Button size=\"small\" style={{marginRight: 10}} onClick={() => this.duplicateTestCase(tc)}><CopyOutlined/> Duplicate</Button>\n            <Button size=\"small\" danger onClick={() => deleteTestCase(tc.id)}>\n            <DeleteOutlined /> Delete\n            </Button>\n          </Fragment>\n        ),\n      },\n    ];\n    return (\n      <LayoutPage\n        pageTitle=\"Test Case\"\n        pageSubTitle=\"All the test cases\"\n      >\n        <a href={`/test-cases/new-case-${Date.now()}`}>\n          <Button style={{ marginBottom: \"10px\" }}>Add New Case</Button>\n        </a>\n        <Table columns={columns} dataSource={dataSource} />\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ testCases }) => ({\n  testCases: testCases.allTestCases,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchTestCases: () => dispatch(requestAllTestCases()),\n  deleteTestCase: (testCaseId) =>\n    dispatch(requestDeleteTestCase(testCaseId)),\n  addNewTestCase: (testCase) =>\n    dispatch(requestAddNewTestCase(testCase)),\n});\n\nexport default connect(\n  mapPropsToStates,\n  mapDispatchToProps\n)(TestCaseListPage);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport moment from 'moment';\nimport { Table, Menu, Dropdown, Button, Form } from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestTestCase,\n  requestAddNewTestCase,\n  requestUpdateTestCase,\n  requestAllModels,\n  requestAllDatasets,\n} from \"../actions\";\nimport { FormEditableTextItem, FormSelectItem } from \"../components/FormItems\";\nimport { getLastPath } from \"../utils\";\nimport SelectionModal from \"../components/SelectionModal\";\n// TODO: add dataset\nclass TestCasePage extends Component {\n  constructor(props) {\n    super(props);\n    const { testCase } = props;\n    if (testCase) {\n      const {\n        id,\n        name,\n        description,\n        tags,\n        modelFileName,\n        datasetIds,\n      } = testCase;\n      this.state = {\n        id,\n        originalId: id,\n        name,\n        description,\n        tags,\n        modelFileName,\n        datasetIds,\n        isChanged: false,\n        isNew: false,\n        showDatasetModal: false,\n      };\n    } else {\n      const currentTime = Date.now();\n      const dsId = getLastPath();\n      this.state = {\n        id: dsId,\n        originalId: null,\n        name: `new-test-case-${currentTime}-name`,\n        description: `new-test-case-${currentTime}-description`,\n        tags: [],\n        modelFileName: null,\n        datasetIds: [],\n        isChanged: true,\n        isNew: true,\n        showDatasetModal: false,\n      };\n    }\n  }\n\n  componentDidMount() {\n    const dsId = getLastPath();\n    this.props.fetchTestCase(dsId);\n    this.props.fetchModelFiles();\n    this.props.fetchDatasets();\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { testCase } = newProps;\n    if (testCase) {\n      const {\n        id,\n        name,\n        description,\n        tags,\n        modelFileName,\n        datasetIds,\n      } = testCase;\n      this.setState({\n        id,\n        originalId: id,\n        name,\n        description,\n        tags,\n        modelFileName,\n        datasetIds,\n        isChanged: false,\n        isNew: false,\n      });\n    }\n  }\n\n  moveDatasetUp(index) {\n    const { datasetIds } = this.state;\n    let newDatasetIds = [...datasetIds];\n    const selectDS = newDatasetIds[index];\n    newDatasetIds[index] = newDatasetIds[index - 1];\n    newDatasetIds[index - 1] = selectDS;\n    this.setState({ datasetIds: newDatasetIds, isChanged: true });\n  }\n\n  moveDatasetDown(index) {\n    const { datasetIds } = this.state;\n    let newDatasetIds = [...datasetIds];\n    const selectDS = newDatasetIds[index];\n    newDatasetIds[index] = newDatasetIds[index + 1];\n    newDatasetIds[index + 1] = selectDS;\n    this.setState({ datasetIds: newDatasetIds, isChanged: true });\n  }\n\n  removeDataset(index) {\n    const { datasetIds } = this.state;\n    let newDatasetIds = [...datasetIds];\n    newDatasetIds.splice(index, 1);\n    this.setState({ datasetIds: newDatasetIds, isChanged: true });\n  }\n\n  updateDatasets(newDatasets) {\n    this.setState({ datasetIds: newDatasets, isChanged: true });\n  }\n\n  updateId(newId) {\n    if (newId !== this.state.originalId) {\n      this.setState({ id: newId, isChanged: true });\n    }\n  }\n  updateName(newName) {\n    this.setState({ name: newName, isChanged: true });\n  }\n\n  updateDescription(newDescription) {\n    this.setState({ description: newDescription, isChanged: true });\n  }\n\n  updateModelFileName(newModelFileName) {\n    this.setState({ modelFileName: newModelFileName, isChanged: true });\n  }\n\n  updateTags(newTags) {\n    this.setState({ tags: JSON.parse(newTags), isChanged: true });\n  }\n\n  saveTestCase() {\n    const {\n      id,\n      name,\n      description,\n      tags,\n      modelFileName,\n      datasetIds,\n      originalId,\n      isNew,\n    } = this.state;\n    if (isNew) {\n      this.props.addNewTestCase({\n        id,\n        name,\n        description,\n        tags,\n        modelFileName,\n        datasetIds,\n      });\n      this.setState({ isChanged: false, isNew: false, originalId: id });\n    } else {\n      this.props.updateTestCase(originalId, {\n        id,\n        name,\n        description,\n        tags,\n        modelFileName,\n        datasetIds,\n      });\n      this.setState({ isChanged: false, originalId: id });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      name,\n      description,\n      tags,\n      modelFileName,\n      datasetIds,\n      isChanged,\n      showDatasetModal,\n    } = this.state;\n    const { allModels, allDatasets } = this.props;\n    const dataSource = [];\n\n    allDatasets.map((ds) => {\n        if (datasetIds.indexOf(ds.id) > -1) {\n          dataSource.push({...ds, key: dataSource.length});\n        }\n      });\n    const columns = [\n      {\n        title: \"Id\",\n        width: 300,\n        key: \"data\",\n        render: (ds) => <a href={`/data-sets/${ds.id}`}>{ds.id}</a>,\n      },\n      {\n        title: \"Name\",\n        key: \"data\",\n        render: (ds) => ds.name,\n      },\n      {\n        title: \"Created At\",\n        key: \"data\",\n        sorter: (a, b) => a.createdAt - b.createdAt,\n        render: (ds) => moment(ds.createdAt).format('MMMM Do YYYY, h:mm:ss a'),\n        width: 300,\n      },\n      {\n        width: 150,\n        title: \"Action\",\n        key: \"data\",\n        render: (ds) => (\n          <Dropdown\n            overlay={\n              <Menu>\n                {ds.key > 0 && (\n                  <Menu.Item\n                    key=\"moveup\"\n                    onClick={() => this.moveDatasetUp(ds.key)}\n                  >\n                    Move Up\n                  </Menu.Item>\n                )}\n                {ds.key < dataSource.length - 1 && (\n                  <Menu.Item\n                    key=\"movedown\"\n                    onClick={() => this.moveDatasetDown(ds.key)}\n                  >\n                    Move Down\n                  </Menu.Item>\n                )}\n                <Menu.Item\n                  key=\"delete\"\n                  onClick={() => this.removeDataset(ds.key)}\n                >\n                  Remove\n                </Menu.Item>\n              </Menu>\n            }\n          >\n            <a\n              className=\"ant-dropdown-link\"\n              onClick={(e) => e.preventDefault()}\n            >\n              <Button>\n                Action <DownOutlined />\n              </Button>\n            </a>\n          </Dropdown>\n        ),\n      },\n    ];\n    // TODO: improve the tags view: https://ant.design/components/tag/\n    // - color\n    // - action remove/add new tags\n    return (\n      <LayoutPage\n        pageTitle={name}\n        pageSubTitle=\"View and update the test case detail\"\n      >\n        <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n          <FormEditableTextItem\n            label=\"Id\"\n            defaultValue={id}\n            onChange={(newId) => this.updateId(newId)}\n          />\n          <FormEditableTextItem\n            label=\"Name\"\n            defaultValue={name}\n            onChange={(newName) => this.updateName(newName)}\n          />\n          <FormEditableTextItem\n            label=\"Description\"\n            defaultValue={description}\n            onChange={(newDescription) =>\n              this.updateDescription(newDescription)\n            }\n          />\n          <FormSelectItem\n            label=\"Model File Name\"\n            defaultValue={modelFileName}\n            options={allModels}\n            onChange={(newModelFileName) =>\n              this.updateModelFileName(newModelFileName)\n            }\n          />\n          <FormEditableTextItem\n            label=\"Tags\"\n            defaultValue={JSON.stringify(tags)}\n            onChange={(newTags) => this.updateTags(newTags)}\n          />\n        </Form>\n        <Button\n          style={{ marginBottom: \"10px\" }}\n          onClick={() => {\n            if (showDatasetModal === false) {\n              this.setState({ showDatasetModal: true });\n            }\n          }}\n        >\n          Add Dataset\n          <SelectionModal\n            title=\"Dataset\"\n            enable={showDatasetModal}\n            onCancel={() => {\n              this.setState({ showDatasetModal: false });\n            }}\n            defaultValue={datasetIds}\n            options={allDatasets}\n            onChange={(values) => this.updateDatasets(values)}\n          />\n        </Button>\n        <Table columns={columns} dataSource={dataSource} />\n        {isChanged && (\n          <Button\n            onClick={() => this.saveTestCase()}\n            disabled={isChanged ? false : true}\n            type=\"primary\"\n          >\n            Save\n          </Button>\n        )}\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ testCases, allModels, datasets }) => ({\n  testCase: testCases.currentTestCase,\n  allModels,\n  allDatasets: datasets.allDatasets,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchModelFiles: () => dispatch(requestAllModels()),\n  fetchTestCase: (testCaseId) => dispatch(requestTestCase(testCaseId)),\n  fetchDatasets: () => dispatch(requestAllDatasets()),\n  updateTestCase: (originalId, updatedTestCase) =>\n    dispatch(\n      requestUpdateTestCase({\n        id: originalId,\n        testCase: updatedTestCase,\n      })\n    ),\n  addNewTestCase: (testCase) => dispatch(requestAddNewTestCase(testCase)),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(TestCasePage);\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport { Table, Button } from \"antd\";\nimport {\n  CaretRightOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n} from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestAllDatasets,\n  requestAddNewDataset,\n  requestDeleteDataset,\n} from \"../actions\";\n\nclass DatasetListPage extends Component {\n  componentDidMount() {\n    this.props.fetchDatasets();\n  }\n\n  /**\n   * - id\n- name\n- tags\n- description\n- createdAt/ lastModified\n- source:  \n   + GENERATED\n   + MUTATED\n   + RECORDED\n\n   * @param {Object} ds The selected dataset to be duplicated\n   */\n  duplicateDataset(ds) {\n    const currentTime = Date.now();\n    const newDS = {\n      id: `${ds.id}-[duplicated]`,\n      name: `${ds.name}-[duplicated]`,\n      description: ds.description,\n      tags: ds.tags,\n      createdAt: currentTime,\n      lastModified: currentTime,\n      source: \"MUTATED\",\n    };\n    this.props.addNewDataset(newDS);\n  }\n\n  render() {\n    const { datasets, deleteDataset } = this.props;\n    const dataSource = datasets.map((ds, index) => ({ ...ds, key: index }));\n    const columns = [\n      {\n        title: \"Created At\",\n        key: \"data\",\n        sorter: (a, b) => a.createdAt - b.createdAt,\n        render: (ds) => moment(ds.createdAt).format(\"MMMM Do YYYY, h:mm:ss a\"),\n        width: 300,\n      },\n      {\n        title: \"Id\",\n        key: \"data\",\n        render: (ds) => <a href={`/data-sets/${ds.id}`}> {ds.id} </a>,\n      },\n      {\n        title: \"Action\",\n        key: \"data\",\n        width: 350,\n        render: (ds) => (\n          <Fragment>\n            <Button size=\"small\" type=\"dashed\" style={{ marginRight: 10 }}>\n              <a href={`/simulation?datasetId=${ds.id}`}>\n                <CaretRightOutlined /> Simulate\n              </a>\n            </Button>\n            <Button\n              size=\"small\"\n              style={{ marginRight: 10 }}\n              onClick={() => this.duplicateDataset(ds)}\n            >\n              <CopyOutlined /> Duplicate\n            </Button>\n            <Button size=\"small\" danger onClick={() => deleteDataset(ds.id)}>\n              <DeleteOutlined /> Delete\n            </Button>\n          </Fragment>\n        ),\n      },\n    ];\n    return (\n      <LayoutPage pageTitle=\"Dataset\" pageSubTitle=\"All the datasets\">\n        <a href={`/data-sets/new-dataset-${Date.now()}`}>\n          <Button style={{ marginBottom: \"10px\" }}>Add New Dataset</Button>\n        </a>\n        <Table columns={columns} dataSource={dataSource} />\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ datasets }) => ({\n  datasets: datasets.allDatasets,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchDatasets: () => dispatch(requestAllDatasets()),\n  deleteDataset: (datasetId) => dispatch(requestDeleteDataset(datasetId)),\n  addNewDataset: (dataset) => dispatch(requestAddNewDataset(dataset)),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(DatasetListPage);\n","import React, { Component } from \"react\";\nimport TSModal from \"../TSModal\";\nimport { Form, Button } from \"antd\";\nimport {\n  updateObjectByPath,\n  deepCloneObject,\n} from \"../../utils\";\nimport {\n  FormSwitchItem,\n  FormEditableTextItem,\n  FormTextNotEditableItem,\n} from \"../FormItems\";\n\nconst initEvent = () => ({\n  timestamp: Date.now(),\n  topic: `topic-${Date.now()}`,\n  isSensorData: false,\n  values: `values-${Date.now()}`,\n  datasetId: `datasetId-${Date.now()}`,\n});\n\nclass EventModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      event: props.event? deepCloneObject(props.event) : initEvent(),\n    };\n  }\n\n  onDataChange(dataPath, value) {\n    this.setState((prevState) => {\n      const newData = { ...prevState.event };\n      updateObjectByPath(newData, dataPath, value);\n      return { event: newData};\n    });\n  }\n\n  render() {\n    const { event } = this.state;\n    const {timestamp, topic, isSensorData, values, datasetId } = event;\n    const {onCancel, onOK, enable } = this.props;\n    const footer = [\n      <Button key=\"cancel\" onClick={() => onCancel()}>\n        Cancel\n      </Button>,\n      <Button key=\"ok\" type=\"primary\" onClick={() => onOK(event)}>\n        OK\n      </Button>,\n    ];\n\n    return (\n      <TSModal\n        title={\"Event\"}\n        visible={enable}\n        onCancel={() => onCancel()}\n        footer={footer}\n      >\n        <Form\n          labelCol={{\n            span: 4,\n          }}\n          wrapperCol={{\n            span: 14,\n          }}\n        >\n          <FormEditableTextItem\n            label=\"Timestamp\"\n            defaultValue={timestamp}\n            onChange={(v) => this.onDataChange(\"timestamp\", v)}\n            helpText=\"The timestamp of the event\"\n          />\n          <FormEditableTextItem\n            label=\"Topic\"\n            defaultValue={topic}\n            onChange={(v) => this.onDataChange(\"topic\", v)}\n            helpText=\"The MQTT/STOMP topic on which the actuator will be listening to receive actuated data\"\n          />\n          <FormSwitchItem\n            label=\"Is Sensor Data\"\n            onChange={(v) => this.onDataChange(`isSensorData`, v)}\n            checked={isSensorData ? true : false}\n            checkedChildren={\"data sent by sensor\"}\n            unCheckedChildren={\"data received by actuator\"}\n            helpText=\"True if this is the data sent by sensor\"\n          />\n          <FormTextNotEditableItem\n            label=\"Dataset Id\"\n            value={datasetId}\n            helpText=\"The timestamp of the event\"\n          />\n          <FormEditableTextItem\n            label=\"Value\"\n            defaultValue={JSON.stringify(values)}\n            onChange={(v) => this.onDataChange(\"values\", JSON.parse(v))}\n            helpText=\"The value of the event\"\n          />\n        </Form>\n      </TSModal>\n    );\n  }\n}\n\nexport default EventModal;","import EventModal from './EventModal';\nimport './style.css';\nexport default EventModal;","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Table, Menu, Dropdown, Button, Tooltip, Form } from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestDataset,\n  requestAddNewDataset,\n  requestUpdateDataset,\n  requestEventsByDatasetId,\n  requestAddNewEvent,\n  requestDeleteEvent,\n  requestUpdateEvent,\n} from \"../actions\";\nimport {\n  FormEditableTextItem,\n  FormSelectItem,\n  FormTextNotEditableItem,\n} from \"../components/FormItems\";\nimport { getLastPath } from \"../utils\";\nimport EventModal from \"../components/EventModal\";\n\n/**\n * - id\n- name\n- tags\n- description\n- createdAt/ lastModified\n- source:  \n   + GENERATED\n   + MUTATED\n   + RECORDED\n\n */\n\nconst initEvent = (dsId) => ({\n  _id: `new-event-id`,\n  timestamp: Date.now(),\n  topic: `topic-${Date.now()}`,\n  isSensorData: false,\n  values: `values-${Date.now()}`,\n  datasetId: dsId,\n});\n\nclass DatasetPage extends Component {\n  constructor(props) {\n    super(props);\n    const { dataset } = props;\n    if (dataset) {\n      const {\n        id,\n        name,\n        description,\n        tags,\n        createdAt,\n        lastModified,\n        source,\n      } = dataset;\n      this.state = {\n        id,\n        originalId: id,\n        name,\n        description,\n        tags,\n        createdAt,\n        lastModified,\n        source,\n        isChanged: false,\n        events: [],\n        isNew: false,\n        newEvent: initEvent(id),\n        activeEventModal: null,\n      };\n    } else {\n      const currentTime = Date.now();\n      const dsId = getLastPath();\n      this.state = {\n        id: dsId,\n        originalId: null,\n        name: `new-dataset-${currentTime}-name`,\n        description: `new-dataset-${currentTime}-description`,\n        tags: [],\n        createdAt: currentTime,\n        lastModified: currentTime,\n        source: \"GENERATED\",\n        isChanged: true,\n        isNew: true,\n        events: [],\n        newEvent: initEvent(dsId),\n        activeEventModal: null,\n      };\n    }\n  }\n\n  componentDidMount() {\n    const dsId = getLastPath();\n    this.props.fetchDataset(dsId);\n    this.props.fetchEvents(dsId);\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { dataset, events } = newProps;\n    if (dataset) {\n      const {\n        id,\n        name,\n        description,\n        tags,\n        createdAt,\n        lastModified,\n        source,\n      } = dataset;\n      this.setState({\n        id,\n        originalId: id,\n        name,\n        description,\n        tags,\n        createdAt,\n        lastModified,\n        source,\n        isChanged: false,\n        isNew: false,\n        activeEventModal: null,\n      });\n    }\n\n    if (events) {\n      this.setState({ events });\n    }\n  }\n\n  moveEventUp(index) {\n    const { events } = this.state;\n    let newEvents = [...events];\n    const selectDS = newEvents[index];\n    newEvents[index] = newEvents[index - 1];\n    newEvents[index - 1] = selectDS;\n    this.setState({ events: newEvents, isChanged: true });\n  }\n\n  moveEventDown(index) {\n    const { events } = this.state;\n    let newEvents = [...events];\n    const selectDS = newEvents[index];\n    newEvents[index] = newEvents[index + 1];\n    newEvents[index + 1] = selectDS;\n    this.setState({ events: newEvents, isChanged: true });\n  }\n\n  updateId(newId) {\n    if (newId !== this.state.originalId) {\n      this.setState({ id: newId, isChanged: true, newEvent: initEvent(newId) });\n    }\n  }\n  updateName(newName) {\n    this.setState({ name: newName, isChanged: true });\n  }\n\n  updateDescription(newDescription) {\n    this.setState({ description: newDescription, isChanged: true });\n  }\n\n  updateSource(newSource) {\n    this.setState({ source: newSource, isChanged: true });\n  }\n\n  updateTags(newTags) {\n    this.setState({ tags: JSON.parse(newTags), isChanged: true });\n  }\n\n  savedataset() {\n    const {\n      id,\n      name,\n      description,\n      tags,\n      source,\n      datasetIds,\n      originalId,\n      isNew,\n    } = this.state;\n    if (isNew) {\n      this.props.addNewdataset({\n        id,\n        name,\n        description,\n        tags,\n        source,\n        datasetIds,\n      });\n      this.setState({ isChanged: false, isNew: false, originalId: id });\n    } else {\n      this.props.updatedataset(originalId, {\n        id,\n        name,\n        description,\n        tags,\n        source,\n        datasetIds,\n      });\n      this.setState({ isChanged: false, originalId: id });\n    }\n  }\n\n  changeActiveEventModal(id) {\n    this.setState({ activeEventModal: id });\n  }\n\n  render() {\n    const {\n      id,\n      name,\n      description,\n      tags,\n      source,\n      events,\n      isChanged,\n      newEvent,\n      isNew,\n    } = this.state;\n    const nbEvents = events.length;\n    const startTime = events[0] ? events[0].timestamp : 0;\n    const endTime = events[nbEvents - 1] ? events[nbEvents - 1].timestamp : 0;\n    let sensors = [];\n    let actuators = [];\n    let topicFilters = [];\n    for (let index = 0; index < events.length; index++) {\n      const event = events[index];\n      if (event.isSensorData && sensors.indexOf(event.topic) === -1) {\n        // this is a new sensor\n        sensors.push(event.topic);\n        topicFilters.push({ text: event.topic, value: event.topic });\n      } else if (!event.isSensorData && actuators.indexOf(event.topic) === -1) {\n        // This is a new actuator\n        actuators.push(event.topic);\n        topicFilters.push({ text: event.topic, value: event.topic });\n      }\n    }\n    const nbSensors = sensors.length;\n    const nbActuators = actuators.length;\n\n    const dataSource = events.map((event, index) => ({\n      ...event,\n      key: index,\n    }));\n    const columns = [\n      {\n        title: \"Timestamp\",\n        key: \"timestamp\",\n        dataIndex: \"timestamp\",\n        sorter: (a, b) => a.timestamp - b.timestamp,\n        render: (ts) => ts,\n        width: 300,\n      },\n      {\n        title: \"Topic\",\n        key: \"topic\",\n        dataIndex: \"topic\",\n        render: (topic) => topic,\n        filters: topicFilters,\n        onFilter: (value, data) => data.topic === value,\n        width: 400,\n      },\n      {\n        title: \"Is sensor's data\",\n        key: \"isSensorData\",\n        dataIndex: \"isSensorData\",\n        filters: [\n          {\n            text: \"Sensor's Data\",\n            value: true,\n          },\n          {\n            text: \"Actuator's Data\",\n            value: false,\n          },\n        ],\n        onFilter: (value, data) => data.isSensorData === value,\n        render: (isSensorData) => (isSensorData ? \"Yes\" : \"No\"),\n        width: 100,\n      },\n      {\n        title: \"Values\",\n        key: \"values\",\n        dataIndex: \"values\",\n        render: (value) => JSON.stringify(value),\n      },\n      {\n        title: \"Action\",\n        key: \"data\",\n        width: 150,\n        render: (event) => (\n          <Dropdown\n            overlay={\n              <Menu>\n                <Menu.Item\n                  key=\"delete\"\n                  onClick={() => this.props.deleteEvent(event._id)}\n                >\n                  Delete\n                </Menu.Item>\n                <Menu.Item\n                  key=\"duplicate\"\n                  onClick={() => this.props.addNewEvent(event)}\n                >\n                  Duplicate\n                </Menu.Item>\n                <Menu.Item\n                  key=\"mutate\"\n                  onClick={() => {\n                    if (this.state.activeEventModal === null) {\n                      this.changeActiveEventModal(event._id);\n                    }\n                  }}\n                >\n                  Modify Value\n                  <EventModal\n                    event={event}\n                    enable={event._id === this.state.activeEventModal}\n                    onCancel={() => {\n                      this.changeActiveEventModal(null);\n                    }}\n                    onOK={(newEvent) => {\n                      this.props.updateEvent(event._id, newEvent);\n                      this.changeActiveEventModal(null);\n                    }}\n                  />\n                </Menu.Item>\n              </Menu>\n            }\n          >\n            <a\n              className=\"ant-dropdown-link\"\n              onClick={(e) => e.preventDefault()}\n            >\n              <Button>\n                Select Action <DownOutlined />\n              </Button>\n            </a>\n          </Dropdown>\n        ),\n      },\n    ];\n    // TODO: improve the tags view: https://ant.design/components/tag/\n    // - color\n    // - action remove/add new tags\n    // Statistic on events data\n    // - Total number of events\n    // - Number of sensors\n    // - Number of actuators\n    // - Number of gateway\n    // - Started time/ End time\n    // - Source: recorded, generated, etc..\n\n    // TODO: Make statistic beautiful\n    // TODO: implement editting event\n    return (\n      <LayoutPage\n        pageTitle={name}\n        pageSubTitle=\"View and update the test case detail\"\n      >\n        <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n          {isNew ? (\n            <Fragment>\n              <FormEditableTextItem\n                label=\"Id\"\n                defaultValue={id}\n                onChange={(newId) => this.updateId(newId)}\n              />\n              <FormSelectItem\n                label=\"Source\"\n                defaultValue={source}\n                options={[\"GENERATED\", \"MUTATED\", \"RECORDED\"]}\n                onChange={(newSource) => this.updateSource(newSource)}\n              />\n            </Fragment>\n          ) : (\n            <Fragment>\n              <FormTextNotEditableItem label=\"Id\" value={id} />\n              <FormTextNotEditableItem label=\"Source\" value={source} />\n            </Fragment>\n          )}\n\n          <FormEditableTextItem\n            label=\"Name\"\n            defaultValue={name}\n            onChange={(newName) => this.updateName(newName)}\n          />\n          <FormEditableTextItem\n            label=\"Description\"\n            defaultValue={description}\n            onChange={(newDescription) =>\n              this.updateDescription(newDescription)\n            }\n          />\n          <FormEditableTextItem\n            label=\"Tags\"\n            defaultValue={JSON.stringify(tags)}\n            onChange={(newTags) => this.updateTags(newTags)}\n          />\n          <FormTextNotEditableItem label=\"Number of events\" value={nbEvents} />\n          <FormTextNotEditableItem\n            label=\"Number of sensors\"\n            value={nbSensors}\n          />\n          <FormTextNotEditableItem\n            label=\"Number of actuators\"\n            value={nbActuators}\n          />\n          <FormTextNotEditableItem\n            label=\"Started Time\"\n            value={new Date(startTime).toLocaleString()}\n          />\n          <FormTextNotEditableItem\n            label=\"Ended Time\"\n            value={new Date(endTime).toLocaleString()}\n          />\n        </Form>\n        <Tooltip title=\"The dataset need to be created before adding event\">\n          <Button\n            style={{ marginBottom: \"10px\" }}\n            onClick={() => {\n              if (this.state.activeEventModal === null) {\n                this.changeActiveEventModal(newEvent._id);\n              }\n            }}\n            disabled={isNew ? true : false}\n          >\n            Add Event\n            <EventModal\n              event={newEvent}\n              enable={newEvent._id === this.state.activeEventModal}\n              onCancel={() => {\n                this.changeActiveEventModal(null);\n              }}\n              onOK={(newEvent) => {\n                const {\n                  timestamp,\n                  isSensorData,\n                  topic,\n                  datasetId,\n                  values,\n                } = newEvent;\n                this.props.addNewEvent({\n                  timestamp,\n                  isSensorData,\n                  topic,\n                  datasetId,\n                  values,\n                });\n                this.changeActiveEventModal(null);\n              }}\n            />\n          </Button>\n        </Tooltip>\n        <Table columns={columns} dataSource={dataSource} />\n        {isChanged && (\n          <Button\n            onClick={() => this.savedataset()}\n            disabled={isChanged ? false : true}\n            type=\"primary\"\n          >\n            Save\n          </Button>\n        )}\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ datasets }) => ({\n  dataset: datasets.currentDataset.dataset,\n  events: datasets.currentDataset.events,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchEvents: (datasetId) => dispatch(requestEventsByDatasetId(datasetId)),\n  fetchDataset: (datasetId) => dispatch(requestDataset(datasetId)),\n  updatedataset: (originalId, updateddataset) =>\n    dispatch(\n      requestUpdateDataset({\n        id: originalId,\n        dataset: updateddataset,\n      })\n    ),\n  addNewdataset: (dataset) => dispatch(requestAddNewDataset(dataset)),\n  addNewEvent: (event) => dispatch(requestAddNewEvent(event)),\n  updateEvent: (id, event) => dispatch(requestUpdateEvent({ id, event })),\n  deleteEvent: (eventId) => dispatch(requestDeleteEvent(eventId)),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(DatasetPage);\n\n// TODO: load more data in the table\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport LayoutPage from \"./LayoutPage\";\nimport { getQuery } from \"../utils\";\nimport {\n  FormSelectItem,\n  FormEditableTextItem,\n  FormTextNotEditableItem,\n  FormTextAreaItem,\n} from \"../components/FormItems\";\nimport {\n  requestAllModels,\n  requestAllDatasets,\n  requestStartSimulation,\n  requestStopSimulation,\n  requestSimulationStatus,\n} from \"../actions\";\nimport { Form, Button } from \"antd\";\nconst NONE_DATA_SET_OPTION = \"No Data Source\";\nclass SimulationPage extends Component {\n  constructor(props) {\n    super(props);\n    const currentTime = Date.now();\n    this.state = {\n      modelFileName: null,\n      datasetId: NONE_DATA_SET_OPTION,\n      newDatasetId: `dataset-id-${currentTime}`,\n      datasetName: `Dataset has been created at ${currentTime}`,\n      datasetDescription: `This is the description of the dataset created at ${currentTime}`,\n      datasetTags: [\"generated\"],\n    };\n  }\n\n  componentDidMount() {\n    const dsId = getQuery(\"datasetId\");\n    this.setState({\n      modelFileName: getQuery(\"model\"),\n      datasetId: dsId ? dsId : NONE_DATA_SET_OPTION,\n    });\n    this.props.fetchModelFiles();\n    this.props.fetchDatasets();\n    this.props.fetchSimulationStatus();\n    setInterval(() => {\n      this.props.fetchSimulationStatus();\n    }, 3000);\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (!this.state.modelFileName && newProps.allModels) {\n      this.setState({ modelFileName: newProps.allModels[0] });\n    }\n  }\n\n  onModelFileNameChange(newModel) {\n    this.setState({ modelFileName: newModel });\n  }\n\n  onDatasetIdChange(newDS) {\n    this.setState({ datasetId: newDS });\n  }\n\n  onNewDatasetIdChange(newDS) {\n    this.setState({ newDatasetId: newDS });\n  }\n\n  onDatasetNameChange(name) {\n    this.setState({ datasetName: name });\n  }\n\n  onDatasetDescriptionChange(desc) {\n    this.setState({ datasetDescription: desc });\n  }\n\n  onDatasetTagsChange(tags) {\n    this.setState({ datasetTags: tags.split(\",\") });\n  }\n\n  render() {\n    const { simulationStatus } = this.props;\n    if (simulationStatus) {\n      // Simulating mode\n      const {\n        model,\n        modelFileName,\n        datasetId,\n        newDataset,\n        logFile,\n      } = simulationStatus;\n      return (\n        <LayoutPage\n          pageTitle=\"Simulation Page\"\n          pageSubTitle=\"Manually perform a simulation\"\n        >\n          <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n            {modelFileName ? (\n              <FormTextNotEditableItem\n                label={\"Model File Name\"}\n                value={\n                  <a href={`/api/models/${modelFileName}`}>{modelFileName}</a>\n                }\n              />\n            ) : (\n              <FormTextNotEditableItem label={\"Model\"} value={model.name} />\n            )}\n\n            {datasetId && (\n              <FormTextNotEditableItem\n                label={\"Dataset Source\"}\n                helpText=\"The source of the data input for the simulation\"\n                value={datasetId}\n              />\n            )}\n            <p>The data generated are stored in the dataset</p>\n            <FormTextNotEditableItem\n              label=\"Dataset Id\"\n              value={\n                <a href={`/data-sets/${newDataset.id}`}>{newDataset.id}</a>\n              }\n            />\n            <Form.Item\n              wrapperCol={{\n                xs: {\n                  span: 24,\n                  offset: 0,\n                },\n                sm: {\n                  span: 16,\n                  offset: 4,\n                },\n              }}\n            >\n              <Button\n                type=\"primary\"\n                onClick={() => {\n                  this.props.stopSimulation();\n                }}\n                danger\n              >\n                Stop\n              </Button>\n              <a href={`/logs/simulations?logFile=${logFile}`}>\n                <Button type=\"link\">View Log</Button>\n              </a>\n              <a href={`/graphview`}>\n                <Button type=\"link\">View Graph</Button>\n              </a>\n            </Form.Item>\n          </Form>\n          <p></p>\n          <a href={`/logs/simulations`}>View Logs</a>\n        </LayoutPage>\n      );\n    }\n    const {\n      modelFileName,\n      datasetId,\n      newDatasetId,\n      datasetName,\n      datasetDescription,\n      datasetTags,\n    } = this.state;\n    const { allModels, allDatasets } = this.props;\n    const datasetOptions = allDatasets.map((ds) => ds.id);\n    return (\n      <LayoutPage\n        pageTitle=\"Simulation Page\"\n        pageSubTitle=\"Manually perform a simulation\"\n      >\n        <Form\n          labelCol={{\n            span: 4,\n          }}\n          wrapperCol={{\n            span: 14,\n          }}\n        >\n          <FormSelectItem\n            label={\"Model File Name\"}\n            defaultValue={modelFileName}\n            options={allModels}\n            onChange={(value) => this.onModelFileNameChange(value)}\n          />\n          <FormSelectItem\n            label={\"Data Source\"}\n            defaultValue={datasetId}\n            options={[...datasetOptions, NONE_DATA_SET_OPTION]}\n            onChange={(value) => this.onDatasetIdChange(value)}\n          />\n          <p>Store the generated data to a new dataset</p>\n          <FormEditableTextItem\n            label=\"Id\"\n            placeholder=\"New Dataset Id\"\n            defaultValue={newDatasetId}\n            onChange={(value) => this.onNewDatasetIdChange(value)}\n          />\n          <FormEditableTextItem\n            label=\"Name\"\n            placeholder=\"Name\"\n            defaultValue={datasetName}\n            onChange={(value) => this.onDatasetNameChange(value)}\n          />\n          <FormTextAreaItem\n            label=\"Description\"\n            defaultValue={datasetDescription}\n            onChange={(value) => this.onDatasetDescriptionChange(value)}\n          />\n          <FormEditableTextItem\n            label=\"Tags\"\n            placeholder=\"Tags\"\n            defaultValue={JSON.stringify(datasetTags)}\n            onChange={(value) => this.onDatasetTagsChange(JSON.parse(value))}\n          />\n          <Form.Item\n            wrapperCol={{\n              xs: {\n                span: 24,\n                offset: 0,\n              },\n              sm: {\n                span: 16,\n                offset: 4,\n              },\n            }}\n          >\n            <Button\n              type=\"primary\"\n              onClick={() => {\n                this.props.startSimulation(\n                  modelFileName,\n                  datasetId === NONE_DATA_SET_OPTION ? null : datasetId,\n                  {\n                    id: newDatasetId,\n                    name: datasetName,\n                    description: datasetDescription,\n                    tags: datasetTags,\n                    source: \"GENERATED\",\n                  }\n                );\n              }}\n            >\n              Start\n            </Button>\n          </Form.Item>\n        </Form>\n        <p></p>\n        <a href={`/logs/simulations`}>View Logs</a>\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ allModels, datasets, simulationStatus }) => ({\n  allModels,\n  allDatasets: datasets.allDatasets,\n  simulationStatus,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchModelFiles: () => dispatch(requestAllModels()),\n  fetchDatasets: () => dispatch(requestAllDatasets()),\n  fetchSimulationStatus: () => dispatch(requestSimulationStatus()),\n  startSimulation: (modelFileName, datasetId, newDataset) =>\n    dispatch(\n      requestStartSimulation({\n        modelFileName,\n        datasetId,\n        newDataset,\n      })\n    ),\n  stopSimulation: () => dispatch(requestStopSimulation()),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(SimulationPage);\n","import React from \"react\";\nimport { Row, Col, Typography, PageHeader } from \"antd\";\nimport LayoutPage from \"./LayoutPage\";\n\nconst { Text } = Typography;\n\nconst LogLine = ({ type, time, device, message }) => (\n  <Row>\n    <Col span={4}>\n      <Text type={type}>{time}</Text>\n    </Col>\n    <Col span={5}>\n      <Text type={type}>{device}</Text>\n    </Col>\n    <Col span={15}>\n      <Text type={type}>{message}</Text>\n    </Col>\n  </Row>\n);\n\nconst LogFileContent = ({ logs, logFile }) => (\n  <LayoutPage>\n    <PageHeader className=\"site-page-header\" title={logFile} />\n    <LogLine\n      key={-1}\n      type={\"warning\"}\n      time={\"Time\"}\n      device={\"Device\"}\n      message={\"Message\"}\n    />\n    {!logs ? (\n      <p>Empty</p>\n    ) : (\n      logs.split(\"\\n\").map((log, index) => {\n        const array = log.split(\" \");\n        if (array.length < 4) {\n          return null;\n        }\n        const type = array[2] === \"info:\" ? \"secondary\" : \"danger\";\n        const time = new Date(array[0]);\n        const timeString = `${time.getHours()}:${time.getMinutes()}:${time.getSeconds()} ${time.getDay()}/${time.getMonth()}/${time.getFullYear()}`;\n        const device = array[3].replace(\"[\", \"\").replace(\"]\", \"\");\n        const message = log.split(array[3])[1];\n        return (\n          <LogLine\n            key={index}\n            type={type}\n            time={timeString}\n            device={device}\n            message={message}\n          />\n        );\n      })\n    )}\n  </LayoutPage>\n);\n\nexport default LogFileContent;\n","import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\nimport { Table, Button, PageHeader } from \"antd\";\nimport { getCreatedTimeFromFileName, getLastPath, getQuery } from \"../utils\";\n\nimport {\n  requestAllLogFiles,\n  requestDeleteLogFile,\n  requestLogFile,\n} from \"../actions\";\nimport LayoutPage from \"./LayoutPage\";\nimport LogFileContent from \"./LogFileContent\";\n\nclass LogsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tool: null,\n      isLogPage: false,\n      logFile: null,\n    };\n  }\n\n  componentDidMount() {\n    const tool = getLastPath();\n    const logFile = getQuery(\"logFile\");\n    const { fetchAllLogFiles, fetchLogs } = this.props;\n    if (logFile) {\n      fetchLogs(tool, logFile);\n      this.setState({ tool, isLogPage: true, logFile });\n    } else {\n      fetchAllLogFiles(tool);\n      this.setState({ tool, isLogPage: false });\n    }\n  }\n\n  render() {\n    const { logFiles, logs, deleteLogFile } = this.props;\n    const { tool, isLogPage, logFile } = this.state;\n    if (isLogPage) {\n      return <LogFileContent logs={logs} logFile={logFile} />;\n    }\n    const dataSource = logFiles.map((file, index) => ({\n      name: file,\n      key: index,\n      createdAt: getCreatedTimeFromFileName(file),\n    }));\n    const columns = [\n      {\n        title: \"Log File\",\n        key: \"name\",\n        dataIndex: \"name\",\n        sorter: (a, b) => a.name.localeCompare(b.name),\n        render: (name) => <a href={`/logs/${tool}?logFile=${name}`}>{name}</a>,\n      },\n      {\n        title: \"CreatedAt\",\n        key: \"createdAt\",\n        dataIndex: \"createdAt\",\n        sorter: (a, b) => a.createdAt - b.createdAt,\n        render: (createdAt) => moment(createdAt).fromNow(),\n      },\n      {\n        title: \"Action\",\n        render: (file) => (\n          <Button\n            danger\n            size=\"small\"\n            onClick={() => deleteLogFile(tool, file.name)}\n          >\n            Delete\n          </Button>\n        ),\n      },\n    ];\n    return (\n      <LayoutPage>\n        <PageHeader\n          className=\"site-page-header\"\n          title={`${logFiles.length} Log Files`}\n        />\n        <Table columns={columns} dataSource={dataSource} />\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ logs }) => ({\n  logFiles: logs.logFiles,\n  logs: logs.logs,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteLogFile: (tool, logFile) => {\n    dispatch(requestDeleteLogFile({ tool, logFile }));\n  },\n  fetchLogs: (tool, logFile) => dispatch(requestLogFile({ tool, logFile })),\n  fetchAllLogFiles: (tool) => dispatch(requestAllLogFiles(tool)),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(LogsPage);\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Layout } from \"antd\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport ErrorBoundary from \"antd/lib/alert/ErrorBoundary\";\nimport TSHeader from \"./components/TSHeader\";\nimport ModelPage from \"./pages/ModelPage\";\nimport DummyPage from './pages/DummyPage';\nimport DataStoragePage from './pages/DataStoragePage';\nimport TestCampaignListPage from \"./pages/TestCampaignListPage\";\nimport ModelListPage from \"./pages/ModelListPage\";\nimport DataRecorderListPage from \"./pages/DataRecorderListPage\";\nimport DataRecorderPage from \"./pages/DataRecorderPage\";\nimport TestCampaignPage from \"./pages/TestCampaignPage\";\nimport TestCaseListPage from \"./pages/TestCaseListPage\";\nimport TestCasePage from \"./pages/TestCasePage\";\nimport DatasetListPage from \"./pages/DatasetListPage\";\nimport DatasetPage from \"./pages/DatasetPage\";\nimport SimulationPage from \"./pages/SimulationPage\";\nimport LogsPage from \"./pages/LogsPage\";\n\nfunction App() {\n  return (\n    <Router>\n      <ErrorBoundary>\n        <Layout className=\"layout\" style={{ height: \"100%\" }}>\n          <TSHeader />\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to=\"/test-campaigns\"/>} />\n            <Route path=\"/test-campaigns/:testCampaignId\">\n              <TestCampaignPage />\n            </Route>\n            <Route path=\"/logs/:tool\">\n              <LogsPage message=\"This is the log file page\"/>\n            </Route>\n            <Route path=\"/test-campaigns\">\n              <TestCampaignListPage />\n            </Route>\n            <Route path=\"/test-cases/:testCaseId\">\n              <TestCasePage/>\n            </Route>\n            <Route path=\"/test-cases\">\n              <TestCaseListPage />\n            </Route>\n            <Route path=\"/data-sets/:datasetId\">\n              <DatasetPage />\n            </Route>\n            <Route path=\"/data-sets\">\n              <DatasetListPage />\n            </Route>\n            <Route path=\"/data-recorders/:dataRecorderId\">\n              <DataRecorderPage />\n            </Route>\n            <Route path=\"/data-recorders\">\n              <DataRecorderListPage />\n            </Route>\n            <Route path=\"/models/:modelId\">\n              <ModelPage />\n            </Route>\n            <Route path=\"/models\">\n              <ModelListPage />\n            </Route>\n            <Route path=\"/data-storage\">\n              <DataStoragePage />\n            </Route>\n            <Route path=\"/simulation\">\n              <SimulationPage />\n            </Route>            \n            <Route path=\"/logs/test-campaigns\">\n              <DummyPage message=\"This is the log file list page of test campaigns\"/>\n            </Route>\n            <Route path=\"/reports/test-campaigns/:fileName\">\n              <DummyPage message=\"This is the reports file page\"/>\n            </Route>\n            <Route path=\"/reports/test-campaigns\">\n              <DummyPage message=\"This is the reports file list page of test campaigns\"/>\n            </Route>\n            <Route path=\"/devopts/\">\n              <DummyPage message=\"This is the devopts page\"/>\n            </Route>\n          </Switch>          \n        </Layout>\n      </ErrorBoundary>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport configStore from \"../../client/src/store\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nconst store = configStore();\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}