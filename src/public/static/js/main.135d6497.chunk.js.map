{"version":3,"sources":["VERSION.js","actions/index.js","utils.js","reducers/modelReducer.js","reducers/requestingReducer.js","reducers/notificationReducer.js","reducers/logsReducer.js","reducers/editingFormReducer.js","reducers/simulationStatusReducer.js","reducers/statsReducer.js","reducers/allModelsReducer.js","reducers/allDataRecordersReducer.js","reducers/dataRecorderReducer.js","reducers/dataRecorderStatusReducer.js","reducers/dataStorageReducer.js","reducers/testCampaignsReducer.js","reducers/devopsReducer.js","reducers/testCasesReducer.js","reducers/datasetsReducer.js","reducers/reportsReducer.js","reducers/index.js","api/index.js","sagas/requestModelSaga.js","sagas/uploadModelSaga.js","sagas/simulationSaga.js","sagas/requestLogsSaga.js","sagas/requestDataRecorderSaga.js","sagas/dataStorageSaga.js","sagas/testCampaignsSaga.js","sagas/testCasesSaga.js","sagas/datasetsSaga.js","sagas/eventsSaga.js","sagas/reportsSaga.js","sagas/devopsSaga.js","sagas/index.js","store/index.js","components/TSHeader/TSHeader.js","components/TSHeader/index.js","components/TSModal/index.js","components/TSModal/TSModal.js","components/FormItems/FormTextAreaItem.js","components/FormItems/FormSelectItem.js","components/FormItems/FormNumberItem.js","components/FormItems/FormTimeRangeItem.js","components/FormItems/FormSwitchItem.js","components/FormItems/FormCheckBoxItems.js","components/FormItems/FormRegularNumberItem.js","components/FormItems/FormEditableTextItem.js","components/FormItems/FormTextNotEditableItem.js","components/FormItems/FormParagraphItem.js","components/FormItems/FormFileUploadItem.js","components/CollapseForm/CollapseForm.js","components/CollapseForm/index.js","components/SensorModal/DataSourceForms/DataSourceForm.js","components/SensorModal/DataSourceForms/EnergyForm.js","components/SensorModal/DataSourceForms/BooleanForm.js","components/SensorModal/DataSourceForms/EnumForm.js","components/SensorModal/DataSourceForms/IntegerFloatForm.js","components/SensorModal/DataSourceForms/MultipleDataSources.js","components/SensorModal/DataGeneratorForm.js","components/SensorModal/SensorModal.js","components/SensorModal/index.js","components/ActuatorModal/ActuatorModal.js","components/ActuatorModal/index.js","components/JSONView/Editor.jsx","components/JSONView/index.js","components/JSONView/JSONView.js","components/TSFooter/TSFooter.js","components/TSFooter/index.js","pages/LayoutPage.js","components/ConnectionConfig/index.js","components/ConnectionConfig/ConnectionConfig.js","pages/ModelPage.js","pages/DataStoragePage.js","pages/TestCampaignListPage.js","pages/ModelListPage.js","pages/DataRecorderListPage.js","pages/DataRecorderPage.js","components/SelectionModal/SelectionModal.js","components/SelectionModal/index.js","pages/TestCampaignPage.js","pages/TestCaseListPage.js","pages/TestCasePage.js","pages/DatasetListPage.js","components/EventModal/EventModal.js","components/EventModal/index.js","components/EventStream/EventStream.js","pages/DatasetPage.js","pages/SimulationPage.js","pages/LogFileContent.js","pages/LogsPage.js","pages/ReportListPage.js","pages/ReportPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","setNotification","createAction","resetNotification","requestAllModels","setAllModels","requestDeleteModel","requestDuplicateModel","deleteModelOK","duplicateModelOK","requestAddNewModel","addNewModelOK","requestUpdateModel","updateModelOK","requestModel","setModel","changeModelName","addThing","deleteThing","addSimulationSensor","addSimulationActuator","deleteSimulationSensor","deleteSimulationActuator","changeStatusSensor","changeStatusActuator","resetModel","uploadModel","uploadModelOK","requestAllDataRecorders","setAllDataRecorders","requestDeleteDataRecorder","requestDuplicateDataRecorder","deleteDataRecorderOK","duplicateDataRecorderOK","requestAddNewDataRecorder","addNewDataRecorderOK","requestUpdateDataRecorder","updateDataRecorderOK","requestDataRecorder","setDataRecorder","changeDataRecorderName","resetDataRecorder","requestStartDataRecorder","requestStopDataRecorder","requestDataRecorderStatus","setDataRecorderStatus","requestAllLogFiles","requestAllLogFilesOK","requestLogFile","requestLogFileOK","requestDeleteLogFile","requestDeleteLogFileOK","showModal","selectDevice","changeStatusThing","selectSensor","selectActuator","requestStats","requestStatsOK","requestDataStorage","requestUpdateDataStorage","setDataStorage","requestTestDataStorageConnection","setDataStorageConnectionStatus","requestAllTestCampaigns","setAllTestCampaigns","setCurrentTestCampaign","requestDeleteTestCampaign","deleteTestCampaignOK","requestAddNewTestCampaign","addNewTestCampaignOK","requestTestCampaign","requestUpdateTestCampaign","updateTestCampaignOK","requestLaunchTestCampaign","requestStopTestCampaign","requestTestCampaignStatus","setTestCampaignRunningStatus","requestAllTestCases","setAllTestCases","setCurrentTestCase","requestDeleteTestCase","deleteTestCaseOK","requestAddNewTestCase","addNewTestCaseOK","requestTestCase","requestUpdateTestCase","updateTestCaseOK","requestAllDatasets","setAllDatasets","setCurrentDataset","requestDeleteDataset","deleteDatasetOK","requestAddNewDataset","addNewDatasetOK","requestDataset","requestUpdateDataset","updateDatasetOK","requestEventsByDatasetId","setEvents","setTotalNumberEvents","requestDeleteEvent","deleteEventOK","requestAddNewEvent","addNewEventOK","requestUpdateEvent","updateEventOK","requestStartSimulation","requestStopSimulation","requestSimulationStatus","setSimulationStatus","requestDevops","requestUpdateDevops","setDevops","requestAllReports","requestReport","setAllReports","setCurrentReport","requestUpdateReport","updateReportOK","requestDeleteReport","deleteReportOK","requestOriginalEvents","setOriginalEvents","requestNewEvents","setNewEvents","updateObjectByPath","obj","path","value","stack","split","length","key","shift","indexOf","array","index","replace","push","lastKey","splice","deepCloneObject","JSON","parse","stringify","addNewElementToArray","newElement","found","id","removeElementFromArray","elmId","isDeleted","console","log","getCreatedTimeFromFileName","fileName","timeString","Date","Number","getQuery","qname","URLSearchParams","window","location","search","get","getLastPath","pathname","lastPath","getObjectId","str","crypto","createHash","update","digest","initState","name","createReducer","produce","draft","model","state","newName","thing","things","newThings","thingID","enable","error","sensor","foundThing","newSensors","sensors","actuator","newActuators","actuators","sensorID","tIndex","actuatorID","type","message","logs","logFiles","logFile","formID","selectedDevice","selectedSensor","selectedActuator","dataStorage","status","stats","models","modelFileName","dupModel","newModel","dataRecorders","dataRecorderFileName","dupDataRecorder","newDataRecorder","dataRecorder","connConfig","connectionStatus","testCampaigns","allTestCampaigns","newTC","newAllTestCampaigns","testCampaignId","testCampaign","currentTestCampaign","runningStatus","devops","testCases","allTestCases","newAllTestCases","testCaseId","testCase","currentTestCase","datasets","allDatasets","newDS","newAllDatasets","currentDataset","dataset","datasetId","events","totalNbEvents","newEvent","eventId","newEvents","event","_id","reports","allReports","reportId","newAllReports","filter","rp","report","currentReport","originalEvents","newReport","rootReducer","combineReducers","allDataRecorders","allDataRecordersReducer","dataRecorderReducer","dataRecorderStatus","dataRecorderStatusReducer","dataStorageReducer","allModels","allModelsReducer","modelReducer","statsReducer","logsReducer","notify","notificationReducer","requesting","requestingReducer","editingForm","editingFormReducer","simulationStatus","simulationStatusReducer","testCampaignsReducer","devopsReducer","testCasesReducer","datasetsReducer","reportsReducer","a","url","fetch","response","json","data","method","result","headers","body","isDuplicated","updateModel","uploadDataRecorder","updateDataRecorder","sendRequestStartDataRecorder","sendRequestStopDataRecorder","sendRequestDataRecorderStatus","sendRequestDataStorage","sendRequestUpdateDataStorage","sendRequestTestDataStorageConnection","sendRequestLogFile","tool","content","sendRequestDeleteLogFile","sendRequestAllLogFiles","files","sendRequestStopSimulation","sendRequestSimulationStatus","sendRequestTestCampaign","tcId","sendRequestUpdateTestCampaign","sendRequestAllTestCampaigns","sendRequestAddNewTestCampaign","sendRequestDeleteTestCampaign","sendRequestDevops","sendRequestUpdateDevops","sendRequestTestCase","sendRequestUpdateTestCase","sendRequestAllTestCases","sendRequestAddNewTestCase","sendRequestDeleteTestCase","sendRequestDataset","sendRequestUpdateDataset","sendRequestAllDatasets","sendRequestAddNewDataset","sendRequestDeleteDataset","sendRequestReport","rpId","sendRequestAllReports","options","topologyFileName","reportToken","query","sendRequestDeleteReport","sendRequestUpdateReport","newScore","sendRequestEvent","sendRequestUpdateEvent","sendRequestEventsByDatasetId","startTime","endTime","page","now","sendRequestAddNewEvent","sendRequestDeleteEvent","sendRequestStartSimulation","newDataset","sendRequestLaunchTestCampaign","sendRequestStopTestCampaign","sendRequestTestCampaignStatus","handleRequestModel","handleRequestDeleteModel","handleRequestDuplicateModel","handleRequestAddNewModel","handleRequestUpdateModel","handleRequestAllModels","watchRequestModel","action","payload","call","put","duplicatedModel","takeEvery","handleSaveModel","watchSaveModel","getModel","select","Error","handleRequestStartSimulation","handleRequestStopSimulation","handleRequestSimulationStatus","watchSimulation","handleRequestAllLogFiles","handleRequestLogFile","handleRequestDeleteLogFile","watchRequestLogs","handleRequestDataRecorder","handleRequestDeleteDataRecorder","handleRequestDuplicateDataRecorder","handleRequestAddNewDataRecorder","handleRequestUpdateDataRecorder","handleRequestStartDataRecorder","handleRequestStopDataRecorder","handleRequestDataRecorderStatus","handleRequestAllDataRecorders","watchRequestDataRecorder","duplicatedDataRecorder","handleRequestDataStorage","handleRequestUpdateDataStorage","handleRequestTestDataStorageConnection","watchRequestDataStorage","newDataStorage","handleRequestTestCampaign","handleRequestUpdateTestCampaign","handleRequestAllTestCampaigns","handleRequestAddNewTestCampaign","handleRequestDeleteTestCampaign","handleRequestLaunchTestCampaign","handleRequestStopTestCampaign","handleRequestTestCampaignStatus","watchTestCampaigns","newTestCampaign","handleRequestTestCase","handleRequestUpdateTestCase","handleRequestAllTestCases","handleRequestAddNewTestCase","handleRequestDeleteTestCase","watchTestCases","newTestCase","handleRequestDataset","handleRequestUpdateDataset","handleRequestAllDatasets","handleRequestAddNewDataset","handleRequestDeleteDataset","watchDatasets","Dataset","handleRequestEvent","handleRequestEventsByDatasetId","handleRequestUpdateEvent","handleRequestAllEvents","handleRequestAddNewEvent","handleRequestDeleteEvent","watchEvents","allEvents","handleRequestOriginalEvents","handleRequestNewEvents","handleRequestReport","handleRequestUpdateReport","handleRequestAllReports","handleRequestDeleteReport","watchReports","handleRequestDevops","handleRequestUpdateDevops","watchDevops","newDevops","rootSaga","all","requestModelSaga","requestDataRecorderSaga","uploadModelSaga","simulationSaga","requestLogsSaga","dataStorageSaga","testCampaignsSaga","devopsSaga","testCasesSaga","datasetsSaga","eventsSaga","reportsSaga","configStore","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","run","Header","Layout","TSHeader","menuLinks","selectedMenu","fullPath","currentPositionIndex","positionIndex","span","href","src","className","alt","style","maxWidth","objectFit","theme","mode","lineHeight","selectedKeys","Item","InteractionOutlined","FolderOpenOutlined","ClusterOutlined","DeploymentUnitOutlined","EyeOutlined","FileTextOutlined","DatabaseOutlined","Component","connect","dispatch","TSModal","visible","title","footer","onCancel","children","FormTextAreaItem","label","defaultValue","onChange","helpText","rules","extra","TextArea","rows","v","target","minWidth","FormSelectItem","map","tid","Option","FormNumberItem","min","max","placeholder","RangePicker","DatePicker","FormTimeRangeItem","moment","showTime","format","dateString","getTime","FormSwitchItem","checked","checkedChildren","unCheckedChildren","FormCheckBoxItem","Group","FormRegularNumberItem","items","grid","gutter","column","dataSource","renderItem","item","size","bordered","dataPath","Text","Typography","FormEditableTextItem","editable","code","FormTextNotEditableItem","copyable","Paragraph","FormParagraphItem","expandable","ellipsis","symbol","FormFileUploadItem","props","fileReader","FileReader","onloadend","onUpload","readAsText","this","uploadButtonLabel","fileType","onClick","inputFileDOM","click","UploadOutlined","ref","input","display","accept","multiple","Panel","Collapse","CollapseForm","active","accordion","margin","defaultActiveKey","header","defaultBehaviours","DataSourceForm","behaviours","required","resourceId","unit","FormCheckBoxItems","concat","EnergyForm","Fragment","dPath","initValue","consumInOnePeriod","low","slowDownRate","BooleanForm","EnumForm","values","defaultValueConstraints","regularMin","regularMax","step","ValueConstraintForm","IntegerFloatForm","withValueConstraints","valueConstraints","MultipleDataSources","sources","source","DataGeneratorForm","dataSpecs","onDataChange","scale","timePeriod","sensorBehaviours","dosAttackSpeedUpRate","timeBeforeFailed","isIPSOFormat","energy","withEnergy","overlay","placement","UpOutlined","SensorModal","sensorData","isChanged","setState","prevState","newData","onOK","onClose","deviceId","reportFormats","saveData","disabled","labelCol","wrapperCol","objectId","topic","reportFormat","replayOptions","speedup","repeat","danger","marginBottom","ActuatorModal","actuatorData","modalID","act","deviceID","modes","tree","view","form","text","Object","allValues","Editor","htmlElementRef","jsonEditor","handleChange","bind","setRef","collapseAll","expandAll","focus","allowedModes","rest","innerRef","htmlElementProps","tag","createEditor","schema","schemaRefs","setSchema","getName","setName","destroy","newProps","set","element","JSONEditor","getText","currentJson","err","React","createElement","defaultProps","history","navigationBar","statusBar","JSONView","ace","Footer","TSFooter","textAlign","marginTop","getFullYear","VERSION","Title","Content","LayoutPage","pageTitle","pageSubTitle","backgroundColor","notification","toUpperCase","description","padding","level","paddingTop","tip","ConnectionConfig","host","port","username","password","ca","cert","dbname","addNewDevice","currentTime","timeToDown","testBroker","protocol","productionBroker","isReplayingStreams","upStreams","downStreams","ModelDeviceItem","onDelete","onDuplicate","changeModalId","selectedModalId","onEnable","defaultChecked","stopPropagation","marginRight","newId","newScale","orientation","newUpStreams","actions","newDownStreams","newDownstreams","reduce","nbSensor","s","newSensor","isFromDatabase","addNewSensor","nbA","newActuator","addNewActuator","ModelPage","isNewModel","tempModel","onModelChange","fetchDataStorage","fetchSimulationStatus","fileData","blob","Blob","URL","createObjectURL","link","document","download","stopSimulation","simId","isRunning","addNewModel","viewType","nbDevices","devices","newDatasetId","tags","addCustomDataStorage","newDev","newDevices","device","newDevice","decodeURI","SwitcherOutlined","exportModel","ExportOutlined","StopOutlined","CaretRightOutlined","position","top","right","deleteSensor","deleteActuator","DataStoragePage","tempDataStorage","isDSChanged","onDataStorageChange","testConnection","updateDataStorage","color","setTimeout","TestCampaignListPage","webhookURL","undefined","evaluationParameters","fetchTestCampaigns","fetchDevops","fetchTestCampaignStatus","testCampaignStatusTimer","setInterval","clearInterval","tc","newTc","testCaseIds","addNewTestCampaign","deleteTestCampaign","updateDevops","launchTestCampaign","stopTestCampaign","columns","render","width","BuildOutlined","duplicateTestCampaign","CopyOutlined","reportFileName","DeleteOutlined","wb","eventType","metricType","threshold","xs","offset","sm","ModelListPage","importNewModel","fetchAllModels","deleteModel","duplicateModel","startSimulation","paddingRight","ClearOutlined","ImportOutlined","trigger","e","preventDefault","DownOutlined","DataRecorderListPage","importNewDataRecorder","fetchAllDataRecorders","fetchDataRecorderStatus","deleteDataRecorder","duplicateDataRecorder","startDataRecorder","stopDataRecorder","recorderId","DataRecorderItem","forward","newTempDataRecorder","DataRecorderPage","isNewDataRecorder","tempDataRecorder","onDataRecorderChange","addNewDataRecorder","recorderStatus","dr","newDataRecorders","startedTime","toLocaleTimeString","SelectionModal","TestCampaignPage","originalId","isNew","showTestCaseModal","fetchTestCampaign","fetchTestCases","newTestCaseIds","selectTC","newDescription","updateTestCampaign","moveTestCaseUp","moveTestCaseDown","removeTestCase","updateId","updateName","updateDescription","updateTestCaseIds","saveTestCampaign","updatedTestCampaign","TestCaseListPage","addNewTestCase","deleteTestCase","duplicateTestCase","TestCasePage","datasetIds","showDatasetModal","dsId","fetchTestCase","fetchModelFiles","fetchDatasets","newDatasetIds","selectDS","newDatasets","newModelFileName","newTags","updateTestCase","ds","sorter","b","createdAt","moveDatasetUp","moveDatasetDown","removeDataset","updateModelFileName","updateTags","updateDatasets","saveTestCase","updatedTestCase","DatasetListPage","lastModified","addNewDataset","deleteDataset","duplicateDataset","EventModal","timestamp","isSensorData","EventStream","activeEventModal","deleteEvent","addNewEvent","updateEvent","sensorTopicFilters","actuatorTopicFilters","eventStreams","viewTime","sensorValues","sensorTopic","actuatorValues","actuatorTopic","dataIndex","ts","filters","onFilter","showValue","changeActiveEventModal","initEvent","DatasetPage","eventPage","fetchEvents","fetchDataset","requestEvents","newSource","addNewdataset","updatedataset","nbEvents","nbSensors","nbActuators","updateSource","toLocaleString","savedataset","updateddataset","SimulationPage","datasetName","datasetDescription","datasetTags","desc","onModelFileNameChange","datasetOptions","onDatasetIdChange","onNewDatasetIdChange","onDatasetNameChange","onDatasetDescriptionChange","onDatasetTagsChange","LogLine","time","LogFileContent","getHours","getMinutes","getSeconds","getDay","getMonth","LogsPage","isLogPage","fetchAllLogFiles","fetchLogs","deleteLogFile","file","localeCompare","fromNow","ReportListPage","fetchReports","deleteReport","originalDatasetId","score","Math","round","ReportPage","calculateScore","fetchReport","updateReport","fetchOriginalEvents","fetchNewEvents","sourceEvents","newTopology","newTestCampaignId","newOriginalDatasetId","newNewDatasetId","saveReport","loadEvents","updatedReport","App","height","exact","to","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.135d6497.chunk.js","sourcesContent":["module.exports = '0.15.0';","import {createAction } from 'redux-act';\n// Notification\nexport const setNotification = createAction('SET_NOTIFICATION');\nexport const resetNotification = createAction('RESET_NOTIFICATION');\n\n// All Models\nexport const requestAllModels = createAction('REQUEST_ALL_MODELS');\nexport const setAllModels = createAction('SET_ALL_MODELS');\nexport const requestDeleteModel = createAction('REQUEST_DELETE_MODEL');\nexport const requestDuplicateModel = createAction('REQUEST_DUPLICATE_MODEL');\nexport const deleteModelOK = createAction('DELETE_MODEL_OK');\nexport const duplicateModelOK = createAction('DUPLICATE_MODEL_OK');\nexport const requestAddNewModel = createAction('REQUEST_ADD_NEW_MODEL');\nexport const addNewModelOK = createAction('ADD_NEW_MODEL_OK');\nexport const requestUpdateModel = createAction('REQUEST_UPDATE_MODEL');\n// Model detail\nexport const updateModelOK = createAction('UPDATE_MODEL_OK');\nexport const requestModel = createAction('REQUEST_MODEL');\nexport const setModel = createAction('SET_MODEL');\n// Model - modification\nexport const changeModelName = createAction('CHANGE_MODEL_NAME');\nexport const addThing = createAction('ADD_THING');\nexport const deleteThing = createAction('DELETE_THING');\nexport const addSimulationSensor = createAction('ADD_SIMULATION_SENSOR');\nexport const addSimulationActuator = createAction('ADD_SIMULATION_ACTUATOR');\nexport const deleteSimulationSensor = createAction('DELETE_SIMULATION_SENSOR');\nexport const deleteSimulationActuator = createAction('DELETE_SIMULATION_ACTUATOR');\nexport const changeStatusSensor = createAction('CHANGE_STATUS_SENSOR');\nexport const changeStatusActuator = createAction('CHANGE_STATUS_ACTUATOR');\nexport const resetModel = createAction('RESET_MODEL');\n// Save Model to Server\nexport const uploadModel = createAction('UPLOAD_MODEL');\nexport const uploadModelOK = createAction('UPLOAD_MODEL_OK');\n\nexport const requestAllDataRecorders = createAction('REQUEST_ALL_DATA_RECORDERS');\nexport const setAllDataRecorders = createAction('SET_ALL_DATA_RECORDERS');\nexport const requestDeleteDataRecorder = createAction('REQUEST_DELETE_DATA_RECORDER');\nexport const requestDuplicateDataRecorder = createAction('REQUEST_DUPLICATE_DATA_RECORDER');\nexport const deleteDataRecorderOK = createAction('DELETE_DATA_RECORDER_OK');\nexport const duplicateDataRecorderOK = createAction('DUPLICATE_DATA_RECORDER_OK');\nexport const requestAddNewDataRecorder = createAction('REQUEST_ADD_NEW_DATA_RECORDER');\nexport const addNewDataRecorderOK = createAction('ADD_NEW_DATA_RECORDER_OK');\nexport const requestUpdateDataRecorder = createAction('REQUEST_UPDATE_DATA_RECORDER');\nexport const updateDataRecorderOK = createAction('UPDATE_DATA_RECORDER_OK');\nexport const requestDataRecorder = createAction('REQUEST_DATA_RECORDER');\nexport const setDataRecorder = createAction('SET_DATA_RECORDER');\nexport const changeDataRecorderName = createAction('CHANGE_DATA_RECORDER_NAME');\nexport const resetDataRecorder = createAction('RESET_DATA_RECORDER');\nexport const requestStartDataRecorder = createAction('REQUEST_START_DATA_RECORDER');\nexport const requestStopDataRecorder = createAction('REQUEST_STOP_DATA_RECORDER');\nexport const requestDataRecorderStatus = createAction('REQUEST_DATA_RECORDER_STATUS');\nexport const setDataRecorderStatus = createAction('SET_DATA_RECORDER_STATUS');\n\n// Control the Simulation\n// export const sendDeployStart = createAction('SEND_DEPLOY_START');\n// export const deployStartOK = createAction('DEPLOY_START_OK');\n// export const sendDeployStop = createAction('SEND_DEPLOY_STOP');\n// export const deployStopOK = createAction('DEPLOY_STOP_OK');\n// export const requestDeployStatus = createAction('REQUEST_DEPLOY_STATUS');\n\n// Control the logs\nexport const requestAllLogFiles = createAction('REQUEST_ALL_LOG_FILES');\nexport const requestAllLogFilesOK = createAction('REQUEST_ALL_LOG_FILES_OK');\nexport const requestLogFile = createAction('REQUEST_LOG_FILE');\nexport const requestLogFileOK = createAction('REQUEST_LOG_FILE_OK');\nexport const requestDeleteLogFile = createAction('REQUEST_DELETE_LOG_FILE');\nexport const requestDeleteLogFileOK = createAction('REQUEST_DELETE_LOG_FILE_OK');\n\n// editing forms\nexport const showModal = createAction('SHOW_MODAL');\nexport const selectDevice = createAction('SELECT_DEVICE');\nexport const changeStatusThing = createAction('CHANGE_STATUS_THING');\nexport const selectSensor = createAction('SELECT_SENSOR');\nexport const selectActuator = createAction('SELECT_ACTUATOR');\nexport const selectDataStorage = createAction('SELECT_DATA_STORAGE');\n\n\n// Statistics\nexport const requestStats = createAction('REQUEST_STATS');\nexport const requestStatsOK = createAction('REQUEST_STATS_OK');\n\n// Data storage\nexport const requestDataStorage = createAction('REQUEST_DATA_STORAGE');\nexport const requestUpdateDataStorage = createAction('REQUEST_UPDATE_DATA_STORAGE');\nexport const setDataStorage = createAction('SET_DATA_STORAGE');\nexport const requestTestDataStorageConnection = createAction('REQUEST_TEST_DATA_STORAGE_CONNECTION');\nexport const setDataStorageConnectionStatus = createAction('SET_DATA_STORAGE_CONNECTION_STATUS');\n\n\n// Test Campaigns\nexport const requestAllTestCampaigns = createAction('REQUEST_ALL_TEST_CAMPAIGNS');\nexport const setAllTestCampaigns = createAction('SET_ALL_TEST_CAMPAIGNS');\nexport const setCurrentTestCampaign = createAction('SET_CURRENT_TEST_CAMPAIGN');\nexport const requestDeleteTestCampaign = createAction('REQUEST_DELETE_TEST_CAMPAIGN');\nexport const deleteTestCampaignOK = createAction('DELETE_TEST_CAMPAIGN_OK');\nexport const requestAddNewTestCampaign = createAction('REQUEST_ADD_NEW_TEST_CAMPAIGN');\nexport const addNewTestCampaignOK = createAction('ADD_NEW_TEST_CAMPAIGN_OK');\nexport const requestTestCampaign = createAction('REQUEST_TEST_CAMPAIGN');\nexport const requestUpdateTestCampaign = createAction('REQUEST_UPDATE_TEST_CAMPAIGN');\nexport const updateTestCampaignOK = createAction('UPDATE_TEST_CAMPAIGN_OK');\n// Manage devops\nexport const requestLaunchTestCampaign = createAction('REQUEST_LAUNCH_TEST_CAMPAIGN');\nexport const requestStopTestCampaign = createAction('REQUEST_STOP_TEST_CAMPAIGN');\nexport const requestTestCampaignStatus = createAction('REQUEST_TEST_CAMPAIGN_STATUS');\nexport const setTestCampaignRunningStatus = createAction('SET_TEST_CAMPAIGN_RUNNING_STATUS');\n\n// Test cases\nexport const requestAllTestCases = createAction('REQUEST_ALL_TEST_CASES');\nexport const setAllTestCases = createAction('SET_ALL_TEST_CASES');\nexport const setCurrentTestCase = createAction('SET_CURRENT_TEST_CASE');\nexport const requestDeleteTestCase = createAction('REQUEST_DELETE_TEST_CASE');\nexport const deleteTestCaseOK = createAction('DELETE_TEST_CASE_OK');\nexport const requestAddNewTestCase = createAction('REQUEST_ADD_NEW_TEST_CASE');\nexport const addNewTestCaseOK = createAction('ADD_NEW_TEST_CASE_OK');\nexport const requestTestCase = createAction('REQUEST_TEST_CASE');\nexport const requestUpdateTestCase = createAction('REQUEST_UPDATE_TEST_CASE');\nexport const updateTestCaseOK = createAction('UPDATE_TEST_CASE_OK');\n\n\n// Dataset\nexport const requestAllDatasets = createAction('REQUEST_ALL_DATA_SETS');\nexport const setAllDatasets = createAction('SET_ALL_DATA_SETS');\nexport const setCurrentDataset = createAction('SET_CURRENT_DATA_SET');\nexport const requestDeleteDataset = createAction('REQUEST_DELETE_DATA_SET');\nexport const deleteDatasetOK = createAction('DELETE_DATA_SET_OK');\nexport const requestAddNewDataset = createAction('REQUEST_ADD_NEW_DATA_SET');\nexport const addNewDatasetOK = createAction('ADD_NEW_DATA_SET_OK');\nexport const requestDataset = createAction('REQUEST_DATA_SET');\nexport const requestUpdateDataset = createAction('REQUEST_UPDATE_DATA_SET');\nexport const updateDatasetOK = createAction('UPDATE_DATA_SET_OK');\n\n// Event\nexport const requestEventsByDatasetId = createAction('REQUEST_EVENTS_BY_DATASET_ID');\nexport const setEvents = createAction('SET_EVENTS');\nexport const setTotalNumberEvents = createAction('SET_TOTAL_NUMBER_EVENTS');\nexport const requestDeleteEvent = createAction('REQUEST_DELETE_EVENT');\nexport const deleteEventOK = createAction('DELETE_EVENT_OK');\nexport const requestAddNewEvent = createAction('REQUEST_ADD_NEW_EVENT');\nexport const addNewEventOK = createAction('ADD_NEW_EVENT_OK');\nexport const requestEvent = createAction('REQUEST_EVENT');\nexport const requestUpdateEvent = createAction('REQUEST_UPDATE_EVENT');\nexport const updateEventOK = createAction('UPDATE_EVENT_OK');\n\n// Simulation\nexport const requestStartSimulation = createAction('REQUEST_START_SIMULATION');\nexport const requestStopSimulation = createAction('REQUEST_STOP_SIMULATION');\nexport const requestSimulationStatus = createAction('REQUEST_SIMULATION_STATUS');\nexport const setSimulationStatus = createAction('SET_SIMULATION_STATUS');\n\n// Devops\nexport const requestDevops = createAction('REQUEST_DEVOPS');\nexport const requestUpdateDevops = createAction('REQUEST_UPDATE_DEVOPS');\nexport const setDevops = createAction('SET_DEVOPS');\n\n\n// Reports\nexport const requestAllReports = createAction('REQUEST_ALL_REPORTS');\nexport const requestReport = createAction('REQUEST_REPORT');\nexport const setAllReports = createAction('SET_ALL_REPORTS');\nexport const setCurrentReport = createAction('SET_CURRENT_REPORT');\nexport const requestUpdateReport = createAction('REQUEST_UPDATE_REPORT');\nexport const updateReportOK = createAction('UPDATE_REPORT_OK');\nexport const requestDeleteReport = createAction('REQUEST_DELETE_REPORT');\nexport const deleteReportOK = createAction('DELETE_REPORT_OK');\nexport const requestOriginalEvents = createAction('REQUEST_ORIGINAL_EVENTS');\nexport const setOriginalEvents = createAction('SET_ORIGINAL_EVENTS');\nexport const requestNewEvents = createAction('REQUEST_NEW_EVENTS');\nexport const setNewEvents = createAction('SET_NEW_EVENTS');","import crypto from 'crypto';\n\n/**\n *\n * @param {Object} obj Object to be updated\n * @param {String} path Path to be updated\n * @param {Value} value the new value to be updated\n */\nconst updateObjectByPath = (obj, path, value) => {\n  let stack = path.split(\".\");\n  while (stack.length > 1) {\n    // Not at the end of the path\n    let key = stack.shift();\n    if (key.indexOf(\"[\") > 0) {\n      // Contains array index\n      const array = key.split(\"[\");\n      key = array[0];\n      let index = array[1].replace(\"]\", \"\");\n      if (!obj[key]) {\n        // Create a new array if it does not exist\n        obj[key] = [];\n      }\n      if (obj[key].length === 0) {\n        // Empty array\n        index = 0;\n      } else if (obj[key].length <= index || index < 0) {\n        // index out of range\n        index = obj[key].length;\n      }\n      if (!obj[key][index]) {\n        obj[key].push({});\n        // throw Error(`ERROR: Invalid data path: ${path} in object ${JSON.stringify(obj)}`);\n      }\n      obj = obj[key][index];\n    } else {\n      if (!obj[key]) {\n        // Create a new path if it does not exist\n        obj[key] = {};\n      }\n      obj = obj[key];\n    }\n  }\n  let lastKey = stack.shift();\n  // At the end of the path\n  if (lastKey.indexOf(\"[\") > 0) {\n    // Contains array index\n    const array = lastKey.split(\"[\");\n    lastKey = array[0];\n    let index = array[1].replace(\"]\", \"\");\n    if (value === null) {\n      // Remove an element\n      if (obj[lastKey] && obj[lastKey][index]) {\n        obj[lastKey].splice(index, 1);\n      }\n    } else {\n      // Add an element\n      if (!obj[lastKey]) {\n        // Create a new array if it does not exist\n        obj[lastKey] = [];\n      }\n      if (obj[lastKey].length === 0) {\n        // Empty array\n        index = 0;\n      } else if (obj[lastKey].length <= index || index < 0) {\n        // index out of range\n        index = obj[lastKey].length;\n      }\n      if (!obj[lastKey][index]) {\n        obj[lastKey].push(value);\n        // throw Error(`ERROR: Invalid data path: ${path} in object ${JSON.stringify(obj)}`);\n      } else {\n        obj[lastKey][index] = value;\n      }\n    }\n  } else {\n    // Not contains array index\n    obj[lastKey] = value;\n  }\n};\n\nconst deepCloneObject = (obj) => JSON.parse(JSON.stringify(obj));\n\n/**\n * Add new element into array\n * @param {Array} array The array to be added\n * @param {Object} newElement New element to be updated or added\n */\nconst addNewElementToArray = (array, newElement) => {\n  let found = false;\n  for (let index = 0; index < array.length; index++) {\n    const element = array[index];\n    if (element.id === newElement.id) {\n      // Found the element - update\n      array[index] = { ...newElement };\n      // array.splice(index, 1);\n      // array.push(newElement);\n      found = true;\n      break;\n    }\n  }\n  if (!found) {\n    array.push(newElement);\n  }\n  return array;\n};\n\nconst removeElementFromArray = (array, elmId) => {\n  let isDeleted = false;\n  for (let index = 0; index < array.length; index++) {\n    const element = array[index];\n    if (element.id === elmId) {\n      array.splice(index, 1);\n      isDeleted = true;\n      break;\n    }\n  }\n  if (!isDeleted) {\n    console.log(`[ERROR] Cannot find the element: ${elmId}`);\n    return null;\n  }\n  return array;\n};\n\nconst getCreatedTimeFromFileName = (fileName) => {\n  const array = fileName.split(\"_\");\n  let timeString = array[array.length - 1].replace(\".log\", \"\");\n  return new Date(Number(timeString));\n};\n\nconst getLastURLPath = (url) => {\n  const array = url.split(\"/\");\n  return array[array.length - 1];\n};\n\nconst isDataGenerator = () => {\n  return window.location.pathname.indexOf(\"data-generator\") === 1;\n};\n\nconst getQuery = (qname) => {\n  const query = new URLSearchParams(window.location.search);\n  return query.get(qname);\n};\n\n/**\n * Get the last path in the URL /this-is-the-last-path?not-this-part\n */\nconst getLastPath = () => {\n  const array = window.location.pathname.split('/');\n  let lastPath = array[array.length - 1];\n  if (lastPath) {\n    lastPath = lastPath.split('?')[0]; // Remove query path\n  }\n  return lastPath;\n}\n\nconst getObjectId = (str) => {\n  return crypto.createHash('md5').update(str).digest('hex');\n};\n\nexport {\n  getQuery,\n  isDataGenerator,\n  getLastURLPath,\n  updateObjectByPath,\n  addNewElementToArray,\n  removeElementFromArray,\n  getCreatedTimeFromFileName,\n  deepCloneObject,\n  getLastPath,\n  getObjectId\n};\n","import { createReducer } from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setModel,\n  resetModel,\n  changeModelName,\n  addThing,\n  deleteThing,\n  changeStatusThing,\n  addSimulationSensor,\n  deleteSimulationSensor,\n  changeStatusSensor,\n  addSimulationActuator,\n  deleteSimulationActuator,\n  changeStatusActuator,\n} from \"../actions\";\nimport { addNewElementToArray, removeElementFromArray } from \"../utils\";\n\nconst initState = { name: \"NewModel\" };\n\nexport default createReducer(\n  {\n    [setModel]: produce((draft, model) => (draft = model)),\n    [resetModel]: state => initState,\n    // modification\n    [changeModelName]: produce((draft, newName) => {\n      draft.name = newName;\n    }),\n    [addThing]: produce((draft, thing) => {\n      if (draft.things) {\n        const newThings = addNewElementToArray(draft.things, thing);\n        draft.things = [...newThings];\n      } else {\n        draft.things = [thing];\n      }\n    }),\n    [deleteThing]: produce((draft, thingID) => {\n      const newThings = removeElementFromArray(draft.things, thingID);\n      if (newThings) draft.things = [...newThings];\n    }),\n    [changeStatusThing]: produce((draft, thingID) => {\n      for (let index = 0; index < draft.things.length; index++) {\n        if (draft.things[index].id === thingID) {\n          draft.things[index].enable = !draft.things[index].enable;\n          return;\n        };\n      }\n      console.error(`[ERROR] Cannot find the thing ${thingID}`);\n    }),\n    [addSimulationSensor]: produce((draft, { thingID, sensor }) => {\n      let foundThing = false;\n      if (draft.things) {\n        for (let index = 0; index < draft.things.length; index++) {\n          if (draft.things[index].id === thingID) {\n            foundThing = true;\n            const newSensors = addNewElementToArray(\n              draft.things[index].sensors,\n              sensor\n            );\n            draft.things[index].sensors = [...newSensors];\n            break;\n          }\n        }\n      }\n\n      if (!foundThing) {\n        if (!draft.sensors) {\n          draft.sensors = [];\n        }\n        // Add to free sensors list\n        const newSensors = addNewElementToArray(draft.sensors, sensor);\n        draft.sensors = [...newSensors];\n      } else {\n        if (draft.sensors) {\n          const newSensors = removeElementFromArray(draft.sensors, sensor.id);\n          if (newSensors) draft.sensors = [...newSensors];\n        }\n      }\n    }),\n    [addSimulationActuator]: produce((draft, { thingID, actuator }) => {\n      let foundThing = false;\n      if (draft.things) {\n        for (let index = 0; index < draft.things.length; index++) {\n          if (draft.things[index].id === thingID) {\n            foundThing = true;\n            const newActuators = addNewElementToArray(\n              draft.things[index].actuators,\n              actuator\n            );\n            draft.things[index].actuators = [...newActuators];\n            break;\n          }\n        }\n      }\n\n      if (!foundThing) {\n        if (!draft.actuators) {\n          draft.actuators = [];\n        }\n        // Add to free actuators list\n        const newActuators = addNewElementToArray(draft.actuators, actuator);\n        draft.actuators = [...newActuators];\n      } else {\n        if (draft.actuators) {\n          const newActuators = removeElementFromArray(\n            draft.actuators,\n            actuator.id\n          );\n          if (newActuators) draft.actuators = [...newActuators];\n        }\n      }\n    }),\n    [deleteSimulationSensor]: produce((draft, { sensorID, thingID }) => {\n      if (!thingID) {\n        // Remove a free sensors\n        const newSensors = removeElementFromArray(draft.sensors, sensorID);\n        if (newSensors) {\n          draft.sensors = [...newSensors];\n        }\n      } else {\n        // Remove sensors from a thing\n        let foundThing = false;\n        for (let index = 0; index < draft.things.length; index++) {\n          if (draft.things[index].id === thingID) {\n            foundThing = true;\n            const newSensors = removeElementFromArray(\n              draft.things[index].sensors,\n              sensorID\n            );\n            if (newSensors) {\n              draft.things[index].sensors = [...newSensors];\n            }\n            break;\n          }\n        }\n        if (!foundThing) {\n          console.log(`[ERROR] Cannot remove ${sensorID} from ${thingID}`);\n        }\n      }\n    }),\n    [changeStatusSensor]: produce((draft, { sensorID, thingID }) => {\n      if (!thingID) {\n        // free sensors\n        if (draft.sensors) {\n          for (let index = 0; index < draft.sensors.length; index++) {\n            if (draft.sensors[index].id === sensorID) {\n              draft.sensors[index].enable = !draft.sensors[index].enable;\n              return;\n            }\n          }\n        }\n        console.log(`[ERROR] Cannot change status of sensor ${sensorID} in ${thingID}`);\n      } else {\n        // Remove sensors from a thing\n        for (let tIndex = 0; tIndex < draft.things.length; tIndex++) {\n          if (draft.things[tIndex].id === thingID) {\n            for (let index = 0; index < draft.things[tIndex].sensors.length; index++) {\n              if (draft.things[tIndex].sensors[index].id === sensorID) {\n                draft.things[tIndex].sensors[index].enable = !draft.things[tIndex].sensors[index].enable;\n                return;\n              }\n            }\n            break;\n          }\n        }\n        console.log(`[ERROR] Cannot change status of sensor ${sensorID} in ${thingID}`);\n      }\n    }),\n    [deleteSimulationActuator]: produce((draft, { actuatorID, thingID }) => {\n      if (!thingID) {\n        // Remove a free actuators\n        const newActuators = removeElementFromArray(\n          draft.actuators,\n          actuatorID\n        );\n        if (newActuators) {\n          draft.actuators = [...newActuators];\n        }\n      } else {\n        // Remove actuators from a thing\n        let foundThing = false;\n        for (let index = 0; index < draft.things.length; index++) {\n          if (draft.things[index].id === thingID) {\n            foundThing = true;\n            const newActuators = removeElementFromArray(\n              draft.things[index].actuators,\n              actuatorID\n            );\n            if (newActuators) {\n              draft.things[index].actuators = [...newActuators];\n            }\n            break;\n          }\n        }\n        if (!foundThing) {\n          console.log(`[ERROR] Cannot remove ${actuatorID} from ${thingID}`);\n        }\n      }\n    }),[changeStatusActuator]: produce((draft, { actuatorID, thingID }) => {\n      if (!thingID) {\n        // free actuator\n        if (draft.actuators) {\n          for (let index = 0; index < draft.actuators.length; index++) {\n            if (draft.actuators[index].id === actuatorID) {\n              draft.actuators[index].enable = !draft.actuators[index].enable;\n              return;\n            }\n          }\n        }\n        console.log(`[ERROR] Cannot change status of actuator ${actuatorID} in ${thingID}`);\n      } else {\n        // Remove sensors from a thing\n        for (let tIndex = 0; tIndex < draft.things.length; tIndex++) {\n          if (draft.things[tIndex].id === thingID) {\n            for (let index = 0; index < draft.things[tIndex].actuators.length; index++) {\n              if (draft.things[tIndex].actuators[index].id === actuatorID) {\n                draft.things[tIndex].actuators[index].enable = !draft.things[tIndex].actuators[index].enable;\n                return;\n              }\n            }\n            break;\n          }\n        }\n        console.log(`[ERROR] Cannot change status of actuator ${actuatorID} in ${thingID}`);\n      }\n    })\n  },\n  initState\n);","import { createReducer } from \"redux-act\";\n\nimport {\n  uploadModelOK,\n  uploadModel,\n  requestModel,\n  setModel,\n  setNotification,\n  requestLogFile,\n  requestLogFileOK,\n  requestAllModels,\n  deleteModelOK,\n  setAllModels,\n  requestDuplicateModel,\n  duplicateModelOK,\n  requestDeleteModel,\n  requestAddNewModel,\n  addNewModelOK,\n  requestUpdateModel,\n  updateModelOK,\n  requestDataStorage,\n  requestUpdateDataStorage,\n  setDataStorage,\n  requestTestDataStorageConnection,\n  setDataStorageConnectionStatus,\n  requestAllDataRecorders,\n  setAllDataRecorders,\n  requestDeleteDataRecorder,\n  deleteDataRecorderOK,\n  requestDuplicateDataRecorder,\n  duplicateDataRecorderOK,\n  requestAddNewDataRecorder,\n  addNewDataRecorderOK,\n  requestUpdateDataRecorder,\n  updateDataRecorderOK,\n  requestDataRecorder,\n  setDataRecorder,\n  changeDataRecorderName,\n  requestStartDataRecorder,\n  requestDataRecorderStatus,\n  setDataRecorderStatus,\n  requestStopDataRecorder,\n  requestStats,\n  requestStatsOK,\n  requestAllTestCampaigns,\n  setAllTestCampaigns,\n  requestDeleteTestCampaign,\n  deleteTestCampaignOK,\n  requestAddNewTestCampaign,\n  addNewTestCampaignOK,\n  requestTestCampaign,\n  setCurrentTestCampaign,\n  requestUpdateTestCampaign,\n  updateTestCampaignOK,\n  requestAllTestCases,\n  setAllTestCases,\n  requestTestCase,\n  setCurrentTestCase,\n  requestDeleteTestCase,\n  deleteTestCaseOK,\n  requestAddNewTestCase,\n  addNewTestCaseOK,\n  requestUpdateTestCase,\n  updateTestCaseOK,\n  requestAllDatasets,\n  setAllDatasets,\n  requestDataset,\n  setCurrentDataset,\n  requestDeleteDataset,\n  deleteDatasetOK,\n  requestAddNewDataset,\n  addNewDatasetOK,\n  requestUpdateDataset,\n  updateDatasetOK,\n  requestEventsByDatasetId,\n  setEvents,\n  requestDeleteEvent,\n  deleteEventOK,\n  requestAddNewEvent,\n  addNewEventOK,\n  requestUpdateEvent,\n  updateEventOK,\n  requestStartSimulation,\n  requestStopSimulation,\n\n\n\n  setSimulationStatus,\n  requestDevops,\n  setDevops,\n  requestUpdateDevops,\n  requestAllReports,\n  setAllReports,\n  requestReport,\n  setCurrentReport,\n  requestUpdateReport,\n  updateReportOK,\n  requestDeleteReport,\n  deleteReportOK,\n  requestOriginalEvents,\n  setOriginalEvents,\n  requestNewEvents,\n  setNewEvents\n} from \"../actions\";\n\nconst initState = false;\n\nexport default createReducer(\n  {\n    [uploadModel]: state => true,\n    [requestModel]: state => true,\n    [requestAllDataRecorders]: state => true,\n    [setAllDataRecorders]: state => false,\n    [requestDeleteDataRecorder]: state => true,\n    [deleteDataRecorderOK]: state => false,\n    [requestDuplicateDataRecorder]: state => true,\n    [duplicateDataRecorderOK]: state => false,\n    [requestAddNewDataRecorder]: state => true,\n    [addNewDataRecorderOK]: state => false,\n    [requestUpdateDataRecorder]: state => true,\n    [updateDataRecorderOK]: state => false,\n    [requestDataRecorder]: state => true,\n    [setDataRecorder]: state => false,\n    [changeDataRecorderName]: state => true,\n    [requestStartDataRecorder]: state => true,\n    [requestStopDataRecorder]: state => true,\n    [requestDataRecorderStatus]: state => true,\n    [setDataRecorderStatus]: state => false,\n    [requestStats]: state => true,\n    [requestStatsOK]: state => false,\n    [requestDataStorage]: state => true,\n    [setDataStorage]: state => false,\n    [requestUpdateDataStorage]: state => true,\n    [requestTestDataStorageConnection]: state => true,\n    [setDataStorageConnectionStatus]: state => false,\n    [setNotification]: state => false,\n    [setModel]: state => false,\n    [uploadModelOK]: state => false,\n    [requestLogFile]: state => true,\n    [requestLogFileOK]: state => false,\n    [requestAllModels]: state => true,\n    [setAllModels]: state => false,\n    [requestDeleteModel]: state => true,\n    [deleteModelOK]: state => false,\n    [requestDuplicateModel]: state => true,\n    [duplicateModelOK]: state => false,\n    [requestAddNewModel]: state => true,\n    [addNewModelOK]: state => false,\n    [requestUpdateModel]: state => true,\n    [updateModelOK]: state => false,\n    [requestAllTestCampaigns]: state => true,\n    [setAllTestCampaigns]: state => false,\n    [requestDeleteTestCampaign]: state => true,\n    [deleteTestCampaignOK]: state => false,\n    [requestAddNewTestCampaign]: state => true,\n    [addNewTestCampaignOK]: state => false,\n    [requestTestCampaign]: state => true,\n    [setCurrentTestCampaign]: state => false,\n    [requestUpdateTestCampaign]: state => true,\n    [updateTestCampaignOK]: state => false,\n    [requestAllTestCases]: state => true,\n    [setAllTestCases]: state => false,\n    [requestTestCase]: state => true,\n    [setCurrentTestCase]: state => false,\n    [requestDeleteTestCase]: state => true,\n    [deleteTestCaseOK]: state => false,\n    [requestAddNewTestCase]: state => true,\n    [addNewTestCaseOK]: state => false,\n    [requestUpdateTestCase]: state => true,\n    [updateTestCaseOK]: state => false,\n    [requestAllDatasets]: state => true,\n    [setAllDatasets]: state => false,\n    [requestDataset]: state => true,\n    [setCurrentDataset]: state => false,\n    [requestDeleteDataset]: state => true,\n    [deleteDatasetOK]: state => false,\n    [requestAddNewDataset]: state => true,\n    [addNewDatasetOK]: state => false,\n    [requestUpdateDataset]: state => true,\n    [updateDatasetOK]: state => false,\n    [requestEventsByDatasetId]: state => true,\n    [setEvents]: state => false,\n    [requestDeleteEvent]: state => true,\n    [deleteEventOK]: state => false,\n    [requestAddNewEvent]: state => true,\n    [addNewEventOK]: state => false,\n    [requestUpdateEvent]: state => true,\n    [updateEventOK]: state => false,\n    [requestStartSimulation]: state => true,\n    [requestStopSimulation]: state => true,\n    // [requestSimulationStatus]: state => true,\n    [setSimulationStatus]: state => false,\n    [requestDevops]: state => true,\n    [requestUpdateDevops]: state => true,\n    [setDevops]: state => false,\n    [requestAllReports]: state => true,\n    [setAllReports]: state => false,\n    [requestReport]: state => true,\n    [setCurrentReport]: state => false,\n    [requestUpdateReport]: state => true,\n    [updateReportOK]: state => false,\n    [requestDeleteReport]: state => true,\n    [deleteReportOK]: state => false,\n    [requestOriginalEvents]: state => true,\n    [setOriginalEvents]: state => false,\n    [requestNewEvents]: state => true,\n    [setNewEvents]: state => false,\n  },\n  initState\n);\n","import { createReducer } from \"redux-act\";\nimport {\n  setNotification,\n  resetNotification,\n  addThing,\n  deleteThing,\n  addSimulationSensor,\n  addSimulationActuator,\n  deleteSimulationSensor,\n  deleteSimulationActuator,\n} from \"../actions\";\n\nexport default createReducer(\n  {\n    [setNotification]: (state, { type, message }) => {\n      if (message !== {}) {\n        return { type, message };\n      } else {\n        return null;\n      }\n    },\n    [resetNotification]: state => null,\n    [addThing]: (state, thing) => ({\n      type: \"success\",\n      message: `Thing ${thing.id} has been added!`\n    }),\n    [deleteThing]: (state, thingID) => ({\n      type: \"success\",\n      message: `Thing ${thingID} has been removed!`\n    }),\n    [addSimulationSensor]: (state, {sensor, thingID}) => ({\n      type: \"success\",\n      message: `Sensor ${sensor.id} has been added ${thingID? `into Thing ${thingID}`: ''}!`\n    }),\n    [deleteSimulationSensor]: (state, {sensorID, thingID}) => ({\n      type: \"success\",\n      message: `Sensor ${sensorID} has been removed${thingID? `from Thing ${thingID}`: ''}!`\n    }),\n    [addSimulationActuator]: (state, {actuator, thingID}) => ({\n      type: \"success\",\n      message: `Actuator ${actuator.id} has been added ${thingID? `into Thing ${thingID}`: ''}!`\n    }),\n    [deleteSimulationActuator]: (state, {actuatorID, thingID}) => ({\n      type: \"success\",\n      message: `Actuator ${actuatorID} has been removed${thingID? `from Thing ${thingID}`: ''}!`\n    })\n  },\n  null\n);\n","import { createReducer } from \"redux-act\";\nimport produce from 'immer';\nimport { requestLogFileOK, requestAllLogFilesOK, requestDeleteLogFileOK } from \"../actions\";\n\nconst initState = {\n  logs: null,\n  logFiles: [],\n};\n\nexport default createReducer(\n  {\n    [requestLogFileOK]: (state, logs) => ({...state, logs}),\n    [requestAllLogFilesOK]: (state, logFiles) => ({...state, logFiles}),\n    [requestDeleteLogFileOK]: produce((draft, logFile) => {\n      const index = draft.logFiles.indexOf(logFile);\n      if (index > - 1) {\n        draft.logFiles.splice(index, 1);\n      }\n    })\n  },\n  initState\n);\n","import { createReducer } from 'redux-act';\nimport { selectDevice, selectSensor, selectActuator, showModal } from '../actions';\n\nconst initState = {\n  formID: null,\n  selectedDevice: null,\n  selectedSensor: null,\n  selectedActuator: null,\n  dataStorage: null\n}\nexport default createReducer({\n  [showModal] : (state, formID) => ({...state, formID}),\n  [selectDevice] : (state, selectedDevice) => ({...state, selectedDevice}),\n  [selectSensor] : (state, selectedSensor) => ({...state, selectedSensor}),\n  [selectActuator] : (state, selectedActuator) => ({...state, selectedActuator})\n}, initState);\n","import { createReducer } from 'redux-act';\nimport { setSimulationStatus } from '../actions';\n\nexport default createReducer({\n  [setSimulationStatus] : (state, status) => status\n}, false);\n","import { createReducer } from \"redux-act\";\nimport { requestStatsOK } from \"../actions\";\n\nconst initState = [];\n\nexport default createReducer(\n  {\n    [requestStatsOK]: (state, stats) => (stats),\n  },\n  initState\n);\n","import {\n  createReducer\n} from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setAllModels,\n  deleteModelOK,\n  duplicateModelOK,\n  addNewModelOK\n} from \"../actions\";\n\nexport default createReducer({\n    [setAllModels]: produce((draft, models) => (draft = models)),\n    [deleteModelOK]: produce((draft, modelFileName) => {\n      const index = draft.indexOf(modelFileName);\n      if (index === -1) {\n        console.error('Cannot find model to delete: ', modelFileName);\n      } else {\n        draft = draft.splice(index, 1);\n      }\n    }),\n    [duplicateModelOK]: produce((draft, dupModel) => draft = [...draft, dupModel]),\n    [addNewModelOK]:produce((draft, newModel) => draft = [...draft, newModel])\n  },\n  []\n);","import {\n  createReducer\n} from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setAllDataRecorders,\n  deleteDataRecorderOK,\n  duplicateDataRecorderOK,\n  addNewDataRecorderOK\n} from \"../actions\";\n\nexport default createReducer({\n    [setAllDataRecorders]: produce((draft, dataRecorders) => (draft = dataRecorders)),\n    [deleteDataRecorderOK]: produce((draft, dataRecorderFileName) => {\n      const index = draft.indexOf(dataRecorderFileName);\n      if (index === -1) {\n        console.error('Cannot find DataRecorder to delete: ', dataRecorderFileName);\n      } else {\n        draft = draft.splice(index, 1);\n      }\n    }),\n    [duplicateDataRecorderOK]: produce((draft, dupDataRecorder) => draft = [...draft, dupDataRecorder]),\n    [addNewDataRecorderOK]:produce((draft, newDataRecorder) => draft = [...draft, newDataRecorder])\n  },\n  []\n);","import { createReducer } from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setDataRecorder,\n  resetDataRecorder,\n  changeDataRecorderName,\n} from \"../actions\";\n\nconst initState = null;\n\nexport default createReducer(\n  {\n    [setDataRecorder]: produce((draft, dataRecorder) => (draft = dataRecorder)),\n    [resetDataRecorder]: state => initState,\n    // modification\n    [changeDataRecorderName]: produce((draft, newName) => {\n      draft.name = newName;\n    })\n  },\n  initState\n);","import { createReducer } from 'redux-act';\nimport { setDataRecorderStatus } from '../actions';\n\nexport default createReducer({\n  [setDataRecorderStatus] : (state, status) => status\n}, null);\n","import {\n  createReducer\n} from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setDataStorage,\n  setDataStorageConnectionStatus\n} from \"../actions\";\n\nconst initState = {\n  connConfig: null,\n  connectionStatus: false\n};\n\nexport default createReducer({\n    [setDataStorage]: produce((draft, dataStorage) => {\n      draft.connConfig = dataStorage;\n    }),\n    [setDataStorageConnectionStatus]: produce((draft, status) => {\n      draft.connectionStatus = status;\n    }),\n  },\n  initState\n);","import {\n  createReducer\n} from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setAllTestCampaigns,\n  setCurrentTestCampaign,\n  deleteTestCampaignOK,\n  addNewTestCampaignOK,\n  setTestCampaignRunningStatus\n} from \"../actions\";\n\nimport { addNewElementToArray, removeElementFromArray } from \"../utils\";\n\nconst initState = {\n  allTestCampaigns: [],\n  currentTestCampaign: 0,\n  runningStatus: null\n};\n\nexport default createReducer({\n    [setAllTestCampaigns]: produce((draft, testCampaigns) => {\n      draft.allTestCampaigns = testCampaigns;\n    }),\n    [addNewTestCampaignOK]: produce((draft, newTC) => {\n      if (draft.allTestCampaigns) {\n        const newAllTestCampaigns = addNewElementToArray(draft.allTestCampaigns, newTC);\n        draft.allTestCampaigns = [...newAllTestCampaigns];\n      } else {\n        draft.allTestCampaigns = [newTC];\n      }\n    }),\n    [deleteTestCampaignOK]: produce((draft, testCampaignId) => {\n      const newAllTestCampaigns = removeElementFromArray(draft.allTestCampaigns, testCampaignId);\n      if (newAllTestCampaigns) draft.allTestCampaigns = [...newAllTestCampaigns];\n    }),\n    [setCurrentTestCampaign]: produce((draft, testCampaign) => {\n      draft.currentTestCampaign = testCampaign;\n    }),\n    [setTestCampaignRunningStatus]: produce((draft, runningStatus) => {\n      draft.runningStatus = runningStatus;\n    }),\n  },\n  initState\n);","import {\n  createReducer\n} from \"redux-act\";\nimport {\n  setDevops,\n} from \"../actions\";\n\nconst initState = null;\n\nexport default createReducer({\n    [setDevops]: (state, devops) => devops,\n  },\n  initState\n);","import {\n  createReducer\n} from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setAllTestCases,\n  setCurrentTestCase,\n  deleteTestCaseOK,\n  addNewTestCaseOK\n} from \"../actions\";\n\nimport { addNewElementToArray, removeElementFromArray } from \"../utils\";\n\nconst initState = {\n  allTestCases: [],\n  currentTestCase: 0\n};\n\nexport default createReducer({\n    [setAllTestCases]: produce((draft, testCases) => {\n      draft.allTestCases = testCases;\n    }),\n    [addNewTestCaseOK]: produce((draft, newTC) => {\n      if (draft.allTestCases) {\n        const newAllTestCases = addNewElementToArray(draft.allTestCases, newTC);\n        draft.allTestCases = [...newAllTestCases];\n      } else {\n        draft.allTestCases = [newTC];\n      }\n    }),\n    [deleteTestCaseOK]: produce((draft, testCaseId) => {\n      const newAllTestCases = removeElementFromArray(draft.allTestCases, testCaseId);\n      if (newAllTestCases) draft.allTestCases = [...newAllTestCases];\n    }),\n    [setCurrentTestCase]: produce((draft, testCase) => {\n      draft.currentTestCase = testCase;\n    }),\n  },\n  initState\n);","import {\n  createReducer\n} from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setAllDatasets,\n  setCurrentDataset,\n  deleteDatasetOK,\n  addNewDatasetOK,\n  setEvents,\n  addNewEventOK,\n  deleteEventOK,\n  updateEventOK,\n  setTotalNumberEvents\n} from \"../actions\";\n\nimport { addNewElementToArray, removeElementFromArray } from \"../utils\";\n\nconst initState = {\n  allDatasets: [],\n  currentDataset: {\n    dataset: null,\n    events:[],\n    totalNbEvents: 0,\n  }\n};\n\nexport default createReducer({\n    [setAllDatasets]: produce((draft, datasets) => {\n      draft.allDatasets = datasets;\n    }),\n    [addNewDatasetOK]: produce((draft, newDS) => {\n      if (draft.allDatasets) {\n        const newAllDatasets = addNewElementToArray(draft.allDatasets, newDS);\n        draft.allDatasets = [...newAllDatasets];\n      } else {\n        draft.allDatasets = [newDS];\n      }\n      draft.currentDataset.dataset = newDS;\n    }),\n    [deleteDatasetOK]: produce((draft, datasetId) => {\n      const newAllDatasets = removeElementFromArray(draft.allDatasets, datasetId);\n      if (newAllDatasets) draft.allDatasets = [...newAllDatasets];\n    }),\n    [setCurrentDataset]: produce((draft, dataset) => {\n      draft.currentDataset.dataset = dataset;\n    }),\n    [setEvents]: produce((draft, events) => {\n      draft.currentDataset.events = [...draft.currentDataset.events, ...events];\n    }),\n    [setTotalNumberEvents]: produce((draft, totalNbEvents) => {\n      draft.currentDataset.totalNbEvents = totalNbEvents;\n    }),\n    [addNewEventOK]: produce((draft, newEvent) => {\n      if (draft) {\n        draft.currentDataset.events.push(newEvent);\n        draft.currentDataset.totalNbEvents += 1;\n      } else {\n        draft.currentDataset.events = [newEvent];\n        draft.currentDataset.totalNbEvents = 1;\n      }\n    }),\n    [deleteEventOK]: produce((draft, eventId) => {\n      const newEvents = [];\n      for (let index = 0; index < draft.currentDataset.events.length; index++) {\n        const event = draft.currentDataset.events[index];\n        if (event._id !== eventId) {\n          newEvents.push(event);\n        } else {\n          draft.currentDataset.totalNbEvents -= 1;\n        }\n      }\n      draft.currentDataset.events = [...newEvents];\n    }),\n    [updateEventOK]: produce((draft, newEvent) => {\n      for (let index = 0; index < draft.currentDataset.events.length; index++) {\n        if (draft.currentDataset.events[index]._id === newEvent._id) {\n          draft.currentDataset.events[index] = {...newEvent};\n        };\n      }\n    })\n  },\n  initState\n);","import {\n  createReducer\n} from \"redux-act\";\nimport produce from \"immer\";\nimport {\n  setAllReports,\n  setCurrentReport,\n  deleteReportOK,\n  updateReportOK,\n  setOriginalEvents,\n  setNewEvents,\n} from \"../actions\";\n\nconst initState = {\n  allReports: [],\n  currentReport: {\n    report: null,\n    originalEvents: [],\n    newEvents: [],\n  }\n};\n\nexport default createReducer({\n    [setAllReports]: produce((draft, reports) => {\n      draft.allReports = reports;\n    }),\n    [deleteReportOK]: produce((draft, reportId) => {\n      const newAllReports = draft.allReports.filter(rp => rp._id!== reportId);\n      draft.allReports = newAllReports;\n    }),\n    [setCurrentReport]: produce((draft, report) => {\n      draft.currentReport.report = report;\n    }),\n    [setOriginalEvents]: produce((draft, events) => {\n      draft.currentReport.originalEvents = [...draft.currentReport.originalEvents, ...events];\n    }),\n    [setNewEvents]: produce((draft, events) => {\n      draft.currentReport.newEvents = [...draft.currentReport.newEvents,...events];\n    }),\n    [updateReportOK]: produce((draft, newReport) => {\n      for (let index = 0; index < draft.allReports.length; index++) {\n        if (draft.allReports[index]._id === newReport._id) {\n          draft.allReports.splice(index,1);\n          break;\n        };\n      }\n      draft.allReports.push(newReport);\n    })\n  },\n  initState\n);","import {\n  combineReducers\n} from 'redux';\n\nimport modelReducer from './modelReducer';\nimport requestingReducer from './requestingReducer';\nimport notificationReducer from './notificationReducer';\nimport logsReducer from './logsReducer';\nimport editingFormReducer from './editingFormReducer';\nimport simulationStatusReducer from './simulationStatusReducer';\nimport statsReducer from './statsReducer';\nimport allModelsReducer from './allModelsReducer';\nimport allDataRecordersReducer from './allDataRecordersReducer';\nimport dataRecorderReducer from './dataRecorderReducer';\nimport dataRecorderStatusReducer from './dataRecorderStatusReducer';\nimport dataStorageReducer from './dataStorageReducer';\nimport testCampaignsReducer from './testCampaignsReducer';\nimport devopsReducer from './devopsReducer';\nimport testCasesReducer from './testCasesReducer';\nimport datasetsReducer from './datasetsReducer';\nimport reportsReducer from './reportsReducer';\n\nconst rootReducer = combineReducers({\n  allDataRecorders: allDataRecordersReducer,\n  dataRecorder: dataRecorderReducer,\n  dataRecorderStatus: dataRecorderStatusReducer,\n  dataStorage: dataStorageReducer,\n  allModels: allModelsReducer,\n  model: modelReducer,\n  stats: statsReducer,\n  logs: logsReducer,\n  notify: notificationReducer,\n  requesting: requestingReducer,\n  editingForm: editingFormReducer,\n  simulationStatus: simulationStatusReducer,\n  testCampaigns: testCampaignsReducer,\n  devops: devopsReducer,\n  testCases: testCasesReducer,\n  datasets: datasetsReducer,\n  reports: reportsReducer\n});\n\nexport default rootReducer;\n","// read and pass the environment variables into reactjs application\n// export const URL = `http://localhost:31057`;\nexport const URL = \"\";\n\n// MODELS\nexport const requestAllModels = async () => {\n  const url = `${URL}/api/models`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.models;\n};\n\nexport const requestDeleteModel = async (modelFileName) => {\n  const url = `${URL}/api/models/${modelFileName}`;\n  const response = await fetch(url, {\n    method: \"DELETE\",\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n};\n\nexport const requestDuplicateModel = async (modelFileName) => {\n  const url = `${URL}/api/models/${modelFileName}`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      isDuplicated: true,\n    }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.modelFileName;\n};\n\nexport const requestModel = async (modelFileName) => {\n  const url = `${URL}/api/models/${modelFileName}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.model;\n};\n\nexport const uploadModel = async (model) => {\n  const url = `${URL}/api/models`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ model }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.modelFileName;\n};\n\nexport const updateModel = async (modelFileName, model) => {\n  const url = `${URL}/api/models/${modelFileName}`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ model }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.modelFileName;\n};\n\n// DATA RECORDERS\nexport const requestAllDataRecorders = async () => {\n  const url = `${URL}/api/data-recorders/models`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataRecorders;\n};\n\nexport const requestDeleteDataRecorder = async (dataRecorderFileName) => {\n  const url = `${URL}/api/data-recorders/models/${dataRecorderFileName}`;\n  const response = await fetch(url, {\n    method: \"DELETE\",\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n};\n\nexport const requestDuplicateDataRecorder = async (dataRecorderFileName) => {\n  const url = `${URL}/api/data-recorders/models/${dataRecorderFileName}`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      isDuplicated: true,\n    }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataRecorderFileName;\n};\n\nexport const requestDataRecorder = async (dataRecorderFileName) => {\n  const url = `${URL}/api/data-recorders/models/${dataRecorderFileName}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataRecorder;\n};\n\nexport const uploadDataRecorder = async (dataRecorder) => {\n  const url = `${URL}/api/data-recorders/models`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ dataRecorder }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataRecorderFileName;\n};\n\nexport const updateDataRecorder = async (\n  dataRecorderFileName,\n  dataRecorder\n) => {\n  const url = `${URL}/api/data-recorders/models/${dataRecorderFileName}`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ dataRecorder }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataRecorderFileName;\n};\n\nexport const sendRequestStartDataRecorder = async (dataRecorderFileName) => {\n  const url = `${URL}/api/data-recorders/start`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ dataRecorderFileName }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.status;\n};\n\nexport const sendRequestStopDataRecorder = async (fileName) => {\n  const url = `${URL}/api/data-recorders/stop/${fileName}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.status;\n};\n\nexport const sendRequestDataRecorderStatus = async () => {\n  const url = `${URL}/api/data-recorders/status`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.status;\n};\n\n// DATA STORAGE\nexport const sendRequestDataStorage = async () => {\n  const url = `${URL}/api/data-storage`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataStorage;\n};\n\nexport const sendRequestUpdateDataStorage = async (dataStorage) => {\n  const url = `${URL}/api/data-storage`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ dataStorage }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataStorage;\n};\n\nexport const sendRequestTestDataStorageConnection = async (dataStorage) => {\n  const url = `${URL}/api/data-storage/test`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.connectionStatus;\n};\n\nexport const sendRequestLogFile = async (tool, logFile) => {\n  const url = `${URL}/api/logs/${tool}/${logFile}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.content;\n};\n\nexport const sendRequestDeleteLogFile = async (tool, logFile) => {\n  const url = `${URL}/api/logs/${tool}/${logFile}`;\n  const response = await fetch(url, {\n    method: \"DELETE\",\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n};\n\nexport const sendRequestAllLogFiles = async (tool) => {\n  const url = `${URL}/api/logs/${tool}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.files;\n};\n\nexport const requestStartDeploy = async (tool, model) => {\n  const url = `${URL}/api/${tool}/deploy`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ model }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.simulationStatus;\n};\n\nexport const sendRequestStopSimulation = async (fileName) => {\n  const url = `${URL}/api/simulation/stop/${fileName}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.simulationStatus;\n};\n\nexport const sendRequestSimulationStatus = async () => {\n  const url = `${URL}/api/simulation/status`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.simulationStatus;\n};\n\n// Test campaigns\nexport const sendRequestTestCampaign = async (tcId) => {\n  const url = `${URL}/api/test-campaigns/${tcId}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.testCampaign;\n};\n\nexport const sendRequestUpdateTestCampaign = async (id, testCampaign) => {\n  const url = `${URL}/api/test-campaigns/${id}`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ testCampaign }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.testCampaign;\n};\n\nexport const sendRequestAllTestCampaigns = async () => {\n  const url = `${URL}/api/test-campaigns`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.testCampaigns;\n};\n\nexport const sendRequestAddNewTestCampaign = async (testCampaign) => {\n  const url = `${URL}/api/test-campaigns`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ testCampaign }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.testCampaign;\n};\n\nexport const sendRequestDeleteTestCampaign = async (testCampaignId) => {\n  const url = `${URL}/api/test-campaigns/${testCampaignId}`;\n  const response = await fetch(url, {\n    method: \"DELETE\",\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n};\n\n// Devops\nexport const sendRequestDevops = async () => {\n  const url = `${URL}/api/devops`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.devops;\n};\n\nexport const sendRequestUpdateDevops = async (devops) => {\n  const url = `${URL}/api/devops`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ devops }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.devops;\n};\n\n// Test cases\nexport const sendRequestTestCase = async (tcId) => {\n  const url = `${URL}/api/test-cases/${tcId}`;\n  const response = await fetch(url);\n  const status = await response.json();\n  if (status.error) {\n    throw status.error;\n  }\n  return status.testCase;\n};\n\nexport const sendRequestUpdateTestCase = async (id, testCase) => {\n  const url = `${URL}/api/test-cases/${id}`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ testCase }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.testCase;\n};\n\nexport const sendRequestAllTestCases = async () => {\n  const url = `${URL}/api/test-cases`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.testCases;\n};\n\nexport const sendRequestAddNewTestCase = async (testCase) => {\n  const url = `${URL}/api/test-cases`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ testCase }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.testCase;\n};\n\nexport const sendRequestDeleteTestCase = async (testCaseId) => {\n  const url = `${URL}/api/test-cases/${testCaseId}`;\n  const response = await fetch(url, {\n    method: \"DELETE\",\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n};\n\n// Dataset\nexport const sendRequestDataset = async (tcId) => {\n  const url = `${URL}/api/data-sets/${tcId}`;\n  const response = await fetch(url);\n  const status = await response.json();\n  if (status.error) {\n    throw status.error;\n  }\n  return status.dataset;\n};\n\nexport const sendRequestUpdateDataset = async (id, dataset) => {\n  const url = `${URL}/api/data-sets/${id}`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ dataset }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataset;\n};\n\nexport const sendRequestAllDatasets = async () => {\n  const url = `${URL}/api/data-sets`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.datasets;\n};\n\nexport const sendRequestAddNewDataset = async (dataset) => {\n  const url = `${URL}/api/data-sets`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ dataset }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.dataset;\n};\n\nexport const sendRequestDeleteDataset = async (datasetId) => {\n  const url = `${URL}/api/data-sets/${datasetId}`;\n  const response = await fetch(url, {\n    method: \"DELETE\",\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n};\n\n// Reports\nexport const sendRequestReport = async (rpId) => {\n  const url = `${URL}/api/reports/${rpId}`;\n  const response = await fetch(url);\n  const status = await response.json();\n  if (status.error) {\n    throw status.error;\n  }\n  return status;\n};\n\nexport const sendRequestAllReports = async (options) => {\n  const { topologyFileName, testCampaignId, reportToken } = options;\n  let query = \"\";\n  if (topologyFileName) {\n    query = `?topologyFileName=${topologyFileName}`;\n    if (testCampaignId) {\n      query += `&testCampaignId=${testCampaignId}`;\n    }\n    if (reportToken) {\n      query += `&reportToken=${reportToken}`;\n    }\n  } else {\n    if (testCampaignId) {\n      query = `?testCampaignId=${testCampaignId}`;\n    }\n    if (reportToken) {\n      query += `&reportToken=${reportToken}`;\n    }\n  }\n\n  const url = `${URL}/api/reports${query}`;\n  const response = await fetch(url);\n  const status = await response.json();\n  if (status.error) {\n    throw status.error;\n  }\n  return status.reports;\n};\n\nexport const sendRequestDeleteReport = async (reportId) => {\n  const url = `${URL}/api/reports/${reportId}`;\n  const response = await fetch(url, {\n    method: \"DELETE\",\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n};\n\nexport const sendRequestUpdateReport = async (id, report, newScore) => {\n  console.log('Update report: ', id, report, newScore);\n  const url = `${URL}/api/reports/${id}`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ report, newScore }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.report;\n};\n\n// Event\nexport const sendRequestEvent = async (tcId) => {\n  const url = `${URL}/api/events/${tcId}`;\n  const response = await fetch(url);\n  const status = await response.json();\n  if (status.error) {\n    throw status.error;\n  }\n  return status.event;\n};\n\nexport const sendRequestUpdateEvent = async (id, event) => {\n  const url = `${URL}/api/events/${id}`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ event }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.event;\n};\n\nexport const sendRequestEventsByDatasetId = async (\n  datasetId,\n  startTime,\n  endTime,\n  page = 0\n) => {\n  const url = `${URL}/api/events?datasetId=${datasetId}&startTime=${\n    startTime ? startTime : 0\n  }&endTime=${endTime ? endTime : Date.now()}&page=${page}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return {totalNbEvents: data.totalNbEvents, events: data.events};\n};\n\nexport const sendRequestAddNewEvent = async (event) => {\n  const url = `${URL}/api/events`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ event }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.event;\n};\n\nexport const sendRequestDeleteEvent = async (eventId) => {\n  const url = `${URL}/api/events/${eventId}`;\n  const response = await fetch(url, {\n    method: \"DELETE\",\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.result;\n};\n\nexport const sendRequestStartSimulation = async (\n  modelFileName,\n  datasetId,\n  newDataset\n) => {\n  const url = `${URL}/api/simulation/start`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      modelFileName,\n      options: {\n        datasetId,\n        newDataset,\n      },\n    }),\n  });\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.simulationStatus;\n};\n\n// Test campaign\nexport const sendRequestLaunchTestCampaign = async () => {\n  const url = `${URL}/api/devops/start`;\n  const response = await fetch(url);\n  const status = await response.json();\n  if (status.error) {\n    throw status.error;\n  }\n  return status.runningStatus;\n};\n\nexport const sendRequestStopTestCampaign = async () => {\n  const url = `${URL}/api/devops/stop`;\n  const response = await fetch(url);\n  const status = await response.json();\n  if (status.error) {\n    throw status.error;\n  }\n  return status.runningStatus;\n};\n\nexport const sendRequestTestCampaignStatus = async () => {\n  const url = `${URL}/api/devops/status`;\n  const response = await fetch(url);\n  const status = await response.json();\n  if (status.error) {\n    throw status.error;\n  }\n  return status.runningStatus;\n};\n","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  requestModel,\n  requestAllModels,\n  requestDeleteModel,\n  requestDuplicateModel,\n  uploadModel,\n  updateModel\n} from '../api';\nimport {\n  setModel,\n  setNotification,\n  setAllModels,  \n  deleteModelOK,  \n  duplicateModelOK,  \n  addNewModelOK,\n  updateModelOK\n} from '../actions';\n\nfunction* handleRequestModel(action) {\n  try {\n    const modelFileName = action.payload;\n    const model = yield call(() => requestModel(modelFileName));\n    yield put(setModel(model));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestDeleteModel(action) {  \n  try {\n    const modelFileName = action.payload;\n    yield call(() => requestDeleteModel(modelFileName));\n    yield put(deleteModelOK(modelFileName));\n    yield put(setNotification({type: 'success', message: `Model ${modelFileName} has been deleted!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestDuplicateModel(action) {  \n  try {\n    const modelFileName = action.payload;\n    const duplicatedModel = yield call(() => requestDuplicateModel(modelFileName));\n    yield put(duplicateModelOK(duplicatedModel));\n    yield put(setNotification({type: 'success', message: `Model ${duplicatedModel} has been created!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestAddNewModel(action) {  \n  try {\n    const model = action.payload;\n    const modelFileName = yield call(() => uploadModel(model));\n    yield put(addNewModelOK(modelFileName));\n    yield put(setNotification({type: 'success', message: `Model ${modelFileName} has been created!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestUpdateModel(action) {  \n  try {\n    const {modelFileName, model} = action.payload;\n    yield call(() => updateModel(modelFileName, model));\n    yield put(updateModelOK(modelFileName));\n    yield put(setNotification({type: 'success', message: `Model ${modelFileName} has been updated!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestAllModels() {\n  try {\n    const models = yield call(() => requestAllModels());\n    yield put(setAllModels(models));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* watchRequestModel() {\n  yield takeEvery('REQUEST_MODEL', handleRequestModel);\n  yield takeEvery('REQUEST_ALL_MODELS', handleRequestAllModels);\n  yield takeEvery('REQUEST_DELETE_MODEL', handleRequestDeleteModel);\n  yield takeEvery('REQUEST_DUPLICATE_MODEL', handleRequestDuplicateModel);\n  yield takeEvery('REQUEST_ADD_NEW_MODEL', handleRequestAddNewModel);\n  yield takeEvery('REQUEST_UPDATE_MODEL', handleRequestUpdateModel);\n}\n\nexport default watchRequestModel;\n","// watcher saga -> actions -> worker saga\nimport { call, put, takeEvery, select } from \"redux-saga/effects\";\n\nimport { uploadModel } from \"../api\";\nimport { uploadModelOK, setNotification } from \"../actions\";\n\nconst getModel = ({ model }) => model;\n\nfunction* handleSaveModel(action) {\n  try {\n    const tool = action.payload ? 'data-generator' : 'simulation';\n    let model = yield select(getModel);\n    if (model) {\n      const data = yield call(() => uploadModel(tool, model));\n      yield put(uploadModelOK(data.data));\n      yield put(setNotification({type: 'success', message: `Model ${model.name} has been updated!`}));\n    } else {\n      throw Error(\"Undefined model\");\n    }\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* watchSaveModel() {\n  yield takeEvery(\"UPLOAD_MODEL\", handleSaveModel);\n}\n\nexport default watchSaveModel;\n","// watcher saga -> actions -> worker saga\nimport { call, put, takeEvery } from \"redux-saga/effects\";\n\nimport {\n  sendRequestStartSimulation,\n  sendRequestStopSimulation,\n  sendRequestSimulationStatus\n} from \"../api\";\nimport {\n  setNotification,\n  setSimulationStatus\n} from \"../actions\";\n\nfunction* handleRequestStartSimulation(action) {\n  try {\n    const {modelFileName, datasetId, newDataset} = action.payload;\n    const status = yield call(() => sendRequestStartSimulation(modelFileName, datasetId, newDataset));\n    yield put(setSimulationStatus(status));\n    yield put(\n      setNotification({\n        type: \"success\",\n        message: `Simulation has been started!`\n      })\n    );\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({ type: \"error\", message: error }));\n  }\n}\n\nfunction* handleRequestStopSimulation(action) {\n  try {\n    const fileName = action.payload;\n    const status = yield call(() => sendRequestStopSimulation(fileName));\n    yield put(setSimulationStatus(status));\n    yield put(\n      setNotification({\n        type: \"success\",\n        message: `Simulation has been stopped!`\n      })\n    );\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({ type: \"error\", message: error }));\n  }\n}\n\nfunction* handleRequestSimulationStatus() {\n  try {\n    const status = yield call(() => sendRequestSimulationStatus());\n    // dispatch data\n    yield put(setSimulationStatus(status));\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({ type: \"error\", message: error }));\n  }\n}\n\nfunction* watchSimulation() {\n  yield takeEvery(\"REQUEST_START_SIMULATION\", handleRequestStartSimulation);\n  yield takeEvery(\"REQUEST_STOP_SIMULATION\", handleRequestStopSimulation);\n  yield takeEvery(\"REQUEST_SIMULATION_STATUS\", handleRequestSimulationStatus);\n}\n\nexport default watchSimulation;\n","// watcher saga -> actions -> worker saga\nimport { call, put, takeEvery } from \"redux-saga/effects\";\n\nimport { sendRequestLogFile, sendRequestAllLogFiles, sendRequestDeleteLogFile } from \"../api\";\nimport { requestLogFileOK, setNotification, requestAllLogFilesOK, requestDeleteLogFileOK } from \"../actions\";\n\nfunction* handleRequestAllLogFiles(action) {\n  try {\n    const tool = action.payload;\n    const logFiles = yield call(() => sendRequestAllLogFiles(tool));\n    yield put(requestAllLogFilesOK(logFiles));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({ type: \"error\", message: error }));\n  }\n}\n\nfunction* handleRequestLogFile(action) {\n  try {\n    const {tool, logFile} = action.payload;\n    const logs = yield call(() => sendRequestLogFile(tool, logFile));\n    yield put(requestLogFileOK(logs));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestDeleteLogFile(action) {\n  try {\n    const {tool, logFile} = action.payload;\n    yield call(() => sendRequestDeleteLogFile(tool, logFile));\n    yield put(requestDeleteLogFileOK(logFile));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* watchRequestLogs() {\n  yield takeEvery('REQUEST_LOG_FILE', handleRequestLogFile);\n  yield takeEvery(\"REQUEST_ALL_LOG_FILES\", handleRequestAllLogFiles);\n  yield takeEvery(\"REQUEST_DELETE_LOG_FILE\", handleRequestDeleteLogFile);\n}\n\nexport default watchRequestLogs;\n","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  requestDataRecorder,\n  requestAllDataRecorders,\n  requestDeleteDataRecorder,\n  requestDuplicateDataRecorder,\n  uploadDataRecorder,\n  updateDataRecorder,\n  sendRequestStartDataRecorder,\n  sendRequestStopDataRecorder,\n  sendRequestDataRecorderStatus\n} from '../api';\nimport {\n  setDataRecorder,\n  setNotification,\n  setAllDataRecorders,\n  deleteDataRecorderOK,\n  duplicateDataRecorderOK,\n  addNewDataRecorderOK,\n  updateDataRecorderOK,\n  setDataRecorderStatus\n} from '../actions';\n\nfunction* handleRequestDataRecorder(action) {\n  try {\n    const dataRecorderFileName = action.payload;\n    const dataRecorder = yield call(() => requestDataRecorder(dataRecorderFileName));\n    yield put(setDataRecorder(dataRecorder));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestDeleteDataRecorder(action) {\n  try {\n    const dataRecorderFileName = action.payload;\n    yield call(() => requestDeleteDataRecorder(dataRecorderFileName));\n    yield put(deleteDataRecorderOK(dataRecorderFileName));\n    yield put(setNotification({type: 'success', message: `DataRecorder ${dataRecorderFileName} has been deleted!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestDuplicateDataRecorder(action) {\n  try {\n    const dataRecorderFileName = action.payload;\n    const duplicatedDataRecorder = yield call(() => requestDuplicateDataRecorder(dataRecorderFileName));\n    yield put(duplicateDataRecorderOK(duplicatedDataRecorder));\n    yield put(setNotification({type: 'success', message: `DataRecorder ${duplicatedDataRecorder} has been created!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestAddNewDataRecorder(action) {\n  try {\n    const dataRecorder = action.payload;\n    const dataRecorderFileName = yield call(() => uploadDataRecorder(dataRecorder));\n    yield put(addNewDataRecorderOK(dataRecorderFileName));\n    yield put(setNotification({type: 'success', message: `DataRecorder ${dataRecorderFileName} has been created!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestUpdateDataRecorder(action) {\n  try {\n    const {dataRecorderFileName, dataRecorder} = action.payload;\n    yield call(() => updateDataRecorder(dataRecorderFileName, dataRecorder));\n    yield put(updateDataRecorderOK(dataRecorderFileName));\n    yield put(setNotification({type: 'success', message: `DataRecorder ${dataRecorderFileName} has been updated!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestStartDataRecorder(action) {\n  try {\n    const dataRecorderFileName = action.payload;\n    const status = yield call(() => sendRequestStartDataRecorder(dataRecorderFileName));\n    yield put(setDataRecorderStatus(status));\n    yield put(setNotification({type: 'success', message: `DataRecorder has been started!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestStopDataRecorder(action) {\n  try {\n    const dataRecorderFileName = action.payload;\n    const status = yield call(() => sendRequestStopDataRecorder(dataRecorderFileName));\n    yield put(setDataRecorderStatus(status));\n    yield put(setNotification({type: 'success', message: `DataRecorder has been stopped!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestDataRecorderStatus() {\n  try {\n    const status = yield call(() => sendRequestDataRecorderStatus());\n    yield put(setDataRecorderStatus(status));\n    // yield put(setNotification({type: 'success', message: `DataRecorder ${dataRecorderFileName} has been started!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestAllDataRecorders() {\n  try {\n    const dataRecorders = yield call(() => requestAllDataRecorders());\n    yield put(setAllDataRecorders(dataRecorders));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* watchRequestDataRecorder() {\n  yield takeEvery('REQUEST_DATA_RECORDER', handleRequestDataRecorder);\n  yield takeEvery('REQUEST_ALL_DATA_RECORDERS', handleRequestAllDataRecorders);\n  yield takeEvery('REQUEST_DELETE_DATA_RECORDER', handleRequestDeleteDataRecorder);\n  yield takeEvery('REQUEST_DUPLICATE_DATA_RECORDER', handleRequestDuplicateDataRecorder);\n  yield takeEvery('REQUEST_ADD_NEW_DATA_RECORDER', handleRequestAddNewDataRecorder);\n  yield takeEvery('REQUEST_UPDATE_DATA_RECORDER', handleRequestUpdateDataRecorder);\n  yield takeEvery('REQUEST_START_DATA_RECORDER', handleRequestStartDataRecorder);\n  yield takeEvery('REQUEST_STOP_DATA_RECORDER', handleRequestStopDataRecorder);\n  yield takeEvery('REQUEST_DATA_RECORDER_STATUS', handleRequestDataRecorderStatus);\n}\n\nexport default watchRequestDataRecorder;\n","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  sendRequestDataStorage,\n  sendRequestUpdateDataStorage,\n  sendRequestTestDataStorageConnection\n} from '../api';\nimport {\n  setNotification,\n  setDataStorage,\n  setDataStorageConnectionStatus\n} from '../actions';\n\nfunction* handleRequestDataStorage() {\n  try {\n    const dataStorage = yield call(() => sendRequestDataStorage());\n    yield put(setDataStorage(dataStorage));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestUpdateDataStorage(action) {  \n  try {\n    const newDataStorage = action.payload;\n    yield call(() => sendRequestUpdateDataStorage(newDataStorage));\n    yield put(setDataStorage(newDataStorage));\n    yield put(setNotification({type: 'success', message: `DataStorage has been updated!`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestTestDataStorageConnection() {  \n  try {\n    const status = yield call(() => sendRequestTestDataStorageConnection());\n    yield put(setDataStorageConnectionStatus(status));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setDataStorageConnectionStatus(false));\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* watchRequestDataStorage() {\n  yield takeEvery('REQUEST_DATA_STORAGE', handleRequestDataStorage);\n  yield takeEvery('REQUEST_UPDATE_DATA_STORAGE', handleRequestUpdateDataStorage);\n  yield takeEvery('REQUEST_TEST_DATA_STORAGE_CONNECTION', handleRequestTestDataStorageConnection);\n}\n\nexport default watchRequestDataStorage;\n","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  sendRequestAllTestCampaigns,\n  sendRequestAddNewTestCampaign,\n  sendRequestDeleteTestCampaign,\n  sendRequestTestCampaign,\n  sendRequestUpdateTestCampaign,\n  sendRequestLaunchTestCampaign,\n  sendRequestStopTestCampaign,\n  sendRequestTestCampaignStatus,\n} from '../api';\nimport {\n  setNotification,\n  setAllTestCampaigns,\n  addNewTestCampaignOK,\n  deleteTestCampaignOK,\n  setCurrentTestCampaign,\n  setTestCampaignRunningStatus\n} from '../actions';\n\nfunction* handleRequestTestCampaign(action) {\n  try {\n    const tcId = action.payload;\n    const testCampaign = yield call(() => sendRequestTestCampaign(tcId));\n    yield put(setCurrentTestCampaign(testCampaign));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestUpdateTestCampaign(action) {\n  try {\n    const {id, testCampaign } = action.payload;\n    const newTestCampaign = yield call(() => sendRequestUpdateTestCampaign(id, testCampaign));\n    yield put(addNewTestCampaignOK(newTestCampaign));\n    yield put(setNotification({\n      type: 'success',\n      message: `A new test campaign ${newTestCampaign.name} has been added`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\n\nfunction* handleRequestAllTestCampaigns() {\n  try {\n    const allTestCampaigns = yield call(() => sendRequestAllTestCampaigns());\n    yield put(setAllTestCampaigns(allTestCampaigns));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestAddNewTestCampaign(action) {\n  try {\n    const testCampaign = action.payload;\n    const newTestCampaign = yield call(() => sendRequestAddNewTestCampaign(testCampaign));\n    yield put(addNewTestCampaignOK(newTestCampaign));\n    yield put(setNotification({\n      type: 'success',\n      message: `A new test campaign ${newTestCampaign.name} has been added`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestDeleteTestCampaign(action) {\n  try {\n    const testCampaignId = action.payload;\n    yield call(() => sendRequestDeleteTestCampaign(testCampaignId));\n    yield put(deleteTestCampaignOK(testCampaignId));\n    yield put(setNotification({\n      type: 'success',\n      message: `Test campaign ${testCampaignId} has been deleted`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestLaunchTestCampaign() {\n  try {\n    const runningStatus = yield call(() => sendRequestLaunchTestCampaign());\n    yield put(setTestCampaignRunningStatus(runningStatus));\n    yield put(setNotification({\n      type: 'success',\n      message: `Test campaign has been started`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestStopTestCampaign() {\n  try {\n    const runningStatus = yield call(() => sendRequestStopTestCampaign());\n    yield put(setTestCampaignRunningStatus(runningStatus));\n    yield put(setNotification({\n      type: 'success',\n      message: `Test campaign has been stopped`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestTestCampaignStatus() {\n  try {\n    const runningStatus = yield call(() => sendRequestTestCampaignStatus());\n    yield put(setTestCampaignRunningStatus(runningStatus));\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* watchTestCampaigns() {\n  yield takeEvery('REQUEST_TEST_CAMPAIGN', handleRequestTestCampaign);\n  yield takeEvery('REQUEST_UPDATE_TEST_CAMPAIGN', handleRequestUpdateTestCampaign);\n  yield takeEvery('REQUEST_ALL_TEST_CAMPAIGNS', handleRequestAllTestCampaigns);\n  yield takeEvery('REQUEST_ADD_NEW_TEST_CAMPAIGN', handleRequestAddNewTestCampaign);\n  yield takeEvery('REQUEST_DELETE_TEST_CAMPAIGN', handleRequestDeleteTestCampaign);\n  yield takeEvery('REQUEST_LAUNCH_TEST_CAMPAIGN', handleRequestLaunchTestCampaign);\n  yield takeEvery('REQUEST_STOP_TEST_CAMPAIGN', handleRequestStopTestCampaign);\n  yield takeEvery('REQUEST_TEST_CAMPAIGN_STATUS', handleRequestTestCampaignStatus);\n}\n\nexport default watchTestCampaigns;","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  sendRequestAllTestCases,\n  sendRequestAddNewTestCase,\n  sendRequestDeleteTestCase,\n  sendRequestTestCase,\n  sendRequestUpdateTestCase\n} from '../api';\nimport {\n  setNotification,\n  setAllTestCases,\n  addNewTestCaseOK,\n  deleteTestCaseOK,\n  setCurrentTestCase,\n} from '../actions';\n\nfunction* handleRequestTestCase(action) {\n  try {\n    const tcId = action.payload;\n    const testCase = yield call(() => sendRequestTestCase(tcId));\n    yield put(setCurrentTestCase(testCase));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestUpdateTestCase(action) {\n  try {\n    const {id, testCase } = action.payload;\n    const newTestCase = yield call(() => sendRequestUpdateTestCase(id, testCase));\n    yield put(addNewTestCaseOK(newTestCase));\n    yield put(setNotification({\n      type: 'success',\n      message: `A new test case ${newTestCase.name} has been added`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\n\nfunction* handleRequestAllTestCases() {\n  try {\n    const allTestCases = yield call(() => sendRequestAllTestCases());\n    yield put(setAllTestCases(allTestCases));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestAddNewTestCase(action) {\n  try {\n    const testCase = action.payload;\n    const newTestCase = yield call(() => sendRequestAddNewTestCase(testCase));\n    yield put(addNewTestCaseOK(newTestCase));\n    yield put(setNotification({\n      type: 'success',\n      message: `A new test case ${newTestCase.name} has been added`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestDeleteTestCase(action) {\n  try {\n    const testCaseId = action.payload;\n    yield call(() => sendRequestDeleteTestCase(testCaseId));\n    yield put(deleteTestCaseOK(testCaseId));\n    yield put(setNotification({\n      type: 'success',\n      message: `Test case ${testCaseId} has been deleted`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* watchTestCases() {\n  yield takeEvery('REQUEST_TEST_CASE', handleRequestTestCase);\n  yield takeEvery('REQUEST_UPDATE_TEST_CASE', handleRequestUpdateTestCase);\n  yield takeEvery('REQUEST_ALL_TEST_CASES', handleRequestAllTestCases);\n  yield takeEvery('REQUEST_ADD_NEW_TEST_CASE', handleRequestAddNewTestCase);\n  yield takeEvery('REQUEST_DELETE_TEST_CASE', handleRequestDeleteTestCase);\n}\n\nexport default watchTestCases;","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  sendRequestAllDatasets,\n  sendRequestAddNewDataset,\n  sendRequestDeleteDataset,\n  sendRequestDataset,\n  sendRequestUpdateDataset\n} from '../api';\nimport {\n  setNotification,\n  setAllDatasets,\n  addNewDatasetOK,\n  deleteDatasetOK,\n  setCurrentDataset,\n} from '../actions';\n\nfunction* handleRequestDataset(action) {\n  try {\n    const tcId = action.payload;\n    const dataset = yield call(() => sendRequestDataset(tcId));\n    yield put(setCurrentDataset(dataset));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestUpdateDataset(action) {\n  try {\n    const {id, Dataset } = action.payload;\n    const newDataset = yield call(() => sendRequestUpdateDataset(id, Dataset));\n    yield put(addNewDatasetOK(newDataset));\n    yield put(setNotification({\n      type: 'success',\n      message: `A new dataset ${newDataset.name} has been added`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\n\nfunction* handleRequestAllDatasets() {\n  try {\n    const allDatasets = yield call(() => sendRequestAllDatasets());\n    yield put(setAllDatasets(allDatasets));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestAddNewDataset(action) {\n  try {\n    const Dataset = action.payload;\n    const newDataset = yield call(() => sendRequestAddNewDataset(Dataset));\n    yield put(addNewDatasetOK(newDataset));\n    yield put(setNotification({\n      type: 'success',\n      message: `A new dataset ${newDataset.name} has been added`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestDeleteDataset(action) {\n  try {\n    const datasetId = action.payload;\n    yield call(() => sendRequestDeleteDataset(datasetId));\n    yield put(deleteDatasetOK(datasetId));\n    yield put(setNotification({\n      type: 'success',\n      message: `Test case ${datasetId} has been deleted`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* watchDatasets() {\n  yield takeEvery('REQUEST_DATA_SET', handleRequestDataset);\n  yield takeEvery('REQUEST_UPDATE_DATA_SET', handleRequestUpdateDataset);\n  yield takeEvery('REQUEST_ALL_DATA_SETS', handleRequestAllDatasets);\n  yield takeEvery('REQUEST_ADD_NEW_DATA_SET', handleRequestAddNewDataset);\n  yield takeEvery('REQUEST_DELETE_DATA_SET', handleRequestDeleteDataset);\n}\n\nexport default watchDatasets;","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  sendRequestEventsByDatasetId,\n  sendRequestAddNewEvent,\n  sendRequestDeleteEvent,\n  sendRequestEvent,\n  sendRequestUpdateEvent\n} from '../api';\nimport {\n  setNotification,\n  setEvents,\n  addNewEventOK,\n  deleteEventOK,\n  updateEventOK,\n  setTotalNumberEvents\n} from '../actions';\n\nfunction* handleRequestEvent(action) {\n  try {\n    const tcId = action.payload;\n    yield call(() => sendRequestEvent(tcId));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestEventsByDatasetId(action) {\n  try {\n    const {datasetId, startTime, endTime, page} = action.payload;\n    const {totalNbEvents, events} = yield call(() => sendRequestEventsByDatasetId(datasetId, startTime, endTime, page));\n    if (totalNbEvents) yield put(setTotalNumberEvents(totalNbEvents));\n    yield put(setEvents(events));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestUpdateEvent(action) {\n  try {\n    const {id, event } = action.payload;\n    yield call(() => sendRequestUpdateEvent(id, event));\n    yield put(updateEventOK(event));\n    yield put(setNotification({\n      type: 'success',\n      message: `The event ${id} has been updated`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\n\nfunction* handleRequestAllEvents() {\n  try {\n    const allEvents = yield call(() => sendRequestEventsByDatasetId());\n    yield put(setEvents(allEvents));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestAddNewEvent(action) {\n  try {\n    const event = action.payload;\n    const newEvent = yield call(() => sendRequestAddNewEvent(event));\n    yield put(addNewEventOK(newEvent));\n    yield put(setNotification({\n      type: 'success',\n      message: `A new event ${newEvent._id} has been added`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* handleRequestDeleteEvent(action) {\n  try {\n    const eventId = action.payload;\n    yield call(() => sendRequestDeleteEvent(eventId));\n    yield put(deleteEventOK(eventId));\n    yield put(setNotification({\n      type: 'success',\n      message: `Event ${eventId} has been deleted`\n    }));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({\n      type: 'error',\n      message: error\n    }));\n  }\n}\n\nfunction* watchEvents() {\n  yield takeEvery('REQUEST_EVENT', handleRequestEvent);\n  yield takeEvery('REQUEST_EVENTS_BY_DATASET_ID', handleRequestEventsByDatasetId);\n  yield takeEvery('REQUEST_UPDATE_EVENT', handleRequestUpdateEvent);\n  yield takeEvery('REQUEST_ALL_EVENTS', handleRequestAllEvents);\n  yield takeEvery('REQUEST_ADD_NEW_EVENT', handleRequestAddNewEvent);\n  yield takeEvery('REQUEST_DELETE_EVENT', handleRequestDeleteEvent);\n}\n\nexport default watchEvents;","// watcher saga -> actions -> worker saga\nimport { call, put, takeEvery } from \"redux-saga/effects\";\n\nimport {\n  sendRequestAllReports,\n  sendRequestReport,\n  sendRequestDeleteReport,\n  sendRequestUpdateReport,\n  sendRequestEventsByDatasetId,\n} from \"../api\";\nimport {\n  setNotification,\n  setCurrentReport,\n  setAllReports,\n  updateReportOK,\n  deleteReportOK,\n  setOriginalEvents,\n  setNewEvents,\n} from \"../actions\";\n\nfunction* handleRequestOriginalEvents(action) {\n  try {\n    const { datasetId, startTime, endTime, page } = action.payload;\n    const { events } = yield call(() =>\n      sendRequestEventsByDatasetId(datasetId, startTime, endTime, page)\n    );\n    yield put(setOriginalEvents(events));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(\n      setNotification({\n        type: \"error\",\n        message: error,\n      })\n    );\n  }\n}\n\nfunction* handleRequestNewEvents(action) {\n  try {\n    const { datasetId, page } = action.payload;\n    const { events } = yield call(() =>\n      sendRequestEventsByDatasetId(datasetId, 0, Date.now(), page)\n    );\n    yield put(setNewEvents(events));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(\n      setNotification({\n        type: \"error\",\n        message: error,\n      })\n    );\n  }\n}\n\nfunction* handleRequestReport(action) {\n  try {\n    const rpId = action.payload;\n    const {report} = yield call(() => sendRequestReport(rpId));\n    yield put(setCurrentReport(report));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(\n      setNotification({\n        type: \"error\",\n        message: error,\n      })\n    );\n  }\n}\n\nfunction* handleRequestUpdateReport(action) {\n  try {\n    const { id, report, newScore } = action.payload;\n    console.log('Update report: ', id, report, newScore);\n    const newReport = yield call(() => sendRequestUpdateReport(id, report, newScore));\n    yield put(updateReportOK(newReport));\n    yield put(setCurrentReport(newReport));\n    yield put(\n      setNotification({\n        type: \"success\",\n        message: `The report ${id} has been updated`,\n      })\n    );\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(\n      setNotification({\n        type: \"error\",\n        message: error,\n      })\n    );\n  }\n}\n\nfunction* handleRequestAllReports(action) {\n  try {\n    const options = action.payload;\n    const allReports = yield call(() => sendRequestAllReports(options));\n    yield put(setAllReports(allReports));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(\n      setNotification({\n        type: \"error\",\n        message: error,\n      })\n    );\n  }\n}\n\nfunction* handleRequestDeleteReport(action) {\n  try {\n    const reportId = action.payload;\n    yield call(() => sendRequestDeleteReport(reportId));\n    yield put(deleteReportOK(reportId));\n    yield put(\n      setNotification({\n        type: \"success\",\n        message: `Report ${reportId} has been deleted`,\n      })\n    );\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(\n      setNotification({\n        type: \"error\",\n        message: error,\n      })\n    );\n  }\n}\n\nfunction* watchReports() {\n  yield takeEvery(\"REQUEST_REPORT\", handleRequestReport);\n  yield takeEvery(\"REQUEST_ORIGINAL_EVENTS\", handleRequestOriginalEvents);\n  yield takeEvery(\"REQUEST_NEW_EVENTS\", handleRequestNewEvents);\n  yield takeEvery(\"REQUEST_UPDATE_REPORT\", handleRequestUpdateReport);\n  yield takeEvery(\"REQUEST_ALL_REPORTS\", handleRequestAllReports);\n  yield takeEvery(\"REQUEST_DELETE_REPORT\", handleRequestDeleteReport);\n}\n\nexport default watchReports;\n","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  sendRequestDevops, sendRequestUpdateDevops\n} from '../api';\nimport {\n  setNotification,\n  setDevops,\n} from '../actions';\n\nfunction* handleRequestDevops() {\n  try {\n    const devops = yield call(() => sendRequestDevops());\n    yield put(setDevops(devops));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* handleRequestUpdateDevops(action) {\n  try {\n    const newDevops = action.payload;\n    yield call(() => sendRequestUpdateDevops(newDevops));\n    yield put(setDevops(newDevops));\n    yield put(setNotification({type: 'success', message: `The dev Opts flow has been updated`}));\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* watchDevops() {\n  yield takeEvery('REQUEST_DEVOPS', handleRequestDevops);\n  yield takeEvery('REQUEST_UPDATE_DEVOPS', handleRequestUpdateDevops);\n}\n\nexport default watchDevops;\n","import { all } from \"redux-saga/effects\";\n\nimport requestModelSaga from \"./requestModelSaga\";\nimport uploadModelSaga from \"./uploadModelSaga\";\nimport simulationSaga from \"./simulationSaga\";\nimport requestLogsSaga from './requestLogsSaga';\nimport requestDataRecorderSaga from \"./requestDataRecorderSaga\";\nimport dataStorageSaga from './dataStorageSaga';\nimport testCampaignsSaga from './testCampaignsSaga';\nimport testCasesSaga from './testCasesSaga';\nimport datasetsSaga from './datasetsSaga';\nimport eventsSaga from './eventsSaga';\nimport reportsSaga from './reportsSaga';\nimport devopsSaga from './devopsSaga';\n\nfunction* rootSaga() {\n  yield all([\n    requestModelSaga(),\n    requestDataRecorderSaga(),\n    uploadModelSaga(),\n    simulationSaga(),\n    requestLogsSaga(),\n    dataStorageSaga(),\n    testCampaignsSaga(),\n    devopsSaga(),\n    testCasesSaga(),\n    datasetsSaga(),\n    eventsSaga(),\n    reportsSaga()\n  ]);\n}\n\nexport default rootSaga;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst configStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(\n    rootReducer,\n    compose(\n      applyMiddleware(sagaMiddleware)\n      ,\n      window.__REDUX_DEVTOOLS_EXTENSION__ ?\n        window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n    ),\n  );\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default configStore;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Layout, Menu, Row, Col } from \"antd\";\nimport {\n  ClusterOutlined, DatabaseOutlined, DeploymentUnitOutlined, InteractionOutlined, FileTextOutlined, FolderOpenOutlined, EyeOutlined,\n} from \"@ant-design/icons\";\n\nimport {\n  setNotification,\n} from \"../../actions\";\nimport \"./styles.css\";\n\nconst { Header } = Layout;\n\nclass TSHeader extends Component {\n  render() {\n    const menuLinks = [\n      '/test-campaigns',\n      '/test-cases',\n      '/models',\n      '/simulation',\n      '/data-recorders',\n      '/data-sets',\n      '/data-storage',\n      '/reports'\n    ];\n    // Calculate the selected menu\n    let selectedMenu = 0;\n    const fullPath = window.location.pathname;\n    let currentPositionIndex = fullPath.length - 1;\n    for (let index = 0; index < menuLinks.length; index++) {\n      const positionIndex = fullPath.indexOf(menuLinks[index]);\n      if ( positionIndex > -1 && positionIndex < currentPositionIndex) {\n        currentPositionIndex = positionIndex;\n        selectedMenu = index;\n      }\n    }\n\n    return (\n      <Header>\n        <Row>\n          <Col span={4}>\n            <a href=\"/\">\n              <img\n                src={'/img/Logo.png'}\n                className=\"logo\"\n                alt=\"Logo\"\n                style={{ maxWidth: \"250px\", objectFit: \"contain\" }}\n              />\n            </a>\n          </Col>\n          <Col span={14} push={6}>\n            <Menu theme=\"light\" mode=\"horizontal\" style={{ lineHeight: \"64px\" }} selectedKeys={`${selectedMenu}`}>\n              <Menu.Item key=\"0\">\n                <a href={menuLinks[0]}>\n                  <InteractionOutlined />\n                  Test Campaign\n                </a>\n              </Menu.Item>\n              <Menu.Item key=\"1\">\n                <a href={menuLinks[1]}>\n                  <FolderOpenOutlined />\n                  Test Case\n                </a>\n              </Menu.Item>\n              <Menu.Item key=\"2\">\n                <a href={menuLinks[2]}>\n                  <ClusterOutlined />\n                  Topology\n                </a>\n              </Menu.Item>\n              <Menu.Item key=\"3\">\n                <a href={menuLinks[3]}>\n                  <DeploymentUnitOutlined />\n                  Simulation\n                </a>\n              </Menu.Item>\n              <Menu.Item key=\"4\">\n                <a href={menuLinks[4]}>\n                  <EyeOutlined />\n                  Data Recorder\n                </a>\n              </Menu.Item>\n              <Menu.Item key=\"5\">\n                <a href={menuLinks[5]}>\n                  <FileTextOutlined />\n                  Data Set\n                </a>\n              </Menu.Item>\n              <Menu.Item key=\"6\">\n                <a href={menuLinks[6]}>\n                  <DatabaseOutlined />\n                  Data Storage\n                </a>\n              </Menu.Item>\n              <Menu.Item key=\"7\">\n                <a href={menuLinks[7]}>\n                  <FileTextOutlined />\n                  Report\n                </a>\n              </Menu.Item>\n            </Menu>\n          </Col>\n        </Row>\n\n      </Header>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ requesting }) => ({\n  requesting,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNotification: ({ type, message }) =>\n    dispatch(setNotification({ type, message })),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(TSHeader);\n","import TSHeader from './TSHeader';\n\nexport default TSHeader;\n","import TSModal from './TSModal';\n\nexport default TSModal;","import React from \"react\";\nimport { Modal } from \"antd\";\nimport \"./style.css\";\n\nconst TSModal = ({ visible, title, footer, onCancel, children }) => (\n  <Modal visible={visible} title={title} footer={footer} onCancel={onCancel}>\n    {children}\n  </Modal>\n);\n\nexport default TSModal;\n","import React from \"react\";\nimport { Form, Input } from \"antd\";\nconst FormTextAreaItem = ({\n  label,\n  defaultValue,\n  onChange,\n  helpText = null,\n  rules=null,\n}) => (\n  <Form.Item label={label} name={label} extra={helpText} rules={rules}>\n    <Input.TextArea\n      rows={4}\n      onChange={(v) => onChange(v.target.value)}\n      style={{ minWidth: 300 }} \n    >\n      {defaultValue}\n    </Input.TextArea>\n  </Form.Item>\n);\n\nexport default FormTextAreaItem;\n","import React from 'react';\nimport { Form, Select } from \"antd\";\n\nconst FormSelectItem = ({label, defaultValue, onChange, options, helpText = null }) => (\n  <Form.Item label={label} extra={helpText}>\n    <Select\n      defaultValue={defaultValue ? defaultValue : (options ? options[0] : null) }\n      onChange={v => onChange( v)}\n      style={{ minWidth: 300 }} \n    >\n      {options.map(tid => (\n        <Select.Option value={tid} key={tid}>{tid}</Select.Option>\n      ))}\n    </Select>\n  </Form.Item>\n)\n\nexport default FormSelectItem;","import React from \"react\";\nimport { Form, InputNumber } from \"antd\";\n\nconst FormNumberItem = ({\n  label,\n  defaultValue,\n  min,\n  max,\n  onChange,\n  placeholder,\n  helpText = null,\n  rules = null,\n}) => (\n  <Form.Item label={label} extra={helpText} rules={rules}>\n    <InputNumber\n      min={min}\n      max={max}\n      defaultValue={defaultValue}\n      onChange={(v) => onChange(v)}\n      placeholder={placeholder}\n    />\n  </Form.Item>\n);\n\nexport default FormNumberItem;\n","import React from \"react\";\nimport { Form, DatePicker } from \"antd\";\nimport moment from 'moment';\n\nconst { RangePicker } = DatePicker;\n\nconst FormTimeRangeItem = ({ label, onChange, defaultValue, helpText = null }) => {\n  let startTime = moment();\n  let endTime = moment();\n  if (defaultValue && defaultValue.length === 2) {\n    startTime = moment(defaultValue[0]);\n    endTime = moment(defaultValue[1]);\n  }\n  return (\n    <Form.Item label={label} extra={helpText}>\n    <RangePicker\n      defaultValue={[startTime, endTime]}\n      showTime={{ format: \"HH:mm\" }}\n      format=\"YYYY-MM-DD HH:mm\"\n      onChange={(value, dateString) =>\n        onChange([\n          new Date(dateString[0]).getTime(),\n          new Date(dateString[1]).getTime()\n        ])\n      }\n    />\n  </Form.Item>\n  )\n};\n\nexport default FormTimeRangeItem;\n","import React from 'react';\nimport { Form, Switch } from \"antd\";\n\nconst FormSwitchItem = ({label, checked, onChange, checkedChildren, unCheckedChildren, helpText = null}) =>(\n  <Form.Item label={label} extra={helpText}>\n    <Switch\n      onChange={v => onChange(v)}\n      checkedChildren={checkedChildren}\n      unCheckedChildren={unCheckedChildren}\n      checked={checked}\n    />\n  </Form.Item>\n);\n\nexport default FormSwitchItem;","import React from \"react\";\nimport { Form, Checkbox } from \"antd\";\n\nconst FormCheckBoxItem = ({ label, defaultValue, onChange, options, helpText = null  }) => (\n  <Form.Item label={label} extra={helpText}>\n    <Checkbox.Group\n      options={options}\n      defaultValue={defaultValue}\n      onChange={onChange}\n    />\n  </Form.Item>\n);\n\nexport default FormCheckBoxItem;\n","import React from \"react\";\nimport { Form, InputNumber, List, Card } from \"antd\";\n\nconst FormRegularNumberItem = ({ label, items, onChange, helpText = null  }) => (\n  <Form.Item label={label} extra={helpText}>\n    <List\n      grid={{ gutter: 16, column: items.length }}\n      dataSource={items}\n      renderItem={(item) => (\n        <List.Item>\n          <Card size=\"small\" bordered={false}  title={item.title}>\n            <InputNumber\n              onChange={(v) => onChange(item.dataPath, v)}\n              defaultValue={item.defaultValue ? item.defaultValue : 0}\n              placeholder={item.title}\n            />\n          </Card>\n        </List.Item>\n      )}\n    />\n  </Form.Item>\n);\n\nexport default FormRegularNumberItem;\n","import React from \"react\";\nimport { Form, Typography } from \"antd\";\nconst { Text } = Typography;\n\nconst FormEditableTextItem = ({ label, defaultValue, onChange, helpText=null }) => (\n  <Form.Item label={label} extra={helpText}>\n      <Text\n        editable={{\n          onChange: (v) => {\n            onChange(v);\n          },\n        }}\n        code\n      >\n        {typeof defaultValue === \"string\" ? defaultValue : JSON.stringify(defaultValue)}\n      </Text>\n  </Form.Item>\n);\n\nexport default FormEditableTextItem;\n","import React from \"react\";\nimport { Form, Typography } from \"antd\";\nconst { Text } = Typography;\n\nconst FormTextNotEditableItem = ({ label, value, helpText = null, copyable = false }) => (\n  <Form.Item label={label} name={label} extra={helpText}>\n    <Text copyable={copyable}>{value}</Text>\n  </Form.Item>\n);\n\nexport default FormTextNotEditableItem;\n","import React from \"react\";\nimport { Form, Typography } from \"antd\";\nconst { Paragraph } = Typography;\nconst FormParagraphItem = ({ label, value, rows = 2, expandable = true }) => (\n  <Form.Item label={label} name={label}>\n    <Paragraph ellipsis={{ rows, expandable, symbol: \"more\" }}>\n      {value}\n    </Paragraph>\n  </Form.Item>\n);\n\nexport default FormParagraphItem;\n","import React, { Component } from \"react\";\nimport {\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport { Button, Form, message } from \"antd\";\n\nclass FormFileUploadItem extends Component {\n  constructor(props) {\n    super(props);\n  }\n  onUpload(files) {\n    const fileReader = new FileReader();\n    fileReader.onloadend = () => {\n      try {\n        this.props.onUpload(fileReader.result);\n      } catch (error) {\n        console.error(error);\n        message.error(`Failed to upload file: ${JSON.stringify(error)}`);\n      }\n    };\n    fileReader.readAsText(files[0]);\n  }\n\n  render() {\n    const {\n      label,\n      uploadButtonLabel = \"Upload\",\n      fileType = \"*\",\n      extra = null,\n    } = this.props;\n    return (\n      <Form.Item name=\"upload\" label={label} extra={extra}>\n        <Button onClick={() => this.inputFileDOM.click()}>\n          <UploadOutlined /> {uploadButtonLabel}\n          <input\n            type=\"file\"\n            onChange={(event) => this.onUpload(event.target.files)}\n            ref={(input) => {\n              this.inputFileDOM = input;\n            }}\n            style={{ display: \"none\" }}\n            accept={fileType}\n            multiple={false}\n          />\n        </Button>\n      </Form.Item>\n    );\n  }\n}\n\nexport default FormFileUploadItem;\n","import React from \"react\";\nimport { Collapse } from \"antd\";\n\nconst { Panel } = Collapse;\n\nconst CollapseForm = ({ title, children, bordered = true, active, extra=null }) => (\n  <Collapse accordion style={{margin: '10px'}} defaultActiveKey={active ? ['1'] : null} bordered={bordered}>\n    <Panel header={title} key=\"1\" extra={extra}>\n      {children}\n    </Panel>\n  </Collapse>\n);\n\nexport default CollapseForm;\n","import CollapseForm from './CollapseForm';\nexport default CollapseForm;","import React from \"react\";\nimport { FormEditableTextItem, FormCheckBoxItems } from \"../../FormItems\";\nimport \"./DataSourceForm.css\";\nimport { Button } from \"antd\";\nimport CollapseForm from \"../../CollapseForm\";\n\nconst defaultBehaviours = [\n  \"AB_FIX_VALUE\",\n  \"AB_INVALID_VALUE\",\n  \"NORMAL_BEHAVIOUR\",\n];\n\nconst DataSourceForm = ({\n  dataPath,\n  defaultValue,\n  onChange,\n  behaviours,\n  children,\n}) => (\n  <CollapseForm title={defaultValue.key}>\n      <FormEditableTextItem\n        label=\"key\"\n        defaultValue={defaultValue.key}\n        onChange={(v) => onChange(`${dataPath}.key`, v)}\n        placeholder=\"Require\"\n        helpText=\"The key or the id to identify this measurement\"\n        rules = {[\n              {\n                required: true,\n                message: \"Key is required!\"\n              }\n            ]}\n      />\n      <FormEditableTextItem\n        label=\"Resource Id\"\n        defaultValue={defaultValue.resourceId}\n        onChange={(v) => onChange(`${dataPath}.resourceId`, v)}\n        placeholder=\"Optional\"\n        helpText=\"The resource id if the report follows the IPSO standard! For example: 5700 - for sensor value\"\n      />\n      <FormEditableTextItem\n        label=\"unit\"\n        defaultValue={defaultValue.unit}\n        onChange={(v) => onChange(`${dataPath}.unit`, v)}\n        placeholder=\"Unit of the measurement\"\n        helpText=\"The unit of this measurement\"\n      />\n      <FormCheckBoxItems\n        label=\"Behaviours\"\n        defaultValue={defaultValue.behaviours}\n        onChange={(v) => onChange(`${dataPath}.behaviours`, v)}\n        options={\n          behaviours ? defaultBehaviours.concat(behaviours) : defaultBehaviours\n        }\n        helpText=\"The abnormal behaviours of the measurement.\"\n      />\n      {children}\n      <Button type=\"danger\" onClick={() => onChange(dataPath, null)}>\n        Remove\n      </Button>\n  </CollapseForm>\n);\n\nexport default DataSourceForm;\n","import React from \"react\";\nimport DataSourceForm from \"./DataSourceForm\";\nimport { FormNumberItem, FormRegularNumberItem } from \"../../FormItems\";\n\nconst EnergyForm = ({ dataPath, defaultValue, onChange }) => (\n  <React.Fragment>\n    <DataSourceForm\n      dataPath={dataPath}\n      defaultValue={defaultValue}\n      onChange={(dPath, v) => onChange(dPath, v)}\n    >\n      <FormNumberItem\n        label=\"Init Value\"\n        min={1}\n        max={65535}\n        defaultValue={defaultValue.initValue}\n        onChange={(v) => onChange(`${dataPath}.initValue`, v)}\n        helpText=\"The initialize energy value!\"\n      />\n      <FormRegularNumberItem\n        label=\"Energy\"\n        items={[\n          {\n            title: \"Consum\",\n            dataPath: `${dataPath}.consumInOnePeriod`,\n            defaultValue: defaultValue.consumInOnePeriod,\n          },\n          {\n            title: \"Low\",\n            dataPath: `${dataPath}.low`,\n            defaultValue: defaultValue.low,\n          },\n          {\n            title: \"Slow Down Rate\",\n            dataPath: `${dataPath}.slowDownRate`,\n            defaultValue: defaultValue.slowDownRate,\n          },\n        ]}\n        onChange={(dPath, v) => onChange(dPath, v)}\n        helpText=\"The energy specification!\"\n      />\n    </DataSourceForm>\n  </React.Fragment>\n);\n\nexport default EnergyForm;\n","import React from \"react\";\nimport DataSourceForm from \"./DataSourceForm\";\nimport { FormSwitchItem } from \"../../FormItems\";\n\nconst BooleanForm = ({ dataPath, defaultValue, onChange }) => (\n  <React.Fragment>\n    <DataSourceForm\n      dataPath={dataPath}\n      defaultValue={defaultValue}\n      onChange={(dPath, v) => onChange(dPath, v)}\n    >\n      <FormSwitchItem\n        label=\"Init Value\"\n        onChange={(v) => onChange(`${dataPath}.initValue`, v)}\n        checked={defaultValue.initValue ? true : false}\n        checkedChildren={\"True\"}\n        unCheckedChildren={\"False\"}\n        helpText=\"Initial value!\"\n      />\n    </DataSourceForm>\n  </React.Fragment>\n);\n\nexport default BooleanForm;\n","import React from \"react\";\nimport DataSourceForm from \"./DataSourceForm\";\nimport { FormSelectItem, FormEditableTextItem } from \"../../FormItems\";\n\nconst EnumForm = ({ dataPath, defaultValue, onChange }) => (\n  <React.Fragment>\n    <DataSourceForm\n      dataPath={dataPath}\n      defaultValue={defaultValue}\n      onChange={(dPath, v) => onChange(dPath, v)}\n    >\n      <FormSelectItem\n        label=\"Init Value\"\n        defaultValue={defaultValue.initValue}\n        onChange={(v) => onChange(`${dataPath}.initValue`, v)}\n        options={defaultValue.values}\n        helpText=\"Initial value!\"\n      />\n      <FormEditableTextItem\n        label=\"Value\"\n        defaultValue={JSON.stringify(defaultValue.values)}\n        onChange={(v) => onChange(`${dataPath}.values`, JSON.parse(v))}\n        placeholder=\"value1, value2, value3\"\n        helpText=\"The list of possible values. Each value should be separated by a comma (,)\"\n        rules = {[\n              {\n                required: true,\n                message: \"Values is required!\"\n              }\n            ]}\n      />\n    </DataSourceForm>\n  </React.Fragment>\n);\n\nexport default EnumForm;\n","import React from \"react\";\nimport DataSourceForm from \"./DataSourceForm\";\nimport {\n  FormNumberItem,\n  FormRegularNumberItem,\n  FormSwitchItem,\n} from \"../../FormItems\";\nimport CollapseForm from '../../CollapseForm';\nconst defaultValueConstraints = {\n  min: 0,\n  max: 100,\n  regularMin: 0,\n  regularMax: 100,\n  step: 2,\n};\nconst ValueConstraintForm = ({ defaultValue, dataPath, onChange }) => (\n  <CollapseForm title={\"Value Constraints\"}>\n    <FormRegularNumberItem\n      label=\"Range\"\n      items={[\n        {\n          title: \"Min\",\n          dataPath: `${dataPath}.min`,\n          defaultValue: defaultValue.min,\n        },\n        {\n          title: \"Max\",\n          dataPath: `${dataPath}.max`,\n          defaultValue: defaultValue.max,\n        },\n      ]}\n      onChange={(dPath, v) => onChange(dPath, v)}\n      helpText=\"The valid value range. For example the humage lifespan can be from 0 - 200\"\n    />\n    <FormRegularNumberItem\n      label=\"Regular Range\"\n      items={[\n        {\n          title: \"Regular Min\",\n          dataPath: `${dataPath}.regularMin`,\n          defaultValue: defaultValue.regularMin,\n        },\n        {\n          title: \"Regular Max\",\n          dataPath: `${dataPath}.regularMax`,\n          defaultValue: defaultValue.regularMax,\n        },\n        {\n          title: \"Step\",\n          dataPath: `${dataPath}.step`,\n          defaultValue: defaultValue.step,\n        },\n      ]}\n      onChange={(dPath, v) => onChange(dPath, v)}\n      helpText=\"The regular value range. For example the teenages age can be from 13-19. The step is the maximum different between 2 reports!\"\n    />\n  </CollapseForm>\n);\n\nconst IntegerFloatForm = ({ dataPath, defaultValue, onChange }) => (\n  <React.Fragment>\n    <DataSourceForm\n      dataPath={dataPath}\n      defaultValue={defaultValue}\n      onChange={(dPath, v) => onChange(dPath, v)}\n      behaviours={[\n        \"AB_VALUE_OUT_OF_RANGE\",\n        \"AB_VALUE_OUT_OF_REGULAR_RANGE\",\n        \"AB_VALUE_CHANGE_OUT_OF_REGULAR_STEP\",\n      ]}\n    >\n      <FormNumberItem\n        label=\"Init Value\"\n        defaultValue={defaultValue.initValue}\n        onChange={(v) => onChange(`${dataPath}.initValue`, v)}\n        helpText=\"Initial value!\"\n      />\n      <FormSwitchItem\n        label=\"Value Constraints\"\n        onChange={(v) => onChange(`${dataPath}.withValueConstraints`, v)}\n        checked={defaultValue.withValueConstraints ? true : false}\n        checkedChildren={\"Enable\"}\n        unCheckedChildren={\"Disable\"}\n        helpText=\"Enable or disable the value constraints specification\"\n      />\n      {defaultValue.withValueConstraints ? (\n        defaultValue.valueConstraints ? (\n          <ValueConstraintForm\n            defaultValue={defaultValue.valueConstraints}\n            dataPath={`${dataPath}.valueConstraints`}\n            onChange={(dPath, v) => onChange(dPath, v)}\n          />\n        ) : (\n          <ValueConstraintForm\n            defaultValue={defaultValueConstraints}\n            dataPath={`${dataPath}.valueConstraints`}\n            onChange={(dPath, v) => onChange(dPath, v)}\n          />\n        )\n      ) : (\n        <React.Fragment></React.Fragment>\n      )}\n    </DataSourceForm>\n  </React.Fragment>\n);\n\nexport default IntegerFloatForm;\n","import React, { Fragment } from \"react\";\nimport BooleanForm from \"./BooleanForm\";\nimport EnumForm from \"./EnumForm\";\nimport IntegerFloatForm from \"./IntegerFloatForm\";\n\nconst MultipleDataSources = ({ dataPath, sources, onChange }) => (\n  <Fragment>\n    {sources.map((source, index) => {\n      if (source) {\n        switch (source.type) {\n          case \"DATA_SOURCE_BOOLEAN\":\n            return <BooleanForm\n              key={index}\n              dataPath={`${dataPath}[${index}]`}\n              defaultValue={source}\n              onChange={(dPath, v) => onChange(dPath, v)}\n            />;\n          case \"DATA_SOURCE_ENUM\":\n            return <EnumForm\n              key={index}\n              dataPath={`${dataPath}[${index}]`}\n              defaultValue={source}\n              onChange={(dPath, v) => onChange(dPath, v)}\n            />;\n          case \"DATA_SOURCE_INTEGER\":\n          case \"DATA_SOURCE_FLOAT\":\n            return <IntegerFloatForm\n              key={index}\n              dataPath={`${dataPath}[${index}]`}\n              defaultValue={source}\n              onChange={(dPath, v) => onChange(dPath, v)}\n            />;\n        }\n      }\n    })}\n  </Fragment>\n);\nexport default MultipleDataSources;\n","import React from \"react\";\nimport {\n  FormNumberItem,\n  FormCheckBoxItems,\n  FormSwitchItem,\n} from \"../FormItems\";\n\nimport EnergyForm from \"./DataSourceForms/EnergyForm\";\nimport MultipleDataSources from \"./DataSourceForms/MultipleDataSources\";\nimport { Button, Divider, Dropdown, Menu } from \"antd\";\nimport { UpOutlined } from \"@ant-design/icons\";\n\nconst initEnergy = () => ({\n  type: \"DATA_SOURCE_ENERGY\",\n  key: \"battery\",\n  resourceId: \"battery-01\",\n  initValue: 1500,\n  unit: \"mA\",\n  behaviours: [],\n  low: 1000,\n  slowDownRate: 2,\n  consumInOnePeriod: 200,\n});\n\nconst initBoolean = () => ({\n  type: \"DATA_SOURCE_BOOLEAN\",\n  key: \"your-boolean-data-key\",\n  resourceId: \"boolean-measure-id\",\n  initValue: true,\n  unit: \"\",\n  behaviours: [],\n});\n\nconst initEnum = () => ({\n  type: \"DATA_SOURCE_ENUM\",\n  key: \"your-enum-data-key\",\n  resourceId: \"enum-measure-id\",\n  initValue: \"value1\",\n  unit: \"\",\n  behaviours: [],\n  values: [\"value1\", \"value2\"],\n});\n\nconst initInteger = () => ({\n  type: \"DATA_SOURCE_INTEGER\",\n  key: \"your-integer-data-key\",\n  resourceId: \"integer-measure-id\",\n  initValue: 10,\n  unit: \"\",\n  behaviours: [],\n  valueConstraints: {\n    min: 0,\n    max: 100,\n    regularMin: 20,\n    regularMax: 80,\n    step: 1,\n  },\n});\n\nconst initFloat = () => ({\n  type: \"DATA_SOURCE_FLOAT\",\n  key: \"your-float-data-key\",\n  resourceId: \"float-measure-id\",\n  initValue: 10.0,\n  unit: \"\",\n  behaviours: [],\n  valueConstraints: {\n    min: 0,\n    max: 100,\n    regularMin: 20,\n    regularMax: 80,\n    step: 1,\n  },\n});\n\nconst DataGeneratorForm = ({ dataPath, dataSpecs, onDataChange }) => (\n  <React.Fragment>\n    <FormNumberItem\n      label=\"Number of Instance\"\n      min={1}\n      max={1000000}\n      placeholder=\"Number of instances\"\n      defaultValue={dataSpecs.scale ? dataSpecs.scale : 1}\n      onChange={(v) => onDataChange(`${dataPath}.scale`, v)}\n      helpText=\"The number of device with the same configuration. The id of device will be indexed automatically!\"\n    />\n    <FormNumberItem\n      label=\"Time Internal (in seconds)\"\n      min={1}\n      max={65535}\n      defaultValue={dataSpecs.timePeriod ? dataSpecs.timePeriod : 5}\n      onChange={(v) => onDataChange(`${dataPath}.timePeriod`, v)}\n      helpText=\"The time period to define the publishing data frequency\"\n      rules={[\n        {\n          required: true,\n          message: \"Time internal is required!\",\n        },\n      ]}\n    />\n\n    <FormCheckBoxItems\n      label=\"Sensor Behaviours\"\n      defaultValue={dataSpecs.sensorBehaviours}\n      onChange={(v) => onDataChange(`${dataPath}.sensorBehaviours`, v)}\n      options={[\n        \"AB_LOW_ENERGY\",\n        \"AB_OUT_OF_ENERGY\",\n        \"AB_NODE_FAILED\",\n        \"AB_DOS_ATTACK\",\n        \"AB_SLOW_DOS_ATTACK\",\n        \"NORMAL_BEHAVIOUR\",\n      ]}\n      helpText=\"The possible behaviours of the sensor\"\n    />\n    {dataSpecs.sensorBehaviours.indexOf(\"AB_DOS_ATTACK\") > -1 && (\n      <FormNumberItem\n        label=\"Speedup rate\"\n        min={1}\n        max={100}\n        defaultValue={dataSpecs.dosAttackSpeedUpRate}\n        onChange={(v) => onDataChange(`${dataPath}.dosAttackSpeedUpRate`, v)}\n        helpText=\"The speedup rate in DDOS attack. Define how many time faster the sensor will publish data compare to normal condition\"\n      />\n    )}\n    {dataSpecs.sensorBehaviours.indexOf(\"AB_NODE_FAILED\") > -1 && (\n      <FormNumberItem\n        label=\"Time Before Failed (seconds)\"\n        min={1}\n        max={65535}\n        defaultValue={dataSpecs.timeBeforeFailed}\n        onChange={(v) => onDataChange(`${dataPath}.timeBeforeFailed`, v)}\n        helpText=\"The time before this device going to be failed!\"\n      />\n    )}\n    <FormSwitchItem\n      label=\"IP Smart Object Format\"\n      onChange={(v) => onDataChange(`${dataPath}.isIPSOFormat`, v)}\n      checked={dataSpecs.isIPSOFormat ? true : false}\n      checkedChildren={\"Enable\"}\n      unCheckedChildren={\"Disable\"}\n      helpText=\"Change the data report to IP Smart Object format\"\n    />\n    <Divider>\n      <h3>Measurements</h3>\n    </Divider>\n    <FormSwitchItem\n      label=\"Energy Measurement\"\n      onChange={(v) => {\n        onDataChange(`${dataPath}.withEnergy`, v);\n        if (v && !dataSpecs.energy) {\n          onDataChange(`${dataPath}.energy`, initEnergy());\n        }\n      }}\n      checked={dataSpecs.withEnergy ? true : false}\n      checkedChildren={\"Enable\"}\n      unCheckedChildren={\"Disable\"}\n      helpText=\"Enable or disable the energy measurement for this device\"\n    />\n    {dataSpecs.withEnergy && (\n      <EnergyForm\n        dataPath={`${dataPath}.energy`}\n        defaultValue={dataSpecs.energy ? dataSpecs.energy : initEnergy()}\n        onChange={(dPath, v) => onDataChange(dPath, v)}\n      />\n    )}\n    <MultipleDataSources\n      dataPath={`${dataPath}.sources`}\n      sources={dataSpecs.sources ? dataSpecs.sources : []}\n      onChange={(dPath, v) => onDataChange(dPath, v)}\n    />\n    <Dropdown\n      overlay={\n        <Menu>\n          <Menu.Item\n            key=\"1\"\n            onClick={() => {\n              const index = dataSpecs.sources.length;\n              const dPath = `${dataPath}.sources[${index}]`;\n              onDataChange(dPath, initBoolean());\n            }}\n          >\n            Boolean Data Type\n          </Menu.Item>\n          <Menu.Item\n            key=\"2\"\n            onClick={() => {\n              const index = dataSpecs.sources.length;\n              const dPath = `${dataPath}.sources[${index}]`;\n              onDataChange(dPath, initEnum());\n            }}\n          >\n            Enum Data Type\n          </Menu.Item>\n          <Menu.Item\n            key=\"3\"\n            onClick={() => {\n              const index = dataSpecs.sources.length;\n              const dPath = `${dataPath}.sources[${index}]`;\n              onDataChange(dPath, initInteger());\n            }}\n          >\n            Integer Data Type\n          </Menu.Item>\n          <Menu.Item\n            key=\"4\"\n            onClick={() => {\n              const index = dataSpecs.sources.length;\n              const dPath = `${dataPath}.sources[${index}]`;\n              onDataChange(dPath, initFloat());\n            }}\n          >\n            Float Data Type\n          </Menu.Item>\n        </Menu>\n      }\n      placement=\"topLeft\"\n    >\n      <Button type=\"primary\" style={{ margin: \"20px\" }}>\n        Add New Measure <UpOutlined />\n      </Button>\n    </Dropdown>\n  </React.Fragment>\n);\n\nexport default DataGeneratorForm;\n","import React, { Component, Fragment } from \"react\";\nimport TSModal from \"../TSModal\";\nimport { Form, Button } from \"antd\";\nimport {\n  FormSwitchItem,\n  FormEditableTextItem,\n  FormTextNotEditableItem,\n  FormSelectItem,\n  FormTimeRangeItem,\n  FormNumberItem,\n} from \"../FormItems\";\n\nimport { updateObjectByPath } from \"../../utils\";\nimport DataGeneratorForm from \"./DataGeneratorForm\";\nimport CollapseForm from \"../CollapseForm\";\n\nclass SensorModal extends Component {\n  constructor(props) {\n    super(props);\n    const { sensorData } = props;\n    this.state = {\n      sensorData,\n      isChanged: false,\n    };\n  }\n\n  onDataChange(dataPath, value) {\n    this.setState((prevState) => {\n      const newData = { ...prevState };\n      updateObjectByPath(newData, dataPath, value);\n      return { ...newData, isChanged: true };\n    });\n  }\n\n  saveData() {\n    const { sensorData } = this.state;\n    this.props.onOK(sensorData);\n    this.props.onClose();\n  }\n\n  render() {\n    const { sensorData, isChanged } = this.state;\n    const { enable, onClose, deviceId } = this.props;\n    if (!sensorData) return null;\n    const reportFormats = [\"PLAIN_DATA\", \"JSON_OBJECT\", \"IPSO_FORMAT\"];\n    const reportFormatHelpTexts = [\n      \"Report only the value of the sensor. The value will be in array if the sensor has multiple measurements\",\n      \"Report the value of the sensor in JSON Object format, with the keys are defined in the description of the sensor\",\n      \"Report the value of the sensor in JSON Object and follow the IPSO format, with the keys are defined in the description of the sensor\",\n    ];\n    return (\n      <TSModal\n        title={`Sensor ${sensorData.name}`}\n        visible={enable}\n        onCancel={() => onClose()}\n        footer={[\n          <Button key=\"cancel\" onClick={() => onClose()}>\n            Cancel\n          </Button>,\n          <Button\n            key=\"ok\"\n            type=\"primary\"\n            onClick={() => this.saveData()}\n            disabled={isChanged ? false : true}\n          >\n            OK\n          </Button>,\n        ]}\n      >\n        <Form\n          labelCol={{\n            span: 6,\n          }}\n          wrapperCol={{\n            span: 12,\n          }}\n        >\n          <FormTextNotEditableItem label=\"Device\" value={deviceId} />\n          <FormEditableTextItem\n            label=\"Id\"\n            defaultValue={sensorData.id}\n            onChange={(v) => this.onDataChange(\"sensorData.id\", v)}\n            placeholder=\"Identify of the device\"\n            helpText=\"The identify of the device\"\n            rules={[\n              {\n                required: true,\n                message: \"Id is required!\",\n              },\n            ]}\n          />\n          <FormEditableTextItem\n            label=\"Object Id\"\n            defaultValue={sensorData.objectId}\n            onChange={(v) => this.onDataChange(\"sensorData.objectId\", v)}\n            placeholder=\"Identify of the type of device (IPSO Standard)\"\n            helpText=\"The identify of the device type based on IPSO format. For example 3313 - for temperature\"\n          />\n          <FormEditableTextItem\n            label=\"Name\"\n            defaultValue={sensorData.name}\n            onChange={(v) => this.onDataChange(\"sensorData.name\", v)}\n            helpText=\"The name of the device\"\n          />\n          <FormEditableTextItem\n            label=\"Topic\"\n            defaultValue={sensorData.topic}\n            onChange={(v) => this.onDataChange(\"sensorData.topic\", v)}\n            helpText=\"The topic to which the sensor will publish data!\"\n          />\n          <FormSwitchItem\n            label=\"Enable\"\n            onChange={(v) => this.onDataChange(\"sensorData.enable\", v)}\n            checked={sensorData.enable ? true : false}\n            checkedChildren={\"On\"}\n            unCheckedChildren={\"Off\"}\n            helpText=\"Enable or disable this device from the simulation\"\n          />\n          <FormSelectItem\n            label=\"Report Format\"\n            defaultValue={reportFormats[sensorData.reportFormat]}\n            helpText={reportFormatHelpTexts[sensorData.reportFormat]}\n            options={reportFormats}\n            onChange={(v) =>\n              this.onDataChange(\n                \"sensorData.reportFormat\",\n                reportFormats.indexOf(v)\n              )\n            }\n          />\n          <FormSelectItem\n            label=\"Data Source\"\n            defaultValue={sensorData.dataSource}\n            options={[\n              \"DATA_SOURCE_DATASET\",\n              \"DATA_SOURCE_GENERATOR\",\n              \"DATA_SOURCE_RECORDER\",\n            ]}\n            onChange={(v) => this.onDataChange(\"sensorData.dataSource\", v)}\n          />\n          {sensorData.dataSource === \"DATA_SOURCE_DATASET\" && (\n            <Fragment>\n              {sensorData.replayOptions ? (\n                <CollapseForm title=\"Replay Options\">\n                  <FormTimeRangeItem\n                    label=\"Time Range\"\n                    defaultValue={[\n                      sensorData.replayOptions.startTime\n                        ? sensorData.replayOptions.startTime\n                        : Date.now() - 5 * 60 * 1000,,\n                      sensorData.replayOptions.endTime\n                        ? sensorData.replayOptions.endTime\n                        : Date.now(),\n                    ]}\n                    onChange={(v) => {\n                      this.onDataChange(\n                        `sensorData.replayOptions.startTime`,\n                        v[0]\n                      );\n                      this.onDataChange(\n                        `sensorData.replayOptions.endTime`,\n                        v[1]\n                      );\n                    }}\n                    helpText=\"The time range when the data should be replayed.\"\n                  />\n                  <FormNumberItem\n                    label=\"Speedup\"\n                    min={0.01}\n                    max={100}\n                    defaultValue={\n                      sensorData.replayOptions.speedup\n                        ? sensorData.replayOptions.speedup\n                        : 1\n                    }\n                    onChange={(v) =>\n                      this.onDataChange(`sensorData.replayOptions.speedup`, v)\n                    }\n                    helpText=\"The replaying speedup (0.01 - 100)!\"\n                  />\n                  <FormSwitchItem\n                    label=\"Repeat\"\n                    onChange={(v) =>\n                      this.onDataChange(`sensorData.replayOptions.repeat`, v)\n                    }\n                    checked={sensorData.replayOptions.repeat ? true : false}\n                    checkedChildren={\"Repeat\"}\n                    unCheckedChildren={\"No Repeat\"}\n                    helpText=\"Repeatly replaying the data\"\n                  />\n                  <Button\n                    danger\n                    onClick={() =>\n                      this.onDataChange(\"sensorData.replayOptions\", null)\n                    }\n                  >\n                    Delete Replaying Options\n                  </Button>\n                </CollapseForm>\n              ) : (\n                <Button\n                style={{marginBottom: 10}}\n                  onClick={() =>\n                    this.onDataChange(\"sensorData.replayOptions\", {\n                      startTime: 0,\n                      endTime: Date.now(),\n                      repeat: false,\n                      speedup: 1,\n                    })\n                  }\n                >\n                  Set Replaying Options\n                </Button>\n              )}\n            </Fragment>\n          )}\n          <DataGeneratorForm\n            dataPath={\"sensorData.dataSpecs\"}\n            dataSpecs={sensorData.dataSpecs}\n            onDataChange={(dataPath, value) =>\n              this.onDataChange(dataPath, value)\n            }\n          />\n        </Form>\n      </TSModal>\n    );\n  }\n}\n\nexport default SensorModal;\n","import SensorModal from './SensorModal';\nimport './style.css';\nexport default SensorModal;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport TSModal from \"../TSModal\";\nimport {\n  addSimulationActuator,\n  showModal,\n  selectActuator,\n} from \"../../actions\";\nimport { Form, Button } from \"antd\";\nimport {\n  updateObjectByPath,\n} from \"../../utils\";\nimport {\n  FormTextNotEditableItem,\n  FormNumberItem,\n  FormSwitchItem,\n  FormEditableTextItem,\n} from \"../FormItems\";\n\nclass ActuatorModal extends Component {\n  constructor(props) {\n    super(props);\n    const { actuatorData } = props;\n    this.state = {\n      actuatorData,\n      isChanged: false\n    };\n  }\n\n  onDataChange(dataPath, value) {\n    this.setState((prevState) => {\n      const newData = { ...prevState };\n      updateObjectByPath(newData, dataPath, value);\n      return { ...newData, isChanged: true };\n    });\n  }\n\n  saveData() {\n    const {actuatorData} = this.state;\n    this.props.onOK({actuatorData});\n    this.props.onClose();\n  }\n\n  render() {\n    const { actuatorData, isChanged } = this.state;\n    if (!actuatorData) return null;\n    const { deviceId, onClose, enable} = this.props;\n    return (\n      <TSModal\n        title={\"Actuator\"}\n        visible={enable}\n        onCancel={() => onClose()}\n        footer={\n          [<Button key=\"cancel\" onClick={() => onClose()}>\n          Cancel\n        </Button>,\n        <Button key=\"ok\" type=\"primary\" onClick={() => this.saveData()} disabled={isChanged? false:true}>\n          OK\n        </Button>]\n        }\n      >\n        <Form\n          labelCol={{\n            span: 6,\n          }}\n          wrapperCol={{\n            span: 12,\n          }}\n        >\n        <FormTextNotEditableItem label=\"Device\" value={deviceId} />\n          <FormEditableTextItem\n            label=\"Id\"\n            defaultValue={actuatorData.id}\n            onChange={(v) => this.onDataChange(\"actuatorData.id\", v)}\n            helpText=\"The identify of the actuator\"\n            rules = {[\n              {\n                required: true,\n                message: \"Id is required!\"\n              }\n            ]}\n          />\n          <FormEditableTextItem\n            label=\"Object Id\"\n            defaultValue={actuatorData.objectId}\n            onChange={(v) => this.onDataChange(\"actuatorData.objectId\", v)}\n            placeholder=\"Identify of device type (IP Smart Object Format)\"\n            helpText=\"The identify of the device type based on IPSO format. For example 3313 - for temperature\"\n          />\n          <FormEditableTextItem\n            label=\"Name\"\n            defaultValue={actuatorData.name}\n            onChange={(v) => this.onDataChange(\"actuatorData.name\", v)}\n            helpText=\"The actuator's name\"\n          />\n          <FormNumberItem\n            label=\"Number of Instance\"\n            min={1}\n            max={1000000}\n            placeholder=\"Number of instances\"\n            defaultValue={actuatorData.scale ? actuatorData.scale : 1}\n            onChange={(v) => this.onDataChange(\"actuatorData.scale\", v)}\n            helpText=\"The number of actuators with the same configuration. The id of the generated actuator will be indexed automatically\"\n          />\n          <FormEditableTextItem\n            label=\"Topic\"\n            defaultValue={actuatorData.topic}\n            onChange={(v) => this.onDataChange(\"actuatorData.topic\", v)}\n            helpText=\"The MQTT/STOMP topic on which the actuator will be listening to receive actuated data\"\n          />\n          <FormSwitchItem\n            label=\"Enable\"\n            onChange={(v) => this.onDataChange(\"actuatorData.enable\", v)}\n            checked={actuatorData.enable ? true : false}\n            checkedChildren={\"On\"}\n            unCheckedChildren={\"Off\"}\n            helpText=\"Enable or disable this actuator from the simulation\"\n          />\n        </Form>\n      </TSModal>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ editingForm, model }) => ({\n  formID: editingForm.formID,\n  selectedActuator: editingForm.selectedActuator,\n  model,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  showModal: (modalID) => dispatch(showModal(modalID)),\n  selectActuator: (act) => dispatch(selectActuator(act)),\n  addSimulationActuator: (deviceID, data) =>\n    dispatch(addSimulationActuator({ deviceID, actuator: data })),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(ActuatorModal);\n","import ActuatorModal from './ActuatorModal';\nimport './style.css';\nexport default ActuatorModal;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport JSONEditor from 'jsoneditor/dist/jsoneditor-minimalist';\nimport 'jsoneditor/dist/jsoneditor.css';\n\n/**\n * @typedef {{\n * tree: string,\n * view: string,\n * form: string,\n * code: string,\n * text: string,\n * allValues: Array<string>\n * }} TJsonEditorModes\n */\nconst modes = {\n    tree: 'tree',\n    view: 'view',\n    form: 'form',\n    code: 'code',\n    text: 'text'\n};\n\nconst values = Object.values(modes);\n\nmodes.allValues = values;\n\n/**\n * @type {object}\n * @property {object} [value]\n * @property {string} [mode='tree'] - Set the editor mode.\n * @property {string} [name=undefined] - Initial field name for the root node\n * @property {object} [schema] - Validate the JSON object against a JSON schema.\n * @property {object} [schemaRefs] - Schemas that are referenced using\n * the $ref property\n * @property {Function} [onChange] - Set a callback function\n * triggered when the contents of the JSONEditor change.\n * Called without parameters. Will only be triggered on changes made by the user.\n * Return new json.\n * @property {Function} [onError] - Set a callback function triggered when an error occurs.\n * Invoked with the error as first argument.\n * The callback is only invoked for errors triggered by a users action,\n * like switching from code mode to tree mode or clicking\n * the Format button whilst the editor doesn't contain valid JSON.\n * @property {Function} [onModeChange] - Set a callback function\n * triggered right after the mode is changed by the user.\n * @property {object} [ace] - Provide a version of the Ace editor.\n * Only applicable when mode is code\n * @property {object} [ajv] - Provide a instance of ajv,\n * the library used for JSON schema validation.\n * @property {string} [theme] - Set the Ace editor theme,\n * uses included 'ace/theme/jsoneditor' by default.\n * @property {boolean} [history=false] - Enables history,\n * adds a button Undo and Redo to the menu of the JSONEditor. Only applicable when\n * mode is 'tree' or 'form'\n * @property {boolean} [navigationBar=true] - Adds navigation bar to the menu\n * the navigation bar visualize the current position on the\n * tree structure as well as allows breadcrumbs navigation.\n * @property {boolean} [statusBar=true] - Adds status bar to the buttom of the editor\n * the status bar shows the cursor position and a count of the selected characters.\n * Only applicable when mode is 'code' or 'text'.\n * @property {boolean} [search=true] - Enables a search box in\n * the upper right corner of the JSONEditor.\n * @property {Array<string>} [allowedModes] - Create a box in the editor menu where\n * the user can switch between the specified modes.\n * @property {(string|PropTypes.elementType)} [tag='div'] - Html element, or react element to render\n * @property {object} [htmlElementProps] - html element custom props\n * @property {Function} [innerRef] - callback to get html element reference\n */\nexport default class Editor extends Component {\n    constructor(props) {\n        super(props);\n\n        this.htmlElementRef = null;\n        this.jsonEditor = null;\n\n        this.handleChange = this.handleChange.bind(this);\n        this.setRef = this.setRef.bind(this);\n        this.collapseAll = this.collapseAll.bind(this);\n        this.expandAll = this.expandAll.bind(this);\n        this.focus = this.focus.bind(this);\n    }\n\n    componentDidMount() {\n        const {\n            allowedModes,\n            innerRef,\n            htmlElementProps,\n            tag,\n            onChange,\n            ...rest\n        } = this.props;\n\n        this.createEditor({\n            ...rest,\n            modes: allowedModes\n        });\n    }\n\n    // eslint-disable-next-line react/sort-comp\n    componentDidUpdate({\n        allowedModes,\n        schema,\n        name,\n        theme,\n        schemaRefs,\n        innerRef,\n        htmlElementProps,\n        tag,\n        onChange,\n        ...rest\n    }) {\n        if (this.jsonEditor) {\n            if (theme !== this.props.theme) {\n                this.createEditor({\n                    ...rest,\n                    theme,\n                    modes: allowedModes\n                });\n            } else {\n                if (schema !== this.props.schema\n                    || schemaRefs !== this.props.schemaRefs\n                ) {\n                    this.jsonEditor.setSchema(schema, schemaRefs);\n                }\n\n                if (name !== this.jsonEditor.getName()) {\n                    this.jsonEditor.setName(name);\n                }\n            }\n        }\n    }\n\n    shouldComponentUpdate({ htmlElementProps }) {\n        return htmlElementProps !== this.props.htmlElementProps;\n    }\n\n    componentWillUnmount() {\n        if (this.jsonEditor) {\n            this.jsonEditor.destroy();\n            this.jsonEditor = null;\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (this.props.value !== newProps.value) {\n            this.jsonEditor.set(newProps.value);\n        }\n    }\n\n    setRef(element) {\n        this.htmlElementRef = element;\n        if (this.props.innerRef) {\n            this.props.innerRef(element);\n        }\n    }\n\n    createEditor({ value, ...rest }) {\n        if (this.jsonEditor) {\n            this.jsonEditor.destroy();\n        }\n\n        this.jsonEditor = new JSONEditor(this.htmlElementRef, {\n            onChange: this.handleChange,\n            ...rest\n        });\n\n        this.jsonEditor.set(value);\n    }\n\n    handleChange() {\n        if (this.props.onChange) {\n            try {\n                const text = this.jsonEditor.getText();\n                if (text === '') {\n                    this.props.onChange(null);\n                }\n\n                const currentJson = this.jsonEditor.get();\n                if (this.props.value !== currentJson) {\n                    this.props.onChange(currentJson);\n                }\n            } catch (err) {\n                this.err = err;\n            }\n        }\n    }\n\n    collapseAll() {\n        if (this.jsonEditor) {\n            this.jsonEditor.collapseAll();\n        }\n    }\n\n    expandAll() {\n        if (this.jsonEditor) {\n            this.jsonEditor.expandAll();\n        }\n    }\n\n    focus() {\n        if (this.jsonEditor) {\n            this.jsonEditor.focus();\n        }\n    }\n\n    render() {\n        const {\n            htmlElementProps,\n            tag\n        } = this.props;\n\n        return React.createElement(\n            tag,\n            {\n                ...htmlElementProps,\n                ref: this.setRef\n            }\n        );\n    }\n}\n\nEditor.propTypes = {\n    //  jsoneditor props\n    value: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    mode: PropTypes.oneOf(values),\n    name: PropTypes.string,\n    schema: PropTypes.object,\n    schemaRefs: PropTypes.object,\n\n    onChange: PropTypes.func,\n    onError: PropTypes.func,\n    onModeChange: PropTypes.func,\n\n    ace: PropTypes.object,\n    ajv: PropTypes.object,\n    theme: PropTypes.string,\n    history: PropTypes.bool,\n    navigationBar: PropTypes.bool,\n    statusBar: PropTypes.bool,\n    search: PropTypes.bool,\n    allowedModes: PropTypes.arrayOf(PropTypes.oneOf(values)),\n\n    //  custom props\n    tag: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n    htmlElementProps: PropTypes.object,\n    innerRef: PropTypes.func,\n};\n\nEditor.defaultProps = {\n    tag: 'div',\n    mode: modes.tree,\n    history: false,\n    search: true,\n    navigationBar: true,\n    statusBar: true,\n};\n\n/**\n * @type TJsonEditorModes\n */\nEditor.modes = modes;\n","import JSONView from './JSONView';\n\nexport default JSONView;\n","import React from 'react';\nimport JsonEditor from './Editor';\n\nimport ace from 'brace';\nimport 'brace/mode/json';\nimport 'brace/theme/github';\n\nimport './style.css';\n\nconst JSONView = ({value, onChange}) => (\n  <JsonEditor\n    value={value}\n    onChange={onChange}\n    allowedModes={[\"tree\", \"code\"]}\n    ace={ace}\n    theme=\"ace/theme/github\"\n  />\n)\n\nexport default JSONView;","import React from \"react\";\nimport { Layout } from \"antd\";\nimport VERSION from \"../../VERSION\";\n\nconst { Footer } = Layout;\nconst TSFooter = () => (\n  <Footer style={{ textAlign: \"center\", marginTop: \"30px\" }}>\n    ENACT©{new Date().getFullYear()} Created by{\" \"}\n    <a href=\"https://www.montimage.com\">Montimage</a>. Version {VERSION}\n  </Footer>\n);\n\nexport default TSFooter;\n","import TSFooter from './TSFooter';\n\nexport default TSFooter;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { notification, Spin, Layout, Typography } from \"antd\";\nimport { resetNotification } from \"../actions\";\nimport TSFooter from \"../components/TSFooter\";\nimport \"./styles.css\";\nconst { Title, Text } = Typography;\n\nconst { Content } = Layout;\n\nclass LayoutPage extends Component {\n\n  render() {\n    const {\n      requesting,\n      notify,\n      resetNotification,\n      pageTitle,\n      pageSubTitle,\n    } = this.props;\n    return (\n      <Layout style={{backgroundColor: 'white'}}>\n        {notify &&\n          notification[notify.type]({\n            message: notify.type.toUpperCase(),\n            description:\n              typeof notify.message === \"object\"\n                ? JSON.stringify(notify.message)\n                : notify.message,\n            onClose: () => resetNotification(),\n          })}\n        <Layout style={{ padding: \"0px 48px 48px\", margin: \"30px 50px 50px\" }}>\n          <Content>\n            {pageTitle && <Title level={2}>{pageTitle}</Title>}\n            {pageSubTitle && <Text type=\"secondary\">{pageSubTitle}</Text>}\n            <div style={{ paddingTop: \"30px\" }} className=\"site-layout-content\">\n              {requesting ? <div style={{textAlign: \"center\", marginTop: 30}}><Spin tip=\"Loading...\" /></div> : this.props.children}\n              <TSFooter />\n            </div>\n          </Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ requesting, notify }) => ({\n  notify,\n  requesting,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetNotification: () => dispatch(resetNotification()),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(LayoutPage);\n","import ConnectionConfig from './ConnectionConfig';\nexport default ConnectionConfig;","import React, { Fragment } from \"react\";\n\nimport CollapseForm from \"../CollapseForm\";\nimport {\n  FormNumberItem,\n  FormEditableTextItem,\n  FormParagraphItem,\n  FormFileUploadItem,\n} from \"../FormItems\";\n\nconst ConnectionConfig = ({ defaultValue, dataPath, onDataChange, type }) => (\n  <CollapseForm title=\"Connection Configuration\" bordered={false} active={true}>\n    <FormEditableTextItem\n      label=\"Host\"\n      defaultValue={defaultValue.host}\n      onChange={(v) => onDataChange(`${dataPath ? `${dataPath}.` : \"\"}host`, v)}\n      helpText=\"Host name\"\n      rules={[\n        {\n          required: true,\n          message: \"Host name is required!\",\n        },\n      ]}\n    />\n    <FormNumberItem\n      label=\"Port\"\n      min={1023}\n      max={65535}\n      defaultValue={defaultValue.port}\n      onChange={(v) => onDataChange(`${dataPath ? `${dataPath}.` : \"\"}port`, v)}\n      helpText=\"Port number\"\n      rules={[\n        {\n          required: true,\n          message: \"Port number is required!\",\n        },\n      ]}\n    />\n    <FormEditableTextItem\n      label=\"User\"\n      defaultValue={defaultValue.username}\n      onChange={(v) =>\n        onDataChange(`${dataPath ? `${dataPath}.` : \"\"}username`, v)\n      }\n      placeholder=\"Username\"\n    />\n    <FormEditableTextItem\n      label=\"Password\"\n      defaultValue={defaultValue.password}\n      onChange={(v) =>\n        onDataChange(`${dataPath ? `${dataPath}.` : \"\"}password`, v)\n      }\n      placeholder=\"Password\"\n    />\n    {type === \"MQTTS\" && (\n      <Fragment>\n        <FormParagraphItem label=\"CA\" value={defaultValue.ca} />\n        <FormFileUploadItem\n          label=\"CA file\"\n          onUpload={(v) => {\n            onDataChange(`${dataPath ? `${dataPath}.` : \"\"}ca`, v);\n          }}\n        />\n\n        <FormParagraphItem label=\"Certificate\" value={defaultValue.cert} />\n        <FormFileUploadItem\n          label=\"Certificate file\"\n          onUpload={(v) => {\n            onDataChange(`${dataPath ? `${dataPath}.` : \"\"}cert`, v);\n          }}\n        />\n        <FormParagraphItem label=\"Key\" value={defaultValue.key} />\n        <FormFileUploadItem\n          label=\"Key file\"\n          onUpload={(v) => {\n            onDataChange(`${dataPath ? `${dataPath}.` : \"\"}key`, v);\n          }}\n        />\n      </Fragment>\n    )}\n    {type === \"MONGODB\" && (\n      <FormEditableTextItem\n        label=\"Database\"\n        defaultValue={defaultValue.dbname}\n        onChange={(v) =>\n          onDataChange(`${dataPath ? `${dataPath}.` : \"\"}dbname`, v)\n        }\n        placeholder=\"Database name\"\n        helpText=\"The database's name to working with\"\n        rules={[\n          {\n            required: true,\n            message: \"Database's name is required!\",\n          },\n        ]}\n      />\n    )}\n    <FormEditableTextItem\n      label=\"Options\"\n      defaultValue={JSON.stringify(defaultValue.options)}\n      onChange={(v) =>\n        onDataChange(`${dataPath ? `${dataPath}.` : \"\"}options`, v)\n      }\n      placeholder=\"{}\"\n      helpText=\"Connection options. Depends on the protocol. It must be in JSON format!\"\n    />\n  </CollapseForm>\n);\n\nexport default ConnectionConfig;\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Switch, Form, List, Typography, Divider } from \"antd\";\n// all the edit forms\nimport SensorModal from \"../components/SensorModal\";\nimport ActuatorModal from \"../components/ActuatorModal\";\n\nimport {\n  requestModel,\n  requestAddNewModel,\n  requestUpdateModel,\n  showModal,\n  selectDevice,\n  changeModelName,\n  deleteThing,\n  changeStatusThing,\n  selectSensor,\n  deleteSimulationSensor,\n  changeStatusSensor,\n  selectActuator,\n  deleteSimulationActuator,\n  changeStatusActuator,\n  requestDataStorage, requestSimulationStatus, requestStopSimulation\n} from \"../actions\";\nimport JSONView from \"../components/JSONView\";\nimport LayoutPage from \"./LayoutPage\";\n\nimport {\n  SwitcherOutlined,\n  ExportOutlined,\n  CaretRightOutlined, StopOutlined\n} from \"@ant-design/icons\";\nimport {\n  FormEditableTextItem,\n  FormNumberItem,\n  FormSelectItem,\n  FormSwitchItem,\n  FormTextAreaItem,\n  FormTimeRangeItem,\n} from \"../components/FormItems\";\nimport ConnectionConfig from \"../components/ConnectionConfig\";\nimport CollapseForm from \"../components/CollapseForm\";\nimport {\n  getQuery,\n  getLastPath,\n  updateObjectByPath,\n  deepCloneObject,getObjectId\n} from \"../utils\";\n\nconst { Text } = Typography;\n\nconst addNewDevice = () => {\n  const currentTime = Date.now();\n  return {\n    id: `id-new-device-${currentTime}`,\n    name: `name-new-device-${currentTime}`,\n    enable: false,\n    scale: 1,\n    behaviours: [],\n    timeToDown: 0,\n    testBroker: {\n      protocol: \"MQTT\",\n      connConfig: {\n        host: \"localhost\",\n        port: 1883,\n        options: null,\n      },\n    },\n    productionBroker: null,\n    isReplayingStreams: false,\n    sensors: [],\n    actuators: [],\n    upStreams: [],\n    downStreams: [],\n  };\n};\n\nconst addNewSensor = () => {\n  const currentTime = Date.now();\n  return {\n    id: `sensor-id-${currentTime}`,\n    objectId: null,\n    name: `New sensor ${currentTime}`,\n    enable: false,\n    isFromDatabase: false,\n    topic: `sensors/topic/${currentTime}`,\n    scale: 1,\n    dataSource: \"DATA_SOURCE_DATASET\",\n    replayOptions: null,\n    dataSpecs: {\n      timePeriod: 5,\n      scale: 1,\n      dosAttackSpeedUpRate: 5,\n      timeBeforeFailed: 20,\n      sensorBehaviours: [],\n      withEnergy: false,\n      isIPSOFormat: false,\n      energy: null,\n      sources: [],\n    },\n  };\n};\n\nconst addNewActuator = () => {\n  const currentTime = Date.now();\n  return {\n    id: `actuator-id-${currentTime}`,\n    objectId: null,\n    name: `New actuator ${currentTime}`,\n    enable: false,\n    topic: `actuators/topic/${currentTime}`,\n    scale: 1,\n  };\n};\n\nconst ModelDeviceItem = ({\n  data,\n  onChange,\n  onDelete,\n  onDuplicate,\n  changeModalId,\n  selectedModalId,\n  onEnable,\n}) => (\n  <CollapseForm\n    title={`${data.name} ${data.scale > 1 ? `(${data.scale} instances)`: ''}`}\n    extra={\n      <Fragment>\n        <Switch\n          defaultChecked={data.enable ? true : false}\n          checkedChildren=\"Enable\"\n          unCheckedChildren=\"Disable\"\n          onClick={(value, event) => {\n            event.stopPropagation();\n            onEnable();\n          }}\n          style={{ marginRight: 10 }}\n        />\n        <Button\n          onClick={(event) => {\n            event.stopPropagation();\n            onDuplicate();\n          }}\n          size=\"small\"\n          style={{ marginRight: 10 }}\n        >\n          Duplicate\n        </Button>\n        <Button\n          onClick={(event) => {\n            event.stopPropagation();\n            onDelete();\n          }}\n          size=\"small\"\n          danger\n        >\n          Delete\n        </Button>\n      </Fragment>\n    }\n  >\n    <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n      <FormEditableTextItem\n        label=\"Name\"\n        defaultValue={data.name}\n        onChange={(newName) => onChange(\"name\", newName)}\n      />\n      <FormEditableTextItem\n        label=\"Id\"\n        defaultValue={data.id}\n        onChange={(newId) => onChange(\"id\", newId)}\n      />\n      <FormNumberItem\n        label=\"Scale\"\n        defaultValue={data.scale}\n        min={1}\n        max={1000}\n        onChange={(newScale) => onChange(\"scale\", newScale)}\n      />\n      <Divider orientation=\"left\">Test Broker </Divider>\n      <FormSelectItem\n        label=\"Protocol\"\n        defaultValue={data.testBroker.protocol}\n        onChange={(v) => onChange(\"testBroker.protocol\", v)}\n        options={[\"MQTT\", \"MQTTS\"]}\n      />\n      <ConnectionConfig\n        defaultValue={data.testBroker.connConfig}\n        dataPath={\"testBroker.connConfig\"}\n        onDataChange={onChange}\n        type={data.testBroker.protocol}\n      />\n      <Divider orientation=\"left\">Production Broker </Divider>\n      {data.productionBroker ? (\n        <Fragment>\n          <FormSelectItem\n            label=\"Protocol\"\n            defaultValue={data.productionBroker.protocol}\n            onChange={(v) => onChange(\"productionBroker.protocol\", v)}\n            options={[\"MQTT\", \"MQTTS\"]}\n          />\n          <ConnectionConfig\n            defaultValue={data.productionBroker.connConfig}\n            dataPath={\"productionBroker.connConfig\"}\n            onDataChange={onChange}\n            type={data.productionBroker.protocol}\n          />\n          <Button danger onClick={() => onChange(\"productionBroker\", null)}>\n            Remove Production Broker\n          </Button>\n        </Fragment>\n      ) : (\n        <Button\n          onClick={() =>\n            onChange(\"productionBroker\", {\n              protocol: \"MQTT\",\n              connConfig: {\n                host: \"localhost\",\n                port: 1883,\n                options: null,\n              },\n            })\n          }\n        >\n          Add Production Broker\n        </Button>\n      )}\n\n      <FormSwitchItem\n        label=\"Is Replaying Streams\"\n        checked={data.isReplayingStreams}\n        onChange={(v) => onChange(\"isReplayingStreams\", v)}\n        checkedChildren=\"Replaying Streams\"\n        unCheckedChildren=\"Sensor simulation\"\n      />\n      {data.isReplayingStreams ? (\n        <Fragment>\n          <List\n            header={<strong>Upstreams ({data.upStreams.length})</strong>}\n            footer={\n              <Button\n                onClick={() => {\n                  const newUpStreams = [\n                    ...data.upStreams,\n                    `new-up-stream-${Date.now()}`,\n                  ];\n                  onChange(\"upStreams\", newUpStreams);\n                }}\n              >\n                Add New UpStream\n              </Button>\n            }\n            size=\"small\"\n            bordered\n            dataSource={data.upStreams}\n            renderItem={(item, index) => (\n              <List.Item\n                actions={[\n                  <Button\n                    size=\"small\"\n                    danger\n                    key=\"delete\"\n                    onClick={() => {\n                      if (data.upStreams.length === 1) {\n                        onChange(\"upStreams\", []);\n                      } else {\n                        let newUpStreams = [...data.upStreams];\n                        newUpStreams.splice(index, 1);\n                        onChange(\"upStreams\", newUpStreams);\n                      }\n                    }}\n                  >\n                    Delete\n                  </Button>,\n                ]}\n              >\n                <Text\n                  editable={{\n                    onChange: (v) => onChange(`upStreams[${index}]`, v),\n                  }}\n                >\n                  {item}\n                </Text>\n              </List.Item>\n            )}\n          />\n          <p></p>\n          <List\n            header={<strong>Downstreams ({data.downStreams.length})</strong>}\n            footer={\n              <Button\n                onClick={() => {\n                  const newDownStreams = [\n                    ...data.downStreams,\n                    `new-down-stream-${Date.now()}`,\n                  ];\n                  onChange(\"downStreams\", newDownStreams);\n                }}\n              >\n                Add New DownStream\n              </Button>\n            }\n            size=\"small\"\n            bordered\n            dataSource={data.downStreams}\n            renderItem={(item, index) => (\n              <List.Item\n                actions={[\n                  <Button\n                    size=\"small\"\n                    danger\n                    key=\"delete\"\n                    onClick={() => {\n                      if (data.downStreams.length === 1) {\n                        onChange(\"downStreams\", []);\n                      } else {\n                        let newDownstreams = [...data.downStreams];\n                        newDownstreams.splice(index, 1);\n                        onChange(\"downStreams\", newDownstreams);\n                      }\n                    }}\n                  >\n                    Delete\n                  </Button>,\n                ]}\n              >\n                <Text\n                  value={item}\n                  editable={{\n                    onChange: (v) => onChange(`downStreams[${index}]`, v),\n                  }}\n                >\n                  {item}\n                </Text>\n              </List.Item>\n            )}\n          />\n        </Fragment>\n      ) : (\n        <Fragment>\n          <Divider orientation=\"left\">Sensors</Divider>\n          <List\n            header={<strong>Sensors ({data.sensors.reduce(((nbSensor,s) => {\n              return s.dataSpecs.scale ? (nbSensor + Number(s.dataSpecs.scale)) : (nbSensor++);\n            }), 0)})</strong>}\n            footer={\n              <Button\n                onClick={() => {\n                  const newSensor = addNewSensor();\n                  if (data.sensors.length === 0) {\n                    onChange(\"sensors\", [newSensor]);\n                  } else {\n                    // const newSensors = [...data.sensors, newSensor];\n                    onChange(`sensors[${data.sensors.length}]`, newSensor);\n                  }\n                }}\n              >\n                Add New Sensor\n              </Button>\n            }\n            size=\"small\"\n            bordered\n            dataSource={data.sensors}\n            renderItem={(item, index) => (\n              <List.Item\n                actions={[\n                  <Switch\n                    checkedChildren=\"Enable\"\n                    unCheckedChildren=\"Disable\"\n                    defaultChecked={item.enable ? true : false}\n                    onChange={() =>\n                      onChange(`sensors[${index}].enable`, !item.enable)\n                    }\n                  />,\n                  <Button\n                    size=\"small\"\n                    key=\"edit\"\n                    onClick={() => changeModalId(item.id)}\n                  >\n                    Edit\n                  </Button>,\n                  <Button\n                    size=\"small\"\n                    key=\"duplicate\"\n                    onClick={() => {\n                      const newSensor = {\n                        ...item,\n                        id: `${item.id}-duplicated`,\n                        name: `${item.name} [duplicaed]`,\n                      };\n                      let newSensors = [...data.sensors, newSensor];\n                      onChange(\"sensors\", newSensors);\n                    }}\n                  >\n                    Duplicate\n                  </Button>,\n                  <Button\n                    size=\"small\"\n                    danger\n                    key=\"delete\"\n                    onClick={() => {\n                      if (data.sensors.length === 1) {\n                        onChange(\"sensors\", []);\n                      } else {\n                        let newSensors = [...data.sensors];\n                        newSensors.splice(index, 1);\n                        onChange(\"sensors\", newSensors);\n                      }\n                    }}\n                  >\n                    Delete\n                  </Button>,\n                ]}\n              >\n                <Text>{item.name} ({item.dataSpecs.scale ? item.dataSpecs.scale : 1})</Text>\n                <SensorModal\n                  enable={selectedModalId === item.id}\n                  sensorData={item}\n                  deviceId={data.id}\n                  onOK={(dataPath, value) =>\n                    onChange(`sensors[${index}].${dataPath}`, value)\n                  }\n                  onClose={() => {\n                    changeModalId(null);\n                  }}\n                />\n              </List.Item>\n            )}\n          />\n          <p></p>\n          <Divider orientation=\"left\">Actuator </Divider>\n          <List\n            header={<strong>Actuators ({data.actuators.reduce((nbA, a) => a.scale ? (nbA + Number(a.scale)) : nbA++, 0)})</strong>}\n            footer={\n              <Button\n                onClick={() => {\n                  const newActuator = addNewActuator();\n                  if (data.actuators.length === 0) {\n                    onChange(\"actuators\", [newActuator]);\n                  } else {\n                    // const newActuators = [...data.actuators, newActuator];\n                    onChange(\n                      `actuators[${data.actuators.length}]`,\n                      newActuator\n                    );\n                  }\n                }}\n              >\n                Add New Actuator\n              </Button>\n            }\n            size=\"small\"\n            bordered\n            dataSource={data.actuators}\n            renderItem={(item, index) => (\n              <List.Item\n                actions={[\n                  <Switch\n                    checkedChildren=\"Enable\"\n                    unCheckedChildren=\"Disable\"\n                    defaultChecked={item.enable ? true : false}\n                    onChange={() =>\n                      onChange(`actuators[${index}].enable`, !item.enable)\n                    }\n                  />,\n                  <Button\n                    size=\"small\"\n                    key=\"edit\"\n                    onClick={() => changeModalId(item.id)}\n                  >\n                    Edit\n                  </Button>,\n                  <Button\n                    size=\"small\"\n                    key=\"duplicate\"\n                    onClick={() => {\n                      const newActuator = {\n                        ...item,\n                        id: `${item.id}-duplicated`,\n                        name: `${item.name} [duplicaed]`,\n                      };\n                      let newActuators = [...data.actuators, newActuator];\n                      onChange(\"actuators\", newActuators);\n                    }}\n                  >\n                    Duplicate\n                  </Button>,\n                  <Button\n                    size=\"small\"\n                    danger\n                    key=\"delete\"\n                    onClick={() => {\n                      if (data.actuators.length === 1) {\n                        onChange(\"actuators\", []);\n                      } else {\n                        let newActuators = [...data.actuators];\n                        newActuators.splice(index, 1);\n                        onChange(\"actuators\", newActuators);\n                      }\n                    }}\n                  >\n                    Delete\n                  </Button>,\n                ]}\n              >\n              <Text>{item.name} ({item.scale ? item.scale : 1})</Text>\n                <ActuatorModal\n                  enable={selectedModalId === item.id}\n                  actuatorData={item}\n                  deviceId={data.id}\n                  onOK={(dataPath, value) =>\n                    onChange(`actuators[${index}].${dataPath}`, value)\n                  }\n                  onClose={() => {\n                    changeModalId(null);\n                  }}\n                />\n              </List.Item>\n            )}\n          />\n        </Fragment>\n      )}\n    </Form>\n  </CollapseForm>\n);\n\nclass ModelPage extends Component {\n  constructor(props) {\n    super(props);\n    let modelFileName = getLastPath();\n    let isNewModel = modelFileName.indexOf(\".json\") === -1;\n    this.state = {\n      modelFileName: isNewModel ? `${modelFileName}.json` : modelFileName,\n      tempModel: isNewModel\n        ? {\n            name: modelFileName,\n          }\n        : {},\n      isNewModel,\n      selectedModalId: null,\n      isChanged: false,\n    };\n\n    this.onModelChange = this.onModelChange.bind(this);\n  }\n\n  componentDidMount() {\n    let modelFileName = getLastPath();\n    if (modelFileName.indexOf(\".json\") === -1) {\n      // This is a new model page\n      this.setState({\n        modelFileName: `${modelFileName}.json`,\n        tempModel: {\n          name: modelFileName,\n        },\n        isNewModel: true,\n      });\n    } else {\n      this.props.requestModel(modelFileName);\n      this.setState({ modelFileName, isNewModel: false });\n    }\n    this.props.fetchDataStorage();\n    this.props.fetchSimulationStatus();\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.setState({\n      tempModel: deepCloneObject(newProps.model),\n    });\n  }\n\n  onModelChange(newModel) {\n    this.setState({\n      tempModel: newModel,\n      isChanged: true,\n    });\n  }\n\n  onDataChange(dataPath, value) {\n    this.setState((prevState) => {\n      const newData = { ...prevState.tempModel };\n      updateObjectByPath(newData, dataPath, value);\n      return { tempModel: newData, error: null, isChanged: true };\n    });\n  }\n\n  exportModel(model) {\n    if (model) {\n      const fileData = JSON.stringify(model);\n      const blob = new Blob([fileData], { type: \"text/json\" });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.download = `${model.name.replace(/ /g, \"\")}.json`;\n      link.href = url;\n      link.click();\n    }\n  }\n\n  changeModalId(newId) {\n    this.setState({ selectedModalId: newId });\n  }\n\n  addCustomDataStorage() {\n    const { dataStorage } = this.props;\n    if (dataStorage) {\n      this.onDataChange(\"dataStorage\", deepCloneObject(dataStorage));\n    } else {\n      this.onDataChange(\"dataStorage\", {\n        protocol: \"MONGODB\",\n        connConfig: {\n          host: \"localhost\",\n          port: 27017,\n          username: null,\n          password: null,\n          dbname: \"my_db_name\",\n          options: null,\n        },\n      });\n    }\n  }\n\n  render() {\n    const {\n      modelFileName,\n      tempModel,\n      isNewModel,\n      selectedModalId,\n      isChanged,\n    } = this.state;\n    const {simulationStatus, stopSimulation } = this.props;\n    let simId = null;\n    if (tempModel) {\n      if (tempModel.name) {\n        simId = getObjectId(tempModel.name);\n        // console.log(tempModel.name, simId);\n      }\n    }\n    let isRunning = false;\n    if (simulationStatus ) {\n      if (simulationStatus[simId]) isRunning = simulationStatus[simId].isRunning;\n    }\n    // console.log(isRunning);\n    const { addNewModel, updateModel } = this.props;\n\n    let viewType = getQuery(\"view\");\n    if (!viewType) viewType = \"form\";\n    let view = null;\n    let nbDevices = 0;\n    if (tempModel.devices) {\n      for (let index = 0; index < tempModel.devices.length; index++) {\n        nbDevices += tempModel.devices[index].scale ? tempModel.devices[index].scale : 1;\n      }\n    }\n    if (viewType === \"json\") {\n      view = <JSONView value={tempModel} onChange={this.onModelChange} />;\n    } else {\n      view = (\n        <Fragment>\n          <p></p>\n          <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n            <FormEditableTextItem\n              label=\"Name\"\n              defaultValue={tempModel.name}\n              onChange={(newName) => this.onDataChange(\"name\", newName)}\n            />\n            <Divider orientation=\"left\">Replay Options </Divider>\n            <p>The Id of data source</p>\n            <FormEditableTextItem\n              label=\"Dataset Id\"\n              defaultValue={tempModel.datasetId ? tempModel.datasetId : null}\n              onChange={(newDatasetId) =>\n                this.onDataChange(\"datasetId\", newDatasetId)\n              }\n            />\n            {tempModel.replayOptions ? (\n              <CollapseForm title=\"Replaying Options\">\n                <FormTimeRangeItem\n                  label=\"Time Range\"\n                  defaultValue={[\n                    tempModel.replayOptions.startTime\n                      ? tempModel.replayOptions.startTime\n                      : Date.now() - 5 * 60 * 1000,\n                    tempModel.replayOptions.endTime\n                      ? tempModel.replayOptions.endTime\n                      : Date.now(),\n                  ]}\n                  onChange={(v) => {\n                    this.onDataChange(`replayOptions.startTime`, v[0]);\n                    this.onDataChange(`replayOptions.endTime`, v[1]);\n                  }}\n                  helpText=\"The time range when the data should be replayed.\"\n                />\n                <FormNumberItem\n                  label=\"Speedup\"\n                  min={0.01}\n                  max={100}\n                  defaultValue={\n                    tempModel.replayOptions.speedup\n                      ? tempModel.replayOptions.speedup\n                      : 1\n                  }\n                  onChange={(v) =>\n                    this.onDataChange(`replayOptions.speedup`, v)\n                  }\n                  helpText=\"The replaying speedup (0.01 - 100)!\"\n                />\n                <FormSwitchItem\n                  label=\"Repeat\"\n                  onChange={(v) => this.onDataChange(`replayOptions.repeat`, v)}\n                  checked={tempModel.replayOptions.repeat ? true : false}\n                  checkedChildren={\"Repeat\"}\n                  unCheckedChildren={\"No Repeat\"}\n                  helpText=\"Repeatly replaying the data\"\n                />\n                <Button\n                  danger\n                  onClick={() => this.onDataChange(\"replayOptions\", null)}\n                >\n                  Delete Replaying Options\n                </Button>\n              </CollapseForm>\n            ) : (\n              <Button\n                onClick={() =>\n                  this.onDataChange(\"replayOptions\", {\n                    startTime: 0,\n                    endTime: Date.now(),\n                    repeat: false,\n                    speedup: 1,\n                  })\n                }\n              >\n                Set Replaying Options\n              </Button>\n            )}\n            <Divider orientation=\"left\">Store simulated data</Divider>\n            {tempModel.newDataset ? (\n              <Fragment>\n                <p>New Dataset to save the simulated data</p>\n                <FormEditableTextItem\n                  label=\"Id\"\n                  placeholder=\"Dataset Id\"\n                  helpText=\"The Id of the dataset to be used in the simulation\"\n                  defaultValue={tempModel.newDataset.id}\n                  onChange={(value) =>\n                    this.onDataChange(\"newDataset.id\", value)\n                  }\n                />\n                <FormEditableTextItem\n                  label=\"Name\"\n                  placeholder=\"Name\"\n                  defaultValue={tempModel.newDataset.name}\n                  onChange={(value) =>\n                    this.onDataChange(\"newDataset.name\", value)\n                  }\n                />\n                <FormTextAreaItem\n                  label=\"Description\"\n                  defaultValue={tempModel.newDataset.description}\n                  onChange={(value) =>\n                    this.onDataChange(\"newDataset.description\", value)\n                  }\n                />\n                <FormEditableTextItem\n                  label=\"Tags\"\n                  placeholder=\"Tags\"\n                  defaultValue={JSON.stringify(tempModel.newDataset.tags)}\n                  onChange={(value) =>\n                    this.onDataChange(\"newDataset.tags\", JSON.parse(value))\n                  }\n                />\n                <Button\n                  danger\n                  onClick={() => this.onDataChange(\"newDataset\", null)}\n                >\n                  Remove New Dataset\n                </Button>\n              </Fragment>\n            ) : (\n              <Button\n                onClick={() =>\n                  this.onDataChange(\"newDataset\", {\n                    id: `new-data-set-${Date.now()}`,\n                    name: `New Data Set ${Date.now()}`,\n                    description: \"Dataset descriptions\",\n                    tags: [\"recorded\", \"random\", \"test\"],\n                  })\n                }\n              >\n                Add New Dataset\n              </Button>\n            )}\n            <Divider orientation=\"left\">Data Storage </Divider>\n            {tempModel.dataStorage ? (\n              <Fragment>\n                <ConnectionConfig\n                  defaultValue={tempModel.dataStorage.connConfig}\n                  dataPath={\"dataStorage.connConfig\"}\n                  onDataChange={(dataPath, value) =>\n                    this.onDataChange(dataPath, value)\n                  }\n                  type={tempModel.dataStorage.protocol}\n                />\n                <Button\n                  danger\n                  onClick={() => this.onDataChange(\"dataStorage\", null)}\n                >\n                  Remove Custom Data Storage\n                </Button>\n              </Fragment>\n            ) : (\n              <Fragment>\n                <p>\n                  Use{\" \"}\n                  <a href=\"/data-storage\" target=\"_blank\">\n                    Default Data Storage\n                  </a>\n                </p>\n                <Button onClick={() => this.addCustomDataStorage()}>\n                  Add Custom Data Storage\n                </Button>\n              </Fragment>\n            )}\n          </Form>\n          <Divider orientation=\"left\">Devices </Divider>\n          {tempModel.devices ? (\n            <Fragment>\n              <p>Number of devices: {nbDevices}</p>\n              <Button\n                onClick={() => {\n                  const newDev = addNewDevice();\n                  let newDevices = [...tempModel.devices, newDev];\n                  this.onDataChange(\"devices\", newDevices);\n                }}\n              >\n                Add New Device\n              </Button>\n              {tempModel.devices.map((device, index) => (\n                <ModelDeviceItem\n                  key={index}\n                  data={device}\n                  selectedModalId={selectedModalId}\n                  changeModalId={(newId) => this.changeModalId(newId)}\n                  onEnable={() => {\n                    this.onDataChange(\n                      `devices[${index}].enable`,\n                      !device.enable\n                    );\n                  }}\n                  onChange={(dataPath, value) =>\n                    this.onDataChange(`devices[${index}].${dataPath}`, value)\n                  }\n                  onDelete={() => {\n                    let newDevices = [...tempModel.devices];\n                    newDevices.splice(index, 1);\n                    this.onDataChange(\"devices\", newDevices);\n                  }}\n                  onDuplicate={() => {\n                    let newDevice = {\n                      ...device,\n                      id: `${device.id}-duplicated`,\n                      name: `${device.name} [duplicated]`,\n                    };\n                    let newDevices = [...tempModel.devices, newDevice];\n                    this.onDataChange(\"devices\", newDevices);\n                  }}\n                />\n              ))}\n            </Fragment>\n          ) : (\n            <Button\n              onClick={() => {\n                const newDev = addNewDevice();\n                this.onDataChange(\"devices\", [newDev]);\n              }}\n            >\n              Add New Device\n            </Button>\n          )}\n          <p></p>\n        </Fragment>\n      );\n    }\n\n    return (\n      <Fragment>\n        <LayoutPage\n          pageTitle={window.decodeURI(modelFileName)}\n          pageSubTitle=\"Create/Update a network topology\"\n        >\n          <a\n            href={`${window.location.pathname}?view=${\n              viewType === \"json\" ? \"form\" : \"json\"\n            }`}\n            style={{ marginRight: 10 }}\n          >\n            {\" \"}\n            <SwitcherOutlined /> Switch View\n          </a>\n          <Button\n            onClick={() => this.exportModel(tempModel)}\n            style={{ marginRight: 10 }}\n          >\n            <ExportOutlined />\n            Export Model\n          </Button>\n          {isRunning ? (\n            <Button type=\"primary\" danger onClick={() => stopSimulation(modelFileName)}>\n              <StopOutlined /> Stop\n            </Button>\n          ) : (\n            <a type=\"button\" href={`/simulation?model=${modelFileName}`}>\n              <Button type=\"primary\">\n                <CaretRightOutlined /> Simulate\n              </Button>\n            </a>\n          )}\n          <p></p>\n          {view}\n          <Button\n            type=\"primary\"\n            size=\"large\"\n            onClick={() => {\n              if (isNewModel) {\n                addNewModel(tempModel);\n              } else {\n                updateModel(modelFileName, tempModel);\n              }\n              this.setState({ isChanged: false });\n            }}\n            style={{\n              position: \"fixed\",\n              top: 80,\n              right: 20,\n            }}\n            disabled={isChanged ? false : true}\n          >\n            Save\n          </Button>\n        </LayoutPage>\n      </Fragment>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ model, dataStorage, simulationStatus }) => ({\n  model,\n  dataStorage: dataStorage.connConfig,\n  simulationStatus\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchDataStorage: () => dispatch(requestDataStorage()),\n  fetchSimulationStatus: () => dispatch(requestSimulationStatus()),\n  requestModel: (modelFileName) => dispatch(requestModel(modelFileName)),\n  addNewModel: (newModel) => dispatch(requestAddNewModel(newModel)),\n  updateModel: (modelFileName, model) =>\n    dispatch(requestUpdateModel({ modelFileName, model })),\n  showModal: (formID) => dispatch(showModal(formID)),\n  changeModelName: (newName) => dispatch(changeModelName(newName)),\n  selectDevice: (device) => dispatch(selectDevice(device)),\n  deleteThing: (thingID) => dispatch(deleteThing(thingID)),\n  changeStatusThing: (thingID) => dispatch(changeStatusThing(thingID)),\n  selectSensor: (sensor) => dispatch(selectSensor(sensor)),\n  deleteSensor: (sensorID, thingID) =>\n    dispatch(deleteSimulationSensor({ sensorID, thingID })),\n  changeStatusSensor: (sensorID, thingID) =>\n    dispatch(changeStatusSensor({ sensorID, thingID })),\n  selectActuator: (actuator) => dispatch(selectActuator(actuator)),\n  deleteActuator: (actuatorID, thingID) =>\n    dispatch(deleteSimulationActuator({ actuatorID, thingID })),\n  changeStatusActuator: (actuatorID, thingID) =>\n    dispatch(changeStatusActuator({ actuatorID, thingID })),\n  stopSimulation: (modelFileName) =>\n    dispatch(requestStopSimulation(modelFileName)),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(ModelPage);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Form } from \"antd\";\n\nimport {\n  requestDataStorage,\n  requestUpdateDataStorage,\n  requestTestDataStorageConnection,\n} from \"../actions\";\nimport JSONView from \"../components/JSONView\";\nimport LayoutPage from \"./LayoutPage\";\nimport { getQuery, updateObjectByPath, deepCloneObject } from \"../utils\";\nimport ConnectionConfig from \"../components/ConnectionConfig\";\n\nclass DataStoragePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tempDataStorage: { connConfig: {} },\n      connectionStatus: false,\n      isDSChanged: false,\n    };\n\n    this.onDataStorageChange = this.onDataStorageChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.requestDataStorage();\n    this.props.testConnection();\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.setState({\n      tempDataStorage: deepCloneObject(newProps.dataStorage),\n      connectionStatus: newProps.connectionStatus,\n    });\n  }\n\n  onDataStorageChange(newDataStorage) {\n    this.setState({\n      tempDataStorage: newDataStorage,\n      isDSChanged: true,\n    });\n  }\n\n  onDataChange(dataPath, value) {\n    this.setState((prevState) => {\n      const newData = { ...prevState.tempDataStorage };\n      // console.log(dataPath, value);\n      updateObjectByPath(newData, dataPath, value);\n      return { tempDataStorage: newData, isDSChanged: true };\n    });\n  }\n\n  render() {\n    const { tempDataStorage, connectionStatus, isDSChanged } = this.state;\n    const { updateDataStorage, testConnection } = this.props;\n\n    let viewType = getQuery(\"view\");\n    if (!viewType) viewType = \"form\";\n    let view = null;\n    if (viewType === \"json\") {\n      view = (\n        <JSONView value={tempDataStorage} onChange={this.onDataStorageChange} />\n      );\n    } else {\n      view = (\n        <Form\n          labelCol={{\n            span: 4,\n          }}\n          wrapperCol={{\n            span: 14,\n          }}\n        >\n          <ConnectionConfig\n            defaultValue={tempDataStorage.connConfig}\n            dataPath={\"connConfig\"}\n            onDataChange={(dataPath, value) =>\n              this.onDataChange(dataPath, value)\n            }\n            type=\"MONGODB\"\n          />\n        </Form>\n      );\n    }\n    return (\n      <LayoutPage\n        pageTitle=\"DataStorage\"\n        pageSubTitle=\"Setup the database to store the data\"\n      >\n        Connection Status:{\" \"}\n        <strong>\n          {\" \"}\n          {connectionStatus ? (\n            <span style={{ color: \"green\" }}>Connected</span>\n          ) : (\n            <span style={{ color: \"red\" }}>Not Connected</span>\n          )}{\" \"}\n        </strong>\n        {view}\n        <Button\n          style={{ marginTop: \"10px\", marginRight: \"10px\" }}\n          onClick={() => {\n            if (isDSChanged) {\n              updateDataStorage(tempDataStorage);\n              this.setState({ isDSChanged: false });\n              setTimeout(testConnection, 3000);\n            } else {\n              testConnection();\n            }\n          }}\n        >\n          Test Connection\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            updateDataStorage(tempDataStorage);\n            this.setState({ isDSChanged: false });\n            setTimeout(testConnection, 3000);\n          }}\n          style={{ marginTop: \"10px\" }}\n          disabled={this.state.isDSChanged ? false : true}\n        >\n          Save\n        </Button>\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ dataStorage }) => ({\n  dataStorage: dataStorage.connConfig,\n  connectionStatus: dataStorage.connectionStatus,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestDataStorage: () => dispatch(requestDataStorage()),\n  updateDataStorage: (newDataStorage) =>\n    dispatch(requestUpdateDataStorage(newDataStorage)),\n  testConnection: () => dispatch(requestTestDataStorageConnection()),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(DataStoragePage);\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Table, Button, Form, Alert } from \"antd\";\nimport { BuildOutlined, CopyOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestAllTestCampaigns,\n  requestAddNewTestCampaign,\n  requestDeleteTestCampaign,\n  requestDevops,\n  requestUpdateDevops,\n  requestLaunchTestCampaign,\n  requestStopTestCampaign,\n  requestTestCampaignStatus,\n} from \"../actions\";\nimport {\n  FormEditableTextItem,\n  FormNumberItem,\n  FormSelectItem,\n  FormTextNotEditableItem,\n} from \"../components/FormItems\";\nimport CollapseForm from \"../components/CollapseForm\";\nimport { updateObjectByPath } from \"../utils\";\nimport {URL} from '../api';\n\nclass TestCampaignListPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      webhookURL: undefined,\n      testCampaignId: \"Select the test Campaign for next build\",\n      isChanged: false,\n      evaluationParameters: null,\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchTestCampaigns();\n    this.props.fetchDevops();\n    this.props.fetchTestCampaignStatus();\n    this.testCampaignStatusTimer = setInterval(() => {\n      if (!this.state.isChanged) {\n        this.props.fetchTestCampaignStatus();\n      }\n    }, 3000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.testCampaignStatusTimer);\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (newProps.devops) {\n      this.setState(newProps.devops);\n    }\n  }\n\n  duplicateTestCampaign(tc) {\n    const newTc = {\n      id: `${tc.id}-[duplicated]`,\n      name: `${tc.name}-[duplicated]`,\n      description: tc.description,\n      testCaseIds: tc.testCaseIds,\n    };\n    this.props.addNewTestCampaign(newTc);\n  }\n\n  onDataChange(dataPath, value) {\n    this.setState((prevState) => {\n      const newData = { ...prevState };\n      updateObjectByPath(newData, dataPath, value);\n      return { ...newData, isChanged: true };\n    });\n  }\n\n  render() {\n    const {\n      testCampaigns,\n      deleteTestCampaign,\n      updateDevops,\n      launchTestCampaign,\n      stopTestCampaign,\n      runningStatus,\n    } = this.props;\n    const { webhookURL, testCampaignId, isChanged, evaluationParameters } = this.state;\n    const dataSource = testCampaigns.map((tc) => ({ ...tc, key: tc.id }));\n    const columns = [\n      {\n        title: \"Id\",\n        key: \"data\",\n        render: (tc) => (\n          <a href={`/test-campaigns/${tc.id}`}>\n            {tc.id === testCampaignId ? (\n              <strong>\n                {tc.id} <span style={{ color: \"green\" }}>**selected**</span>\n              </strong>\n            ) : (\n              tc.id\n            )}\n          </a>\n        ),\n      },\n      {\n        title: \"Action\",\n        key: \"data\",\n        width: 400,\n        render: (tc) => (\n          <Fragment>\n            <Button\n              size=\"small\"\n              onClick={() => this.onDataChange('testCampaignId',tc.id)}\n              style={{ marginRight: 10 }}\n              disabled={tc.id === testCampaignId ? true: false}\n            >\n              <BuildOutlined /> Select\n            </Button>\n            <Button\n              size=\"small\"\n              style={{ marginRight: 10 }}\n              onClick={() => this.duplicateTestCampaign(tc)}\n            >\n              {\" \"}\n              <CopyOutlined /> Duplicate\n            </Button>\n            {tc.reportFileName && (\n              <Button\n                size=\"small\"\n                style={{ marginRight: 10 }}\n                onClick={() =>\n                  console.log(\n                    \"[TestCampaignList] View report of test campaign: \",\n                    tc\n                  )\n                }\n              >\n                <a href={`/reports/test-campaigns/${tc.reportFileName}`}>\n                  View Report\n                </a>\n              </Button>\n            )}\n            <Button\n              size=\"small\"\n              danger\n              onClick={() => deleteTestCampaign(tc.id)}\n            >\n              <DeleteOutlined /> Delete\n            </Button>\n          </Fragment>\n        ),\n      },\n    ];\n    return (\n      <LayoutPage\n        pageTitle=\"Test Campaign\"\n        pageSubTitle=\"Setup automation testing\"\n      >\n        <CollapseForm title=\"Configuration for automation testing\" active={true}>\n          <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n            <FormTextNotEditableItem\n              label={\"Trigger URL\"}\n              value={(<Alert message={`http://${window.location.host}/api/devops/start`}/>)}\n              helpText={`The end point to launch the test campaign`}\n            />\n            <FormEditableTextItem\n              label=\"Webhook URL\"\n              defaultValue={webhookURL}\n              onChange={(wb) => this.onDataChange('webhookURL',wb)}\n              helpText={`The end point to send the result of the test to`}\n            />\n            <FormTextNotEditableItem\n              label=\"Selected Test Campaign\"\n              value={\n                <a href={`/test-campaigns/${testCampaignId}`}>\n                  <strong>{testCampaignId}</strong>\n                </a>\n              }\n              helpText={\"The test campaign that will be executed in automation testing\"}\n            />\n            {evaluationParameters ? (\n              <CollapseForm\n                title=\"Evaluation Parameters\"\n              >\n                <FormSelectItem\n                  label=\"Event Type\"\n                  helpText=\"Select the type of event to take into the evaluation\"\n                  defaultValue={evaluationParameters.eventType}\n                  options={[\"ALL_EVENTS\",\"SENSOR_EVENTS\", \"ACTUATOR_EVENTS\"]}\n                  onChange={(eventType) => this.onDataChange('evaluationParameters.eventType', eventType)}\n                />\n                <FormSelectItem\n                  label=\"Metric Type\"\n                  helpText=\"Select the type of metric to take into the evaluation\"\n                  defaultValue={evaluationParameters.metricType}\n                  options={[\"METRIC_VALUE\",\"METRIC_VALUE_TIMESTAMP\", \"METRIC_TIMESTAMP\"]}\n                  onChange={(metricType) => this.onDataChange('evaluationParameters.metricType', metricType)}\n                />\n                <FormNumberItem\n                  label=\"Threshold\"\n                  helpText=\"Set the threshold of the similarity to be evaluated as PASSED or FAILED\"\n                  defaultValue={evaluationParameters.threshold}\n                  min={0}\n                  max={1}\n                  step={0.01}\n                  onChange={(threshold) => this.onDataChange('evaluationParameters.threshold', threshold)}\n                />\n              </CollapseForm>\n            ):(\n              <Button\n                onClick={() => this.onDataChange('evaluationParameters', {\n                  eventType: \"ALL_EVENTS\",\n                  metricType: \"METRIC_VALUE_TIMESTAMP\",\n                  threshold: 0.5\n                })}\n                style={{marginBottom: 10}}\n              >\n                Set Evaluation Parameters\n              </Button>\n            )}\n            <Form.Item\n              wrapperCol={{\n                xs: {\n                  span: 24,\n                  offset: 0,\n                },\n                sm: {\n                  span: 16,\n                  offset: 4,\n                },\n              }}\n            >\n              <Button\n                onClick={() => {\n                  updateDevops({\n                    webhookURL,\n                    testCampaignId,\n                    evaluationParameters\n                  });\n                  this.setState({ isChanged: false });\n                }}\n                disabled={isChanged ? false : true}\n                style={{marginRight: 10}}\n                type=\"primary\"\n              >\n                Save\n              </Button>\n              {runningStatus ? (\n                <Fragment>\n                  {runningStatus.isRunning ? (\n                    <Button\n                      type=\"primary\"\n                      danger\n                      onClick={() => stopTestCampaign()}\n                    >\n                      Stop\n                    </Button>\n                  ) : (\n                    <Button\n                      type=\"primary\"\n                      onClick={() => launchTestCampaign()}\n                      disabled={isChanged ? true : false}\n                    >\n                      Launch\n                    </Button>\n                  )}\n                  <a\n                    href={`/logs/test-campaigns?logFile=${runningStatus.logFile}`}\n                  >\n                    <Button type=\"link\">View Log</Button>\n                  </a>\n                  <a href={`/reports/?testCampaignId=${testCampaignId}&reportToken=${runningStatus.reportToken}`}>\n                    <Button type=\"link\">View Report</Button>\n                  </a>\n                </Fragment>\n              ) : (\n                <Button\n                  type=\"primary\"\n                  onClick={() => launchTestCampaign()}\n                  disabled={isChanged ? true : false}\n                >\n                  Launch\n                </Button>\n              )}\n            </Form.Item>\n          </Form>\n        </CollapseForm>\n        <a href={`/test-campaigns/new-campaign-${Date.now()}`}>\n          <Button style={{ marginBottom: \"10px\" }}>Add New Campaign</Button>\n        </a>\n        <Table columns={columns} dataSource={dataSource} />\n        <p></p>\n        <a href={`/logs/test-campaigns`}>View All Test Campaign Logs</a>\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ testCampaigns, devops }) => ({\n  testCampaigns: testCampaigns.allTestCampaigns,\n  runningStatus: testCampaigns.runningStatus,\n  devops,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchTestCampaigns: () => dispatch(requestAllTestCampaigns()),\n  fetchDevops: () => dispatch(requestDevops()),\n  fetchTestCampaignStatus: () => dispatch(requestTestCampaignStatus()),\n  updateDevops: (newDevops) => dispatch(requestUpdateDevops(newDevops)),\n  deleteTestCampaign: (testCampaignId) =>\n    dispatch(requestDeleteTestCampaign(testCampaignId)),\n  addNewTestCampaign: (testCampaign) =>\n    dispatch(requestAddNewTestCampaign(testCampaign)),\n  launchTestCampaign: () => dispatch(requestLaunchTestCampaign()),\n  stopTestCampaign: () => dispatch(requestStopTestCampaign()),\n});\n\nexport default connect(\n  mapPropsToStates,\n  mapDispatchToProps\n)(TestCampaignListPage);\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Menu, Dropdown, Table } from \"antd\";\nimport {\n  ClearOutlined,\n  ImportOutlined,\n  DownOutlined,\n  CaretRightOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  StopOutlined,\n} from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestAllModels,\n  requestDeleteModel,\n  requestDuplicateModel,\n  requestAddNewModel,\n  requestStartSimulation,\n  requestSimulationStatus,\n  requestStopSimulation,\n} from \"../actions\";\nimport { getObjectId } from \"../utils\";\n\nclass ModelListPage extends Component {\n  onUpload(files) {\n    const fileReader = new FileReader();\n    fileReader.onloadend = () => {\n      try {\n        const newModel = JSON.parse(fileReader.result);\n        this.props.importNewModel(newModel);\n      } catch (error) {\n        this.props.setNotification({ type: \"error\", message: error });\n      }\n    };\n    fileReader.readAsText(files[0]);\n  }\n\n  componentDidMount() {\n    this.props.fetchAllModels();\n    this.props.fetchSimulationStatus();\n  }\n\n  render() {\n    const {\n      allModels,\n      deleteModel,\n      duplicateModel,\n      simulationStatus,\n      startSimulation,\n      stopSimulation,\n    } = this.props;\n    const dataSource = allModels.map((model, index) => {\n      const simId = getObjectId(model.replace(\".json\", \"\"));\n      // console.log(simId);\n      let isRunning = false;\n      if (simulationStatus) {\n        if (simulationStatus[simId])\n          isRunning = simulationStatus[simId].isRunning;\n      }\n      return {\n        name: model,\n        key: index,\n        isRunning,\n      };\n    });\n    const columns = [\n      {\n        title: \"Name\",\n        key: \"data\",\n        render: (model) => (\n          <a href={`/models/${model.name}`}>\n            {model.name.replace(\".json\", \"\")}\n          </a>\n        ),\n      },\n      {\n        title: \"Action\",\n        key: \"action\",\n        width: 350,\n        render: (item) => (\n          <Fragment>\n            {item.isRunning ? (\n              <Button\n                style={{ marginRight: 10, paddingRight: 34 }}\n                size=\"small\"\n                type=\"primary\"\n                danger\n                onClick={() => stopSimulation(item.name)}\n              >\n                <StopOutlined /> Stop\n              </Button>\n            ) : (\n              <a type=\"button\" href={`/simulation?model=${item.name}`}>\n                <Button\n                  style={{ marginRight: 10 }}\n                  size=\"small\"\n                  type=\"dashed\"\n                  onClick={() => startSimulation(item.name)}\n                >\n                  <CaretRightOutlined /> Simulate\n                </Button>\n              </a>\n            )}\n\n            <Button\n              style={{ marginRight: 10 }}\n              size=\"small\"\n              onClick={() => duplicateModel(item.name)}\n            >\n              <CopyOutlined /> Duplicate\n            </Button>\n            <Button size=\"small\" onClick={() => deleteModel(item.name)} danger>\n              <DeleteOutlined />\n              Delete\n            </Button>\n          </Fragment>\n        ),\n      },\n    ];\n\n    return (\n      <LayoutPage\n        pageTitle=\"Topology\"\n        pageSubTitle=\"Defines the network topology and the specification of the sensors, actuators and the devices\"\n      >\n        <Dropdown\n          overlay={\n            <Menu>\n              <Menu.Item key=\"model:3\">\n                <a href={`/models/new-model-${Date.now()}`}>\n                  <ClearOutlined /> Create New\n                </a>\n              </Menu.Item>\n              <Menu.Item\n                key=\"model:1\"\n                onClick={() => this.inputFileDOM.click()}\n              >\n                <ImportOutlined /> Import From File\n                <input\n                  type=\"file\"\n                  onChange={(event) => this.onUpload(event.target.files)}\n                  ref={(input) => {\n                    this.inputFileDOM = input;\n                  }}\n                  style={{ display: \"none\" }}\n                  accept=\".json\"\n                  multiple={false}\n                />\n              </Menu.Item>\n            </Menu>\n          }\n          trigger={[\"click\"]}\n        >\n          <Button\n            className=\"ant-dropdown-link\"\n            onClick={(e) => e.preventDefault()}\n            style={{ marginBottom: \"15px\" }}\n          >\n            Add Model <DownOutlined />\n          </Button>\n        </Dropdown>\n        <Table columns={columns} dataSource={dataSource} />\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ allModels, simulationStatus }) => ({\n  allModels,\n  simulationStatus,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAllModels: () => dispatch(requestAllModels()),\n  fetchSimulationStatus: () => dispatch(requestSimulationStatus()),\n  deleteModel: (modelFileName) => dispatch(requestDeleteModel(modelFileName)),\n  duplicateModel: (modelFileName) =>\n    dispatch(requestDuplicateModel(modelFileName)),\n  importNewModel: (model) => dispatch(requestAddNewModel(model)),\n  startSimulation: (modelFileName) =>\n    dispatch(requestStartSimulation({ modelFileName })),\n  stopSimulation: (modelFileName) =>\n    dispatch(requestStopSimulation(modelFileName)),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(ModelListPage);\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Menu, Dropdown, Table } from \"antd\";\nimport {\n  ClearOutlined,\n  ImportOutlined,\n  DownOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  CaretRightOutlined,\n  StopOutlined,\n} from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestAllDataRecorders,\n  requestDeleteDataRecorder,\n  requestDuplicateDataRecorder,\n  requestAddNewDataRecorder,\n  requestStartDataRecorder,\n  requestDataRecorderStatus,\n  requestStopDataRecorder,\n} from \"../actions\";\nimport { getObjectId } from \"../utils\";\n\nclass DataRecorderListPage extends Component {\n  onUpload(files) {\n    const fileReader = new FileReader();\n    fileReader.onloadend = () => {\n      try {\n        const newDataRecorder = JSON.parse(fileReader.result);\n        this.props.importNewDataRecorder(newDataRecorder);\n      } catch (error) {\n        this.props.setNotification({ type: \"error\", message: error });\n      }\n    };\n    fileReader.readAsText(files[0]);\n  }\n\n  componentDidMount() {\n    this.props.fetchAllDataRecorders();\n    this.props.fetchDataRecorderStatus();\n  }\n\n  render() {\n    const {\n      allDataRecorders,\n      deleteDataRecorder,\n      duplicateDataRecorder,\n      startDataRecorder,\n      dataRecorderStatus,\n      stopDataRecorder,\n    } = this.props;\n    const dataSource = allDataRecorders.map((model, index) => {\n      let recorderId = null;\n      if (model) {\n        recorderId = getObjectId(model.replace(\".json\", \"\"));\n      }\n      let isRunning = false;\n      if (dataRecorderStatus) {\n        if (dataRecorderStatus[recorderId]) {\n          if (dataRecorderStatus[recorderId].isRunning) isRunning = true;\n        }\n      }\n      return {\n        name: model,\n        key: index,\n        isRunning,\n      };\n    });\n    const columns = [\n      {\n        title: \"Name\",\n        key: \"data\",\n        render: (model) => (\n          <a href={`/data-recorders/${model.name}`}>\n            {model.name.replace(\".json\", \"\")}\n          </a>\n        ),\n      },\n      {\n        title: \"Action\",\n        key: \"action\",\n        width: 350,\n        render: (item) => (\n          <Fragment>\n            {item.isRunning ? (\n              <Button\n                style={{ marginRight: 10, paddingRight: 10 }}\n                size=\"small\"\n                type=\"primary\"\n                danger\n                onClick={() => stopDataRecorder(item.name)}\n              >\n                <StopOutlined /> Stop\n              </Button>\n            ) : (\n              <Button\n                style={{ marginRight: 10 }}\n                size=\"small\"\n                type=\"dashed\"\n                onClick={() => startDataRecorder(item.name)}\n              >\n                <CaretRightOutlined /> Start\n              </Button>\n            )}\n            <Button\n              style={{ marginRight: 10 }}\n              size=\"small\"\n              onClick={() => duplicateDataRecorder(item.name)}\n            >\n              <CopyOutlined /> Duplicate\n            </Button>\n            <Button\n              size=\"small\"\n              onClick={() => deleteDataRecorder(item.name)}\n              danger\n            >\n              <DeleteOutlined />\n              Delete\n            </Button>\n          </Fragment>\n        ),\n      },\n    ];\n\n    return (\n      <LayoutPage\n        pageTitle=\"DataRecorder\"\n        pageSubTitle=\"DataRecorder will collect data from the target environment and store the data into the DataStorage and also can forward the data into the simulation environment\"\n      >\n        <Dropdown\n          overlay={\n            <Menu>\n              <Menu.Item key=\"DataRecorder:3\">\n                <a href={`/data-recorders/new-DataRecorder-${Date.now()}`}>\n                  <ClearOutlined /> Create New\n                </a>\n              </Menu.Item>\n              <Menu.Item\n                key=\"DataRecorder:1\"\n                onClick={() => this.inputFileDOM.click()}\n              >\n                <ImportOutlined /> Import From File\n                <input\n                  type=\"file\"\n                  onChange={(event) => this.onUpload(event.target.files)}\n                  ref={(input) => {\n                    this.inputFileDOM = input;\n                  }}\n                  style={{ display: \"none\" }}\n                  accept=\".json\"\n                  multiple={false}\n                />\n              </Menu.Item>\n            </Menu>\n          }\n          trigger={[\"click\"]}\n        >\n          <Button\n            className=\"ant-dropdown-link\"\n            onClick={(e) => e.preventDefault()}\n            style={{ marginBottom: \"15px\" }}\n          >\n            Add DataRecorder <DownOutlined />\n          </Button>\n        </Dropdown>\n\n        <Table columns={columns} dataSource={dataSource} />\n        <p></p>\n        <a href={`/logs/data-recorders`}>View Logs</a>\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ allDataRecorders, dataRecorderStatus }) => ({\n  allDataRecorders,\n  dataRecorderStatus,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAllDataRecorders: () => dispatch(requestAllDataRecorders()),\n  fetchDataRecorderStatus: () => dispatch(requestDataRecorderStatus()),\n  startDataRecorder: (dataRecorderFileName) =>\n    dispatch(requestStartDataRecorder(dataRecorderFileName)),\n  stopDataRecorder: (dataRecorderFileName) =>\n    dispatch(requestStopDataRecorder(dataRecorderFileName)),\n  deleteDataRecorder: (dataRecorderFileName) =>\n    dispatch(requestDeleteDataRecorder(dataRecorderFileName)),\n\n  duplicateDataRecorder: (dataRecorderFileName) =>\n    dispatch(requestDuplicateDataRecorder(dataRecorderFileName)),\n  importNewDataRecorder: (dataRecorder) =>\n    dispatch(requestAddNewDataRecorder(dataRecorder)),\n});\n\nexport default connect(\n  mapPropsToStates,\n  mapDispatchToProps\n)(DataRecorderListPage);\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Switch, Form, List, Typography, Divider, Alert } from \"antd\";\nimport {\n  SwitcherOutlined,\n  ExportOutlined,\n  CaretRightOutlined,\n  StopOutlined,\n} from \"@ant-design/icons\";\n\nimport {\n  requestDataRecorder,\n  requestAddNewDataRecorder,\n  requestUpdateDataRecorder,\n  showModal,\n  changeDataRecorderName,\n  requestStartDataRecorder,\n  requestDataRecorderStatus,\n  requestStopDataRecorder,\n  requestDataStorage,\n} from \"../actions\";\nimport JSONView from \"../components/JSONView\";\nimport LayoutPage from \"./LayoutPage\";\n\nimport {\n  getQuery,\n  getLastPath,\n  updateObjectByPath,\n  deepCloneObject,\n  getObjectId\n} from \"../utils\";\nimport {\n  FormEditableTextItem,\n  FormSelectItem,\n  FormTextAreaItem,\n} from \"../components/FormItems\";\nimport ConnectionConfig from \"../components/ConnectionConfig\";\nimport CollapseForm from \"../components/CollapseForm\";\n\nconst { Text } = Typography;\n\nconst DataRecorderItem = ({\n  data,\n  onChange,\n  onDelete,\n  onDuplicate,\n  onEnable,\n}) => (\n  <CollapseForm\n    title={`${data.name}`}\n    extra={\n      <Fragment>\n        <Switch\n          defaultChecked={data.enable ? true : false}\n          checkedChildren=\"Enable\"\n          unCheckedChildren=\"Disable\"\n          onClick={(value, event) => {\n            event.stopPropagation();\n            onEnable();\n          }}\n          style={{ marginRight: 10 }}\n        />\n        <Button\n          onClick={(event) => {\n            event.stopPropagation();\n            onDuplicate();\n          }}\n          size=\"small\"\n          style={{ marginRight: 10 }}\n        >\n          Duplicate\n        </Button>\n        <Button\n          onClick={(event) => {\n            event.stopPropagation();\n            onDelete();\n          }}\n          size=\"small\"\n          danger\n        >\n          Delete\n        </Button>\n      </Fragment>\n    }\n  >\n    <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n      <FormEditableTextItem\n        label=\"Name\"\n        defaultValue={data.name}\n        onChange={(newName) => onChange(\"name\", newName)}\n      />\n      <FormEditableTextItem\n        label=\"Id\"\n        defaultValue={data.id}\n        onChange={(newId) => onChange(\"id\", newId)}\n      />\n      <Divider orientation=\"left\">Source </Divider>\n      <FormSelectItem\n        label=\"Protocol\"\n        defaultValue={data.source.protocol}\n        onChange={(v) => onChange(\"source.protocol\", v)}\n        options={[\"MQTT\", \"MQTTS\"]}\n      />\n      <ConnectionConfig\n        defaultValue={data.source.connConfig}\n        dataPath={\"source.connConfig\"}\n        onDataChange={onChange}\n        type={data.source.protocol}\n      />\n      <List\n        header={<strong>Upstreams ({data.source.upStreams.length})</strong>}\n        footer={\n          <Button\n            onClick={() => {\n              const newUpStreams = [\n                ...data.source.upStreams,\n                `new-up-stream-${Date.now()}`,\n              ];\n              onChange(\"source.upStreams\", newUpStreams);\n            }}\n          >\n            Add New UpStream\n          </Button>\n        }\n        size=\"small\"\n        bordered\n        dataSource={data.source.upStreams}\n        renderItem={(item, index) => (\n          <List.Item\n            actions={[\n              <Button\n                size=\"small\"\n                danger\n                key=\"delete\"\n                onClick={() => {\n                  if (data.source.upStreams.length === 1) {\n                    onChange(\"source.upStreams\", []);\n                  } else {\n                    let newUpStreams = [...data.source.upStreams];\n                    newUpStreams.splice(index, 1);\n                    onChange(\"source.upStreams\", newUpStreams);\n                  }\n                }}\n              >\n                Delete\n              </Button>,\n            ]}\n          >\n            <Text\n              editable={{\n                onChange: (v) => onChange(`source.upStreams[${index}]`, v),\n              }}\n            >\n              {item}\n            </Text>\n          </List.Item>\n        )}\n      />\n      <p></p>\n      <List\n        header={<strong>Downstreams ({data.source.downStreams.length})</strong>}\n        footer={\n          <Button\n            onClick={() => {\n              const newDownStreams = [\n                ...data.source.downStreams,\n                `new-down-stream-${Date.now()}`,\n              ];\n              onChange(\"source.downStreams\", newDownStreams);\n            }}\n          >\n            Add New DownStream\n          </Button>\n        }\n        size=\"small\"\n        bordered\n        dataSource={data.source.downStreams}\n        renderItem={(item, index) => (\n          <List.Item\n            actions={[\n              <Button\n                size=\"small\"\n                danger\n                key=\"delete\"\n                onClick={() => {\n                  if (data.source.downStreams.length === 1) {\n                    onChange(\"source.downStreams\", []);\n                  } else {\n                    let newDownstreams = [...data.source.downStreams];\n                    newDownstreams.splice(index, 1);\n                    onChange(\"source.downStreams\", newDownstreams);\n                  }\n                }}\n              >\n                Delete\n              </Button>,\n            ]}\n          >\n            <Text\n              value={item}\n              editable={{\n                onChange: (v) => onChange(`source.downStreams[${index}]`, v),\n              }}\n            >\n              {item}\n            </Text>\n          </List.Item>\n        )}\n      />\n      <Divider orientation=\"left\">Forward </Divider>\n      {data.forward ? (\n        <Fragment>\n          <FormSelectItem\n            label=\"Protocol\"\n            defaultValue={data.forward.protocol}\n            onChange={(v) => onChange(\"forward.protocol\", v)}\n            options={[\"MQTT\", \"MQTTS\"]}\n          />\n          <ConnectionConfig\n            defaultValue={data.forward.connConfig}\n            dataPath={\"forward.connConfig\"}\n            onDataChange={onChange}\n            type={data.forward.protocol}\n          />\n          <Button danger onClick={() => onChange(\"forward\", null)}>\n            Remove Forward\n          </Button>\n        </Fragment>\n      ) : (\n        <Button\n          onClick={() =>\n            onChange(\"forward\", {\n              protocol: \"MQTT\",\n              connConfig: {\n                host: \"localhost\",\n                port: 1883,\n                options: null,\n              },\n            })\n          }\n        >\n          Add Forward\n        </Button>\n      )}\n    </Form>\n  </CollapseForm>\n);\n\nconst newTempDataRecorder = (name) => {\n  const currentTime = Date.now();\n  return {\n    name: name,\n    dataRecorders: [],\n    dataset: {\n      id: `new-data-set-id-${currentTime}`,\n      name: `new-data-set-name-${currentTime}`,\n      description: `new-data-set-description-${currentTime}`,\n      tags: [\"generated\"],\n    },\n  };\n};\n\nconst newDataRecorder = () => {\n  const currentTime = Date.now();\n  return {\n    id: `id-new-data-recorder-${currentTime}`,\n    name: `name-new-data-recorder-${currentTime}`,\n    enable: false,\n    source: {\n      protocol: \"MQTT\",\n      connConfig: {\n        host: \"localhost\",\n        port: 1883,\n        options: null,\n      },\n      upStreams: [],\n      downStreams: [],\n    },\n  };\n};\n\nclass DataRecorderPage extends Component {\n  constructor(props) {\n    super(props);\n    let dataRecorderFileName = decodeURI(getLastPath());\n    let isNewDataRecorder = dataRecorderFileName.indexOf(\".json\") === -1;\n    this.state = {\n      dataRecorderFileName: isNewDataRecorder\n        ? `${dataRecorderFileName}.json`\n        : dataRecorderFileName,\n      tempDataRecorder: isNewDataRecorder\n        ? newTempDataRecorder(dataRecorderFileName)\n        : {},\n      isNewDataRecorder,\n      isChanged: false,\n    };\n\n    this.onDataRecorderChange = this.onDataRecorderChange.bind(this);\n  }\n\n  componentDidMount() {\n    let dataRecorderFileName = decodeURI(getLastPath());\n    const {\n      requestDataRecorder,\n      fetchDataRecorderStatus,\n      fetchDataStorage,\n    } = this.props;\n    if (dataRecorderFileName.indexOf(\".json\") === -1) {\n      // This is a new DataRecorder page\n      this.setState({\n        dataRecorderFileName,\n        tempDataRecorder: newTempDataRecorder(dataRecorderFileName),\n        isNewDataRecorder: true,\n      });\n    } else {\n      requestDataRecorder(dataRecorderFileName);\n      this.setState({ dataRecorderFileName, isNewDataRecorder: false });\n      fetchDataRecorderStatus();\n    }\n    fetchDataStorage();\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { dataRecorder } = newProps;\n    if (dataRecorder) {\n      this.setState({\n        tempDataRecorder: deepCloneObject(newProps.dataRecorder),\n      });\n    }\n  }\n\n  onDataRecorderChange(newDataRecorder) {\n    this.setState({\n      tempDataRecorder: newDataRecorder,\n      isChanged: true,\n    });\n  }\n\n  onDataChange(dataPath, value) {\n    this.setState((prevState) => {\n      const newData = { ...prevState.tempDataRecorder };\n      updateObjectByPath(newData, dataPath, value);\n      return { tempDataRecorder: newData, error: null, isChanged: true };\n    });\n  }\n\n  addNewDataRecorder() {\n    this.setState((prevState) => ({\n      tempDataRecorder: {\n        ...prevState.tempDataRecorder,\n        dataRecorders: [\n          ...prevState.tempDataRecorder.dataRecorders,\n          newDataRecorder(),\n        ],\n      },\n      isChanged: true,\n    }));\n  }\n\n  exportModel(model) {\n    if (model) {\n      const fileData = JSON.stringify(model);\n      const blob = new Blob([fileData], { type: \"text/json\" });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.download = `${model.name.replace(/ /g, \"\")}.json`;\n      link.href = url;\n      link.click();\n    }\n  }\n\n  addCustomDataStorage() {\n    const { dataStorage } = this.props;\n    if (dataStorage) {\n      this.onDataChange(\"dataStorage\", deepCloneObject(dataStorage));\n    } else {\n      this.onDataChange(\"dataStorage\", {\n        protocol: \"MONGODB\",\n        connConfig: {\n          host: \"localhost\",\n          port: 27017,\n          username: null,\n          password: null,\n          dbname: \"my_db_name\",\n          options: null,\n        },\n      });\n    }\n  }\n\n  render() {\n    const {\n      dataRecorderFileName,\n      tempDataRecorder,\n      isNewDataRecorder,\n      isChanged,\n    } = this.state;\n    const {\n      addNewDataRecorder,\n      updateDataRecorder,\n      startDataRecorder,\n      dataRecorderStatus,\n      stopDataRecorder,\n    } = this.props;\n    const recorderId = getObjectId(\n      dataRecorderFileName.indexOf(\".json\")\n        ? dataRecorderFileName.replace(\".json\", \"\")\n        : dataRecorderFileName\n    );\n    console.log(recorderId);\n    let recorderStatus = null;\n    if (dataRecorderStatus && dataRecorderStatus[recorderId]) {\n      recorderStatus = dataRecorderStatus[recorderId];\n    }\n    let viewType = getQuery(\"view\");\n    if (!viewType) viewType = \"form\";\n    let view = null;\n    //TODO: Fix JSON view - do not reload while editting\n    if (viewType === \"json\") {\n      view = (\n        <JSONView\n          value={tempDataRecorder}\n          onChange={this.onDataRecorderChange}\n        />\n      );\n    } else {\n      view = (\n        <Fragment>\n          <p></p>\n          <FormEditableTextItem\n            label=\"Name\"\n            defaultValue={tempDataRecorder.name}\n            onChange={(newName) => this.onDataChange(\"name\", newName)}\n          />\n          {tempDataRecorder.dataset && (\n            <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n              <Divider orientation=\"left\">Data Storage </Divider>\n              {tempDataRecorder.dataStorage ? (\n                <Fragment>\n                  <ConnectionConfig\n                    defaultValue={tempDataRecorder.dataStorage.connConfig}\n                    dataPath={\"dataStorage.connConfig\"}\n                    onDataChange={(dataPath, value) =>\n                      this.onDataChange(dataPath, value)\n                    }\n                    type={tempDataRecorder.dataStorage.protocol}\n                  />\n                  <Button\n                    danger\n                    onClick={() => this.onDataChange(\"dataStorage\", null)}\n                  >\n                    Remove Custom Data Storage\n                  </Button>\n                </Fragment>\n              ) : (\n                <Fragment>\n                  <p>\n                    Use{\" \"}\n                    <a href=\"/data-storage\" target=\"_blank\">\n                      Default Data Storage\n                    </a>\n                  </p>\n                  <Button onClick={() => this.addCustomDataStorage()}>\n                    Add Custom Data Storage\n                  </Button>\n                </Fragment>\n              )}\n              <Divider orientation=\"left\">Dataset </Divider>\n              <p>Define the Dataset to save the recorded data</p>\n              <FormEditableTextItem\n                label=\"Id\"\n                placeholder=\"Dataset Id\"\n                defaultValue={tempDataRecorder.dataset.id}\n                onChange={(value) => this.onDataChange(\"dataset.id\", value)}\n              />\n              <FormEditableTextItem\n                label=\"Name\"\n                placeholder=\"Name\"\n                defaultValue={tempDataRecorder.dataset.name}\n                onChange={(value) => this.onDataChange(\"dataset.name\", value)}\n              />\n              <FormTextAreaItem\n                label=\"Description\"\n                placeholder=\"Description\"\n                defaultValue={tempDataRecorder.dataset.description}\n                onChange={(value) =>\n                  this.onDataChange(\"dataset.description\", value)\n                }\n              />\n              <FormEditableTextItem\n                label=\"Tags\"\n                placeholder=\"Tags\"\n                defaultValue={JSON.stringify(tempDataRecorder.dataset.tags)}\n                onChange={(value) =>\n                  this.onDataChange(\"dataset.tags\", JSON.parse(value))\n                }\n              />\n            </Form>\n          )}\n          <Divider orientation=\"left\">Data Recorders </Divider>\n          {tempDataRecorder.dataRecorders ? (\n            <Fragment>\n              <p>\n                Number of recorders: {tempDataRecorder.dataRecorders.length}\n              </p>\n              <Button onClick={() => this.addNewDataRecorder()}>\n                Add New Data Recorder\n              </Button>\n              {tempDataRecorder.dataRecorders.map((dr, index) => (\n                <DataRecorderItem\n                  key={index}\n                  data={dr}\n                  onChange={(dataPath, value) =>\n                    this.onDataChange(\n                      `dataRecorders[${index}].${dataPath}`,\n                      value\n                    )\n                  }\n                  onEnable={() => {\n                    this.onDataChange(\n                      `dataRecorders[${index}].enable`,\n                      !dr.enable\n                    );\n                  }}\n                  onDelete={() => {\n                    let newDataRecorders = [...tempDataRecorder.dataRecorders];\n                    newDataRecorders.splice(index, 1);\n                    this.onDataChange(\"dataRecorders\", newDataRecorders);\n                  }}\n                  onDuplicate={() => {\n                    let dataRecorder = {\n                      ...dr,\n                      id: `${dr.id}-duplicated`,\n                      name: `${dr.name} [duplicated]`,\n                    };\n                    let newDataRecorders = [\n                      ...tempDataRecorder.dataRecorders,\n                      dataRecorder,\n                    ];\n                    this.onDataChange(\"dataRecorders\", newDataRecorders);\n                  }}\n                />\n              ))}\n            </Fragment>\n          ) : (\n            <Button onClick={() => this.addNewDataRecorder()}>\n              Add New Data Recorder\n            </Button>\n          )}\n          <p></p>\n        </Fragment>\n      );\n    }\n\n    return (\n      <LayoutPage>\n        {recorderStatus && (\n          <Alert\n            style={{ marginBottom: \"15px\" }}\n            message={\n              <div>\n                <p>Model: {recorderStatus.model}</p>\n                <p>Status: {recorderStatus.isRunning ? 'Recording' : 'Stopped'}</p>\n                <p>\n                  Started time:{\" \"}\n                  {new Date(recorderStatus.startedTime).toLocaleTimeString()}\n                </p>\n                {recorderStatus.endTime && (\n                  <p>\n                    End time:{\" \"}\n                    {new Date(recorderStatus.endTime).toLocaleTimeString()}\n                  </p>\n                )}\n                <p>\n                  Log file:{\" \"}\n                  <a\n                    href={`/logs/data-recorders?logFile=${recorderStatus.logFile}`}\n                  >\n                    {recorderStatus.logFile}\n                  </a>\n                </p>\n                {tempDataRecorder.dataset && (\n                  <Fragment>\n                    Dataset:{\" \"}\n                    <a href={`/data-sets/${tempDataRecorder.dataset.id}`}>\n                      {tempDataRecorder.dataset.name}\n                    </a>\n                  </Fragment>\n                )}\n\n              </div>\n            }\n            type={recorderStatus.isRunning ? \"success\" : \"warning\"}\n          />\n        )}\n        <a\n          href={`${window.location.pathname}?view=${\n            viewType === \"json\" ? \"form\" : \"json\"\n          }`}\n          style={{ marginRight: 10 }}\n        >\n          <SwitcherOutlined /> Switch View\n        </a>\n        <Button\n          style={{ marginRight: 10 }}\n          onClick={() => this.exportModel(tempDataRecorder)}\n        >\n          <ExportOutlined />\n          Export Model\n        </Button>\n        {recorderStatus && recorderStatus.isRunning ? (\n          <Button\n            type=\"danger\"\n            onClick={() => stopDataRecorder(dataRecorderFileName)}\n          >\n            <StopOutlined /> Stop\n          </Button>\n        ) : (\n          <Button\n            type=\"primary\"\n            key=\"item-start\"\n            onClick={() => startDataRecorder(dataRecorderFileName)}\n            disabled={\n              (recorderStatus && recorderStatus.isRunning) || isChanged\n                ? true\n                : false\n            }\n          >\n            <CaretRightOutlined /> Start\n          </Button>\n        )}\n        <p></p>\n        {view}\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            if (isNewDataRecorder) {\n              addNewDataRecorder(tempDataRecorder);\n            } else {\n              updateDataRecorder(dataRecorderFileName, tempDataRecorder);\n            }\n            this.setState({ isChanged: false });\n          }}\n          size=\"large\"\n          style={{\n            position: \"fixed\",\n            top: 80,\n            right: 20,\n          }}\n          disabled={isChanged ? false : true}\n        >\n          Save\n        </Button>\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({\n  dataRecorder,\n  dataRecorderStatus,\n  dataStorage,\n}) => ({\n  dataRecorder,\n  dataRecorderStatus,\n  dataStorage: dataStorage.connConfig,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchDataStorage: () => dispatch(requestDataStorage()),\n  requestDataRecorder: (dataRecorderFileName) =>\n    dispatch(requestDataRecorder(dataRecorderFileName)),\n  fetchDataRecorderStatus: () => dispatch(requestDataRecorderStatus()),\n  addNewDataRecorder: (newDataRecorder) =>\n    dispatch(requestAddNewDataRecorder(newDataRecorder)),\n  updateDataRecorder: (dataRecorderFileName, dataRecorder) =>\n    dispatch(requestUpdateDataRecorder({ dataRecorderFileName, dataRecorder })),\n  showModal: (formID) => dispatch(showModal(formID)),\n  changeDataRecorderName: (newName) =>\n    dispatch(changeDataRecorderName(newName)),\n  startDataRecorder: (dataRecorderFileName) =>\n    dispatch(requestStartDataRecorder(dataRecorderFileName)),\n  stopDataRecorder: (fileName) => dispatch(requestStopDataRecorder(fileName)),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(DataRecorderPage);\n","import React from \"react\";\nimport TSModal from \"../TSModal\";\nimport { Checkbox, List } from \"antd\";\n\nconst SelectionModal = ({\n  onCancel,\n  onChange,\n  enable,\n  options,\n  defaultValue,\n  title\n}) => (\n  <TSModal\n    title={title}\n    visible={enable}\n    onCancel={() => onCancel()}\n    footer={[]}\n  >\n    <Checkbox.Group\n      style={{ width: \"100%\" }}\n      defaultValue={defaultValue}\n      onChange={(values) => onChange(values)}\n    >\n      <List\n        size=\"small\"\n        dataSource={options}\n        renderItem={(item) => (\n          <List.Item>\n            <Checkbox value={item.id}>{item.id}</Checkbox>\n          </List.Item>\n        )}\n      />\n    </Checkbox.Group>\n  </TSModal>\n);\nexport default SelectionModal;\n","import SelectionModal from './SelectionModal';\nimport './style.css';\nexport default SelectionModal;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Table, Menu, Dropdown, Button, Form } from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestTestCampaign,\n  requestAddNewTestCampaign,\n  requestUpdateTestCampaign,\n  requestAllTestCases,\n} from \"../actions\";\nimport { FormEditableTextItem } from \"../components/FormItems\";\nimport SelectionModal from \"../components/SelectionModal\";\nimport { getLastPath } from \"../utils\";\n\n//TODO: add test case\nclass TestCampaignPage extends Component {\n  constructor(props) {\n    super(props);\n    const { testCampaign } = props;\n    if (testCampaign) {\n      const { id, name, description, testCaseIds } = testCampaign;\n      this.state = {\n        id,\n        originalId: id,\n        name,\n        description,\n        testCaseIds,\n        isChanged: false,\n        isNew: false,\n        showTestCaseModal: false,\n      };\n    } else {\n      const currentTime = Date.now();\n      const tcId = getLastPath();\n      this.state = {\n        id: tcId,\n        originalId: null,\n        name: `new-test-campaign-${currentTime}-name`,\n        description: `new-test-campaign-${currentTime}-description`,\n        testCaseIds: [],\n        isChanged: true,\n        isNew: true,\n        showTestCaseModal: false,\n      };\n    }\n  }\n\n  componentDidMount() {\n    const tcId = getLastPath();\n    this.props.fetchTestCampaign(tcId);\n    this.props.fetchTestCases();\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { testCampaign } = newProps;\n    if (testCampaign) {\n      const { id, name, description, testCaseIds } = testCampaign;\n      this.setState({\n        id,\n        originalId: id,\n        name,\n        description,\n        testCaseIds,\n        isChanged: false,\n        isNew: false,\n      });\n    }\n  }\n\n  moveTestCaseUp(index) {\n    const { testCaseIds } = this.state;\n    let newTestCaseIds = [...testCaseIds];\n    const selectTC = newTestCaseIds[index];\n    newTestCaseIds[index] = newTestCaseIds[index - 1];\n    newTestCaseIds[index - 1] = selectTC;\n    this.setState({ testCaseIds: newTestCaseIds, isChanged: true });\n  }\n\n  moveTestCaseDown(index) {\n    const { testCaseIds } = this.state;\n    let newTestCaseIds = [...testCaseIds];\n    const selectTC = newTestCaseIds[index];\n    newTestCaseIds[index] = newTestCaseIds[index + 1];\n    newTestCaseIds[index + 1] = selectTC;\n    this.setState({ testCaseIds: newTestCaseIds, isChanged: true });\n  }\n\n  removeTestCase(index) {\n    const { testCaseIds } = this.state;\n    let newTestCaseIds = [...testCaseIds];\n    newTestCaseIds.splice(index, 1);\n    this.setState({ testCaseIds: newTestCaseIds, isChanged: true });\n  }\n\n  updateTestCaseIds(values) {\n    this.setState({ testCaseIds: values, isChanged: true });\n  }\n\n  updateId(newId) {\n    if (newId !== this.state.originalId) {\n      this.setState({ id: newId, isChanged: true });\n    }\n  }\n  updateName(newName) {\n    this.setState({ name: newName, isChanged: true });\n  }\n  updateDescription(newDescription) {\n    this.setState({ description: newDescription, isChanged: true });\n  }\n\n  saveTestCampaign() {\n    const {\n      id,\n      name,\n      description,\n      testCaseIds,\n      originalId,\n      isNew,\n    } = this.state;\n    if (isNew) {\n      this.props.addNewTestCampaign({ id, name, description, testCaseIds });\n      this.setState({ isChanged: false, isNew: false, originalId: id });\n    } else {\n      this.props.updateTestCampaign(originalId, {\n        id,\n        name,\n        description,\n        testCaseIds,\n      });\n      this.setState({ isChanged: false, originalId: id });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      name,\n      description,\n      testCaseIds,\n      isChanged,\n      showTestCaseModal,\n    } = this.state;\n\n    const dataSource = testCaseIds.map((tcId, index) => ({\n      id: tcId,\n      key: index,\n    }));\n    const columns = [\n      {\n        title: \"Id\",\n        key: \"data\",\n        render: (tc) => <a href={`/test-cases/${tc.id}`}>{tc.id}</a>,\n      },\n      {\n        title: \"Action\",\n        key: \"data\",\n        render: (tc) => (\n          <Dropdown\n            overlay={\n              <Menu>\n                {tc.key > 0 && (\n                  <Menu.Item\n                    key=\"moveup\"\n                    onClick={() => this.moveTestCaseUp(tc.key)}\n                  >\n                    Move Up\n                  </Menu.Item>\n                )}\n                {tc.key < testCaseIds.length - 1 && (\n                  <Menu.Item\n                    key=\"movedown\"\n                    onClick={() => this.moveTestCaseDown(tc.key)}\n                  >\n                    Move Down\n                  </Menu.Item>\n                )}\n                <Menu.Item\n                  key=\"delete\"\n                  onClick={() => this.removeTestCase(tc.key)}\n                >\n                  Remove\n                </Menu.Item>\n              </Menu>\n            }\n          >\n            <a\n              className=\"ant-dropdown-link\"\n              onClick={(e) => e.preventDefault()}\n            >\n              <Button>\n                Action <DownOutlined />\n              </Button>\n            </a>\n          </Dropdown>\n        ),\n      },\n    ];\n    return (\n      <LayoutPage\n        pageTitle={name}\n        pageSubTitle=\"View and update the test campaign detail\"\n      >\n        <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n          <FormEditableTextItem\n            label=\"Id\"\n            defaultValue={id}\n            onChange={(newId) => this.updateId(newId)}\n          />\n          <FormEditableTextItem\n            label=\"Name\"\n            defaultValue={name}\n            onChange={(newName) => this.updateName(newName)}\n          />\n          <FormEditableTextItem\n            label=\"Description\"\n            defaultValue={description}\n            onChange={(newDescription) =>\n              this.updateDescription(newDescription)\n            }\n          />\n        </Form>\n        <Button\n          style={{ marginBottom: \"10px\", marginRight: 10 }}\n          onClick={() => {\n            if (showTestCaseModal === false) {\n              this.setState({ showTestCaseModal: true });\n            }\n          }}\n        >\n          Add Test Case\n          <SelectionModal\n            title=\"Select test cases\"\n            enable={showTestCaseModal}\n            onCancel={() => {\n              this.setState({ showTestCaseModal: false });\n            }}\n            defaultValue={testCaseIds}\n            options={this.props.allTestCases}\n            onChange={(values) => this.updateTestCaseIds(values)}\n          />\n        </Button>\n        <a href={`/reports/?testCampaignId=${id}`}>\n          <Button>View All Campaign's Reports</Button>\n        </a>\n        <Table columns={columns} dataSource={dataSource} />\n        <Button\n          onClick={() => this.saveTestCampaign()}\n          disabled={isChanged ? false : true}\n          type=\"primary\"\n          size=\"large\"\n          style={{\n            position: \"fixed\",\n            top: 80,\n            right: 20,\n          }}\n        >\n          Save\n        </Button>\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ testCampaigns, testCases }) => ({\n  testCampaign: testCampaigns.currentTestCampaign,\n  allTestCases: testCases.allTestCases,\n  runningStatus: testCampaigns.runningStatus,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchTestCampaign: (testCampaignId) =>\n    dispatch(requestTestCampaign(testCampaignId)),\n  fetchTestCases: () => dispatch(requestAllTestCases()),\n  updateTestCampaign: (originalId, updatedTestCampaign) =>\n    dispatch(\n      requestUpdateTestCampaign({\n        id: originalId,\n        testCampaign: updatedTestCampaign,\n      })\n    ),\n  addNewTestCampaign: (testCampaign) =>\n    dispatch(requestAddNewTestCampaign(testCampaign)),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(TestCampaignPage);\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Table, Button } from \"antd\";\nimport { DeleteOutlined, CopyOutlined } from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestAllTestCases,\n  requestAddNewTestCase,\n  requestDeleteTestCase,\n} from \"../actions\";\n\nclass TestCaseListPage extends Component {\n\n  componentDidMount() {\n    this.props.fetchTestCases();\n  }\n\n  duplicateTestCase(tc) {\n    const newTc = {\n      id: `${tc.id}-[duplicated]`,\n      name: `${tc.name}-[duplicated]`,\n      description: tc.description,\n      testCaseIds: tc.testCaseIds,\n    };\n    this.props.addNewTestCase(newTc);\n  }\n\n  render() {\n    const { testCases, deleteTestCase } = this.props;\n    const dataSource = testCases.map((tc) => ({ ...tc, key: tc.id }));\n    const columns = [\n      {\n        title: \"Id\",\n        key: \"data\",\n        render: (tc) => <a href={`/test-cases/${tc.id}`}> {tc.name} </a>,\n      },\n      {\n        title: \"Action\",\n        key: \"data\",\n        width: 300,\n        render: (tc) => (\n          <Fragment>\n            <Button size=\"small\" style={{marginRight: 10}} onClick={() => this.duplicateTestCase(tc)}><CopyOutlined/> Duplicate</Button>\n            <Button size=\"small\" danger onClick={() => deleteTestCase(tc.id)}>\n            <DeleteOutlined /> Delete\n            </Button>\n          </Fragment>\n        ),\n      },\n    ];\n    return (\n      <LayoutPage\n        pageTitle=\"Test Case\"\n        pageSubTitle=\"All the test cases\"\n      >\n        <a href={`/test-cases/new-case-${Date.now()}`}>\n          <Button style={{ marginBottom: \"10px\" }}>Add New Case</Button>\n        </a>\n        <Table columns={columns} dataSource={dataSource} />\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ testCases }) => ({\n  testCases: testCases.allTestCases,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchTestCases: () => dispatch(requestAllTestCases()),\n  deleteTestCase: (testCaseId) =>\n    dispatch(requestDeleteTestCase(testCaseId)),\n  addNewTestCase: (testCase) =>\n    dispatch(requestAddNewTestCase(testCase)),\n});\n\nexport default connect(\n  mapPropsToStates,\n  mapDispatchToProps\n)(TestCaseListPage);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport moment from 'moment';\nimport { Table, Menu, Dropdown, Button, Form } from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestTestCase,\n  requestAddNewTestCase,\n  requestUpdateTestCase,\n  requestAllModels,\n  requestAllDatasets,\n} from \"../actions\";\nimport { FormEditableTextItem, FormSelectItem } from \"../components/FormItems\";\nimport { getLastPath } from \"../utils\";\nimport SelectionModal from \"../components/SelectionModal\";\nclass TestCasePage extends Component {\n  constructor(props) {\n    super(props);\n    const { testCase } = props;\n    if (testCase) {\n      const {\n        id,\n        name,\n        description,\n        tags,\n        modelFileName,\n        datasetIds,\n      } = testCase;\n      this.state = {\n        id,\n        originalId: id,\n        name,\n        description,\n        tags,\n        modelFileName,\n        datasetIds,\n        isChanged: false,\n        isNew: false,\n        showDatasetModal: false,\n      };\n    } else {\n      const currentTime = Date.now();\n      const dsId = getLastPath();\n      this.state = {\n        id: dsId,\n        originalId: null,\n        name: `new-test-case-${currentTime}-name`,\n        description: `new-test-case-${currentTime}-description`,\n        tags: [],\n        modelFileName: null,\n        datasetIds: [],\n        isChanged: true,\n        isNew: true,\n        showDatasetModal: false,\n      };\n    }\n  }\n\n  componentDidMount() {\n    const dsId = getLastPath();\n    this.props.fetchTestCase(dsId);\n    this.props.fetchModelFiles();\n    this.props.fetchDatasets();\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { testCase } = newProps;\n    if (testCase) {\n      const {\n        id,\n        name,\n        description,\n        tags,\n        modelFileName,\n        datasetIds,\n      } = testCase;\n      this.setState({\n        id,\n        originalId: id,\n        name,\n        description,\n        tags,\n        modelFileName,\n        datasetIds,\n        isChanged: false,\n        isNew: false,\n      });\n    }\n  }\n\n  moveDatasetUp(index) {\n    const { datasetIds } = this.state;\n    let newDatasetIds = [...datasetIds];\n    const selectDS = newDatasetIds[index];\n    newDatasetIds[index] = newDatasetIds[index - 1];\n    newDatasetIds[index - 1] = selectDS;\n    this.setState({ datasetIds: newDatasetIds, isChanged: true });\n  }\n\n  moveDatasetDown(index) {\n    const { datasetIds } = this.state;\n    let newDatasetIds = [...datasetIds];\n    const selectDS = newDatasetIds[index];\n    newDatasetIds[index] = newDatasetIds[index + 1];\n    newDatasetIds[index + 1] = selectDS;\n    this.setState({ datasetIds: newDatasetIds, isChanged: true });\n  }\n\n  removeDataset(index) {\n    const { datasetIds } = this.state;\n    let newDatasetIds = [...datasetIds];\n    newDatasetIds.splice(index, 1);\n    this.setState({ datasetIds: newDatasetIds, isChanged: true });\n  }\n\n  updateDatasets(newDatasets) {\n    this.setState({ datasetIds: newDatasets, isChanged: true });\n  }\n\n  updateId(newId) {\n    if (newId !== this.state.originalId) {\n      this.setState({ id: newId, isChanged: true });\n    }\n  }\n  updateName(newName) {\n    this.setState({ name: newName, isChanged: true });\n  }\n\n  updateDescription(newDescription) {\n    this.setState({ description: newDescription, isChanged: true });\n  }\n\n  updateModelFileName(newModelFileName) {\n    this.setState({ modelFileName: newModelFileName, isChanged: true });\n  }\n\n  updateTags(newTags) {\n    this.setState({ tags: JSON.parse(newTags), isChanged: true });\n  }\n\n  saveTestCase() {\n    const {\n      id,\n      name,\n      description,\n      tags,\n      modelFileName,\n      datasetIds,\n      originalId,\n      isNew,\n    } = this.state;\n    if (isNew) {\n      this.props.addNewTestCase({\n        id,\n        name,\n        description,\n        tags,\n        modelFileName,\n        datasetIds,\n      });\n      this.setState({ isChanged: false, isNew: false, originalId: id });\n    } else {\n      this.props.updateTestCase(originalId, {\n        id,\n        name,\n        description,\n        tags,\n        modelFileName,\n        datasetIds,\n      });\n      this.setState({ isChanged: false, originalId: id });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      name,\n      description,\n      tags,\n      modelFileName,\n      datasetIds,\n      isChanged,\n      showDatasetModal,\n    } = this.state;\n    const { allModels, allDatasets } = this.props;\n    const dataSource = [];\n\n    allDatasets.map((ds) => {\n        if (datasetIds.indexOf(ds.id) > -1) {\n          dataSource.push({...ds, key: dataSource.length});\n        }\n      });\n    const columns = [\n      {\n        title: \"Id\",\n        width: 300,\n        key: \"data\",\n        render: (ds) => <a href={`/data-sets/${ds.id}`}>{ds.id}</a>,\n      },\n      {\n        title: \"Name\",\n        key: \"data\",\n        render: (ds) => ds.name,\n      },\n      {\n        title: \"Created At\",\n        key: \"data\",\n        sorter: (a, b) => a.createdAt - b.createdAt,\n        render: (ds) => moment(ds.createdAt).format('MMMM Do YYYY, h:mm:ss a'),\n        width: 300,\n      },\n      {\n        width: 150,\n        title: \"Action\",\n        key: \"data\",\n        render: (ds) => (\n          <Dropdown\n            overlay={\n              <Menu>\n                {ds.key > 0 && (\n                  <Menu.Item\n                    key=\"moveup\"\n                    onClick={() => this.moveDatasetUp(ds.key)}\n                  >\n                    Move Up\n                  </Menu.Item>\n                )}\n                {ds.key < dataSource.length - 1 && (\n                  <Menu.Item\n                    key=\"movedown\"\n                    onClick={() => this.moveDatasetDown(ds.key)}\n                  >\n                    Move Down\n                  </Menu.Item>\n                )}\n                <Menu.Item\n                  key=\"delete\"\n                  onClick={() => this.removeDataset(ds.key)}\n                >\n                  Remove\n                </Menu.Item>\n              </Menu>\n            }\n          >\n            <a\n              className=\"ant-dropdown-link\"\n              onClick={(e) => e.preventDefault()}\n            >\n              <Button>\n                Action <DownOutlined />\n              </Button>\n            </a>\n          </Dropdown>\n        ),\n      },\n    ];\n    // TODO: improve the tags view: https://ant.design/components/tag/\n    // - color\n    // - action remove/add new tags\n    return (\n      <LayoutPage\n        pageTitle={name}\n        pageSubTitle=\"View and update a test case\"\n      >\n        <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n          <FormEditableTextItem\n            label=\"Id\"\n            defaultValue={id}\n            onChange={(newId) => this.updateId(newId)}\n          />\n          <FormEditableTextItem\n            label=\"Name\"\n            defaultValue={name}\n            onChange={(newName) => this.updateName(newName)}\n          />\n          <FormEditableTextItem\n            label=\"Description\"\n            defaultValue={description}\n            onChange={(newDescription) =>\n              this.updateDescription(newDescription)\n            }\n          />\n          <FormSelectItem\n            label=\"Model File Name\"\n            defaultValue={modelFileName}\n            options={allModels}\n            onChange={(newModelFileName) =>\n              this.updateModelFileName(newModelFileName)\n            }\n          />\n          <FormEditableTextItem\n            label=\"Tags\"\n            defaultValue={JSON.stringify(tags)}\n            onChange={(newTags) => this.updateTags(newTags)}\n          />\n        </Form>\n        <Button\n          style={{ marginBottom: \"10px\" }}\n          onClick={() => {\n            if (showDatasetModal === false) {\n              this.setState({ showDatasetModal: true });\n            }\n          }}\n        >\n          Add Dataset\n          <SelectionModal\n            title=\"Dataset\"\n            enable={showDatasetModal}\n            onCancel={() => {\n              this.setState({ showDatasetModal: false });\n            }}\n            defaultValue={datasetIds}\n            options={allDatasets}\n            onChange={(values) => this.updateDatasets(values)}\n          />\n        </Button>\n        <Table columns={columns} dataSource={dataSource} />\n          <Button\n            onClick={() => this.saveTestCase()}\n            disabled={isChanged ? false : true}\n            type=\"primary\"\n            size=\"large\"\n            style={{\n              position: \"fixed\",\n              top: 80,\n              right: 20,\n            }}\n          >\n            Save\n          </Button>\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ testCases, allModels, datasets }) => ({\n  testCase: testCases.currentTestCase,\n  allModels,\n  allDatasets: datasets.allDatasets,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchModelFiles: () => dispatch(requestAllModels()),\n  fetchTestCase: (testCaseId) => dispatch(requestTestCase(testCaseId)),\n  fetchDatasets: () => dispatch(requestAllDatasets()),\n  updateTestCase: (originalId, updatedTestCase) =>\n    dispatch(\n      requestUpdateTestCase({\n        id: originalId,\n        testCase: updatedTestCase,\n      })\n    ),\n  addNewTestCase: (testCase) => dispatch(requestAddNewTestCase(testCase)),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(TestCasePage);\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport { Table, Button } from \"antd\";\nimport {\n  CaretRightOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n} from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestAllDatasets,\n  requestAddNewDataset,\n  requestDeleteDataset,\n} from \"../actions\";\n\nclass DatasetListPage extends Component {\n  componentDidMount() {\n    this.props.fetchDatasets();\n  }\n\n  /**\n   * - id\n- name\n- tags\n- description\n- createdAt/ lastModified\n- source:  \n   + GENERATED\n   + MUTATED\n   + RECORDED\n\n   * @param {Object} ds The selected dataset to be duplicated\n   */\n  duplicateDataset(ds) {\n    const currentTime = Date.now();\n    const newDS = {\n      id: `${ds.id}-[duplicated]`,\n      name: `${ds.name}-[duplicated]`,\n      description: ds.description,\n      tags: ds.tags,\n      createdAt: currentTime,\n      lastModified: currentTime,\n      source: \"MUTATED\",\n    };\n    this.props.addNewDataset(newDS);\n  }\n\n  render() {\n    const { datasets, deleteDataset } = this.props;\n    const dataSource = datasets.map((ds, index) => ({ ...ds, key: index }));\n    const columns = [\n      {\n        title: \"Created At\",\n        key: \"data\",\n        sorter: (a, b) => a.createdAt - b.createdAt,\n        render: (ds) => moment(ds.createdAt).format(\"MMMM Do YYYY, h:mm:ss a\"),\n        width: 300,\n      },\n      {\n        title: \"Id\",\n        key: \"data\",\n        render: (ds) => <a href={`/data-sets/${ds.id}`}> {ds.id} </a>,\n      },\n      {\n        title: \"Action\",\n        key: \"data\",\n        width: 350,\n        render: (ds) => (\n          <Fragment>\n            <Button size=\"small\" type=\"dashed\" style={{ marginRight: 10 }}>\n              <a href={`/simulation?datasetId=${ds.id}`}>\n                <CaretRightOutlined /> Simulate\n              </a>\n            </Button>\n            <Button\n              size=\"small\"\n              style={{ marginRight: 10 }}\n              onClick={() => this.duplicateDataset(ds)}\n            >\n              <CopyOutlined /> Duplicate\n            </Button>\n            <Button size=\"small\" danger onClick={() => deleteDataset(ds.id)}>\n              <DeleteOutlined /> Delete\n            </Button>\n          </Fragment>\n        ),\n      },\n    ];\n    return (\n      <LayoutPage pageTitle=\"Dataset\" pageSubTitle=\"All the datasets\">\n        <a href={`/data-sets/new-dataset-${Date.now()}`}>\n          <Button style={{ marginBottom: \"10px\" }}>Add New Dataset</Button>\n        </a>\n        <Table columns={columns} dataSource={dataSource} />\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ datasets }) => ({\n  datasets: datasets.allDatasets,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchDatasets: () => dispatch(requestAllDatasets()),\n  deleteDataset: (datasetId) => dispatch(requestDeleteDataset(datasetId)),\n  addNewDataset: (dataset) => dispatch(requestAddNewDataset(dataset)),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(DatasetListPage);\n","import React, { Component } from \"react\";\nimport TSModal from \"../TSModal\";\nimport { Form, Button } from \"antd\";\nimport {\n  updateObjectByPath,\n  deepCloneObject,\n} from \"../../utils\";\nimport {\n  FormSwitchItem,\n  FormEditableTextItem,\n  FormTextNotEditableItem,\n} from \"../FormItems\";\n\nconst initEvent = () => ({\n  timestamp: Date.now(),\n  topic: `topic-${Date.now()}`,\n  isSensorData: false,\n  values: `values-${Date.now()}`,\n  datasetId: `datasetId-${Date.now()}`,\n});\n\nclass EventModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      event: props.event? deepCloneObject(props.event) : initEvent(),\n    };\n  }\n\n  onDataChange(dataPath, value) {\n    this.setState((prevState) => {\n      const newData = { ...prevState.event };\n      updateObjectByPath(newData, dataPath, value);\n      return { event: newData};\n    });\n  }\n\n  render() {\n    const { event } = this.state;\n    const {timestamp, topic, isSensorData, values, datasetId } = event;\n    const {onCancel, onOK, enable } = this.props;\n    const footer = [\n      <Button key=\"cancel\" onClick={() => onCancel()}>\n        Cancel\n      </Button>,\n      <Button key=\"ok\" type=\"primary\" onClick={() => onOK(event)}>\n        OK\n      </Button>,\n    ];\n\n    return (\n      <TSModal\n        title={\"Event\"}\n        visible={enable}\n        onCancel={() => onCancel()}\n        footer={footer}\n      >\n        <Form\n          labelCol={{\n            span: 4,\n          }}\n          wrapperCol={{\n            span: 14,\n          }}\n        >\n          <FormEditableTextItem\n            label=\"Timestamp\"\n            defaultValue={timestamp}\n            onChange={(v) => this.onDataChange(\"timestamp\", v)}\n            helpText=\"The timestamp of the event\"\n          />\n          <FormEditableTextItem\n            label=\"Topic\"\n            defaultValue={topic}\n            onChange={(v) => this.onDataChange(\"topic\", v)}\n            helpText=\"The MQTT/STOMP topic on which the actuator will be listening to receive actuated data\"\n          />\n          <FormSwitchItem\n            label=\"Is Sensor Data\"\n            onChange={(v) => this.onDataChange(`isSensorData`, v)}\n            checked={isSensorData ? true : false}\n            checkedChildren={\"data sent by sensor\"}\n            unCheckedChildren={\"data received by actuator\"}\n            helpText=\"True if this is the data sent by sensor\"\n          />\n          <FormTextNotEditableItem\n            label=\"Dataset Id\"\n            value={datasetId}\n            helpText=\"The timestamp of the event\"\n          />\n          <FormEditableTextItem\n            label=\"Value\"\n            defaultValue={JSON.stringify(values)}\n            onChange={(v) => this.onDataChange(\"values\", JSON.parse(v))}\n            helpText=\"The value of the event\"\n          />\n        </Form>\n      </TSModal>\n    );\n  }\n}\n\nexport default EventModal;","import EventModal from './EventModal';\nimport './style.css';\nexport default EventModal;","import React, { Component } from \"react\";\n\nimport { Table, Menu, Dropdown, Button } from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\nimport EventModal from \"../EventModal\";\nimport { FormParagraphItem } from \"../FormItems\";\nclass EventStream extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeEventModal: null,\n    };\n  }\n\n  changeActiveEventModal(id) {\n    this.setState({ activeEventModal: id });\n  }\n\n  render() {\n    const { events, deleteEvent, addNewEvent, updateEvent, title } = this.props;\n    let sensors = [];\n    let actuators = [];\n    let sensorTopicFilters = [];\n    let actuatorTopicFilters = [];\n    const eventStreams = [];\n    let startTime = 0;\n    if (events.length > 0) startTime = events[0].timestamp;\n    for (let index = 0; index < events.length; index++) {\n      const event = events[index];\n      if (event.isSensorData) {\n        eventStreams.push({\n          ...event,\n          viewTime: event.timestamp - startTime,\n          key: index,\n          sensorValues: event.values,\n          sensorTopic: event.topic,\n        });\n        if (sensors.indexOf(event.topic) === -1) {\n          sensors.push(event.topic);\n          sensorTopicFilters.push({ text: event.topic, value: event.topic });\n        }\n      } else {\n        eventStreams.push({\n          ...event,\n          viewTime: event.timestamp - startTime,\n          key: index,\n          actuatorValues: event.values,\n          actuatorTopic: event.topic,\n        });\n        if (actuators.indexOf(event.topic) === -1) {\n          // This is a new actuator\n          actuators.push(event.topic);\n          actuatorTopicFilters.push({ text: event.topic, value: event.topic });\n        }\n      }\n    }\n\n    const columns = [\n      {\n        title: \"Index\",\n        key: \"index\",\n        dataIndex: \"key\",\n        render: (ts) => ts,\n        width: 50,\n      },\n      {\n        title: \"Timestamp\",\n        key: \"timestamp\",\n        dataIndex: \"timestamp\",\n        sorter: (a, b) => a.timestamp - b.timestamp,\n        render: (ts) => ts,\n        width: 150,\n      },\n      {\n        title: \"Time\",\n        key: \"viewTime\",\n        dataIndex: \"viewTime\",\n        sorter: (a, b) => a.viewTime - b.viewTime,\n        render: (ts) => ts,\n        width: 150,\n      },\n      {\n        title: `Sensor (${sensors.length})`,\n        children: [\n          {\n            title: \"Topic\",\n            key: \"sensorTopic\",\n            filters: sensorTopicFilters,\n            onFilter: (value, data) => data.sensorTopic === value,\n            render: (data) => (\n              <FormParagraphItem\n                value={data.sensorTopic}\n                rows={1}\n                expandable={true}\n              />\n            ),\n            width: 350,\n          },\n          {\n            title: \"Values\",\n            key: \"sensorValues\",\n            dataIndex: \"sensorValues\",\n            render: (value) => {\n              let showValue =\n                typeof value === \"string\" ? value : JSON.stringify(value);\n              return (\n                <FormParagraphItem\n                  value={showValue}\n                  rows={1}\n                  expandable={true}\n                />\n              );\n            },\n          },\n        ],\n      },\n      {\n        title: `Actuator (${actuators.length})`,\n        children: [\n          {\n            title: \"Topic\",\n            key: \"actuatorTopic\",\n            filters: actuatorTopicFilters,\n            onFilter: (value, data) => data.actuatorTopic === value,\n            width: 350,\n            render: (data) => {\n              if (data.actuatorTopic) {\n                return (\n                  <FormParagraphItem\n                    value={data.actuatorTopic}\n                    rows={1}\n                    expandable={true}\n                  />\n                );\n              }\n              return null;\n            },\n          },\n          {\n            title: \"Values\",\n            key: \"actuatorValues\",\n            dataIndex: \"actuatorValues\",\n            render: (value) => {\n              let showValue =\n                typeof value === \"string\" ? value : JSON.stringify(value);\n              return (\n                <FormParagraphItem\n                  value={showValue}\n                  rows={1}\n                  expandable={true}\n                />\n              );\n            },\n          },\n        ],\n      },\n    ];\n    if (deleteEvent || addNewEvent || updateEvent) {\n      columns.push({\n        title: \"Action\",\n        key: \"data\",\n        width: 100,\n        render: (event) => (\n          <Dropdown\n            overlay={\n              <Menu>\n                {deleteEvent && (\n                  <Menu.Item\n                    key=\"delete\"\n                    onClick={() => deleteEvent(event._id)}\n                  >\n                    Delete\n                  </Menu.Item>\n                )}\n                {addNewEvent && (\n                  <Menu.Item key=\"duplicate\" onClick={() => addNewEvent(event)}>\n                    Duplicate\n                  </Menu.Item>\n                )}\n                {updateEvent && (\n                  <Menu.Item\n                    key=\"mutate\"\n                    onClick={() => {\n                      if (this.state.activeEventModal === null) {\n                        this.changeActiveEventModal(event._id);\n                      }\n                    }}\n                  >\n                    Modify Value\n                    <EventModal\n                      event={event}\n                      enable={event._id === this.state.activeEventModal}\n                      onCancel={() => {\n                        this.changeActiveEventModal(null);\n                      }}\n                      onOK={(newEvent) => {\n                        updateEvent(event._id, newEvent);\n                        this.changeActiveEventModal(null);\n                      }}\n                    />\n                  </Menu.Item>\n                )}\n              </Menu>\n            }\n          >\n            <a\n              className=\"ant-dropdown-link\"\n              onClick={(e) => e.preventDefault()}\n            >\n              <Button>\n                Select Action <DownOutlined />\n              </Button>\n            </a>\n          </Dropdown>\n        ),\n      });\n    }\n    if (title) {\n      return (\n        <Table\n          bordered\n          columns={columns}\n          dataSource={eventStreams}\n          title={() => title}\n        />\n      );\n    } else {\n      return <Table bordered columns={columns} dataSource={eventStreams} />;\n    }\n  }\n}\n\nexport default EventStream;\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Tooltip, Form } from \"antd\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestDataset,\n  requestAddNewDataset,\n  requestUpdateDataset,\n  requestEventsByDatasetId,\n  requestAddNewEvent,\n  requestDeleteEvent,\n  requestUpdateEvent,\n} from \"../actions\";\nimport {\n  FormEditableTextItem,\n  FormSelectItem,\n  FormTextNotEditableItem,\n} from \"../components/FormItems\";\nimport { getLastPath } from \"../utils\";\nimport EventModal from \"../components/EventModal\";\nimport EventStream from \"../components/EventStream/EventStream\";\n\n/**\n * - id\n- name\n- tags\n- description\n- createdAt/ lastModified\n- source:\n   + GENERATED\n   + MUTATED\n   + RECORDED\n\n */\n\nconst initEvent = (dsId) => ({\n  _id: `new-event-id`,\n  timestamp: Date.now(),\n  topic: `topic-${Date.now()}`,\n  isSensorData: false,\n  values: `values-${Date.now()}`,\n  datasetId: dsId,\n});\n\nclass DatasetPage extends Component {\n  constructor(props) {\n    super(props);\n    const { dataset } = props;\n    if (dataset) {\n      const {\n        id,\n        name,\n        description,\n        tags,\n        createdAt,\n        lastModified,\n        source,\n      } = dataset;\n      this.state = {\n        id,\n        originalId: id,\n        name,\n        description,\n        tags,\n        createdAt,\n        lastModified,\n        source,\n        isChanged: false,\n        events: [],\n        isNew: false,\n        newEvent: initEvent(id),\n        activeEventModal: null,\n        eventPage: 0,\n      };\n    } else {\n      const currentTime = Date.now();\n      const dsId = getLastPath();\n      this.state = {\n        id: dsId,\n        originalId: null,\n        name: `new-dataset-${currentTime}-name`,\n        description: `new-dataset-${currentTime}-description`,\n        tags: [],\n        createdAt: currentTime,\n        lastModified: currentTime,\n        source: \"GENERATED\",\n        isChanged: true,\n        isNew: true,\n        events: [],\n        newEvent: initEvent(dsId),\n        activeEventModal: null,\n        eventPage: 0\n      };\n    }\n  }\n\n  requestEvents() {\n    const dsId = getLastPath();\n    const {page} = this.state;\n    let startTime = 0;\n    let endTime = Date.now();\n    this.props.fetchEvents(dsId, startTime, endTime, page);\n    this.setState({page: (page + 1)});\n  }\n\n  componentDidMount() {\n    const dsId = getLastPath();\n    this.props.fetchDataset(dsId);\n    this.requestEvents();\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { dataset, events } = newProps;\n    if (dataset) {\n      const {\n        id,\n        name,\n        description,\n        tags,\n        createdAt,\n        lastModified,\n        source,\n      } = dataset;\n      this.setState({\n        id,\n        originalId: id,\n        name,\n        description,\n        tags,\n        createdAt,\n        lastModified,\n        source,\n        isChanged: false,\n        isNew: false,\n        activeEventModal: null,\n      });\n    }\n\n    if (events) {\n      this.setState({ events });\n    }\n  }\n\n  moveEventUp(index) {\n    const { events } = this.state;\n    let newEvents = [...events];\n    const selectDS = newEvents[index];\n    newEvents[index] = newEvents[index - 1];\n    newEvents[index - 1] = selectDS;\n    this.setState({ events: newEvents, isChanged: true });\n  }\n\n  moveEventDown(index) {\n    const { events } = this.state;\n    let newEvents = [...events];\n    const selectDS = newEvents[index];\n    newEvents[index] = newEvents[index + 1];\n    newEvents[index + 1] = selectDS;\n    this.setState({ events: newEvents, isChanged: true });\n  }\n\n  updateId(newId) {\n    if (newId !== this.state.originalId) {\n      this.setState({ id: newId, isChanged: true, newEvent: initEvent(newId) });\n    }\n  }\n  updateName(newName) {\n    this.setState({ name: newName, isChanged: true });\n  }\n\n  updateDescription(newDescription) {\n    this.setState({ description: newDescription, isChanged: true });\n  }\n\n  updateSource(newSource) {\n    this.setState({ source: newSource, isChanged: true });\n  }\n\n  updateTags(newTags) {\n    this.setState({ tags: JSON.parse(newTags), isChanged: true });\n  }\n\n  savedataset() {\n    const {\n      id,\n      name,\n      description,\n      tags,\n      source,\n      datasetIds,\n      originalId,\n      isNew,\n    } = this.state;\n    if (isNew) {\n      this.props.addNewdataset({\n        id,\n        name,\n        description,\n        tags,\n        source,\n        datasetIds,\n      });\n      this.setState({ isChanged: false, isNew: false, originalId: id });\n    } else {\n      this.props.updatedataset(originalId, {\n        id,\n        name,\n        description,\n        tags,\n        source,\n        datasetIds,\n      });\n      this.setState({ isChanged: false, originalId: id });\n    }\n  }\n\n  changeActiveEventModal(id) {\n    this.setState({ activeEventModal: id });\n  }\n\n  render() {\n    const {\n      id,\n      name,\n      description,\n      tags,\n      source,\n      events,\n      isChanged,\n      newEvent,\n      isNew,\n    } = this.state;\n    const { deleteEvent, addNewEvent, updateEvent, totalNbEvents } = this.props;\n    const nbEvents = events.length;\n    const startTime = events[0] ? events[0].timestamp : 0;\n    const endTime = events[nbEvents - 1] ? events[nbEvents - 1].timestamp : 0;\n    const nbSensors = events.filter((e) => e.isSensorData).length;\n    const nbActuators = events.length - nbSensors;\n    // TODO: improve the tags view: https://ant.design/components/tag/\n    // - color\n    // - action remove/add new tags\n    // Statistic on events data\n    // - Total number of events\n    // - Number of sensors\n    // - Number of actuators\n    // - Number of gateway\n    // - Started time/ End time\n    // - Source: recorded, generated, etc..\n\n    // TODO: Make statistic beautiful\n    // TODO: implement editting event\n    return (\n      <LayoutPage\n        pageTitle={name}\n        pageSubTitle=\"View and update a dataset\"\n      >\n        <Form labelCol={{ span: 8 }} wrapperCol={{ span: 16 }}>\n          {isNew ? (\n            <Fragment>\n              <FormEditableTextItem\n                label=\"Id\"\n                defaultValue={id}\n                onChange={(newId) => this.updateId(newId)}\n              />\n              <FormSelectItem\n                label=\"Source\"\n                defaultValue={source}\n                options={[\"GENERATED\", \"MUTATED\", \"RECORDED\"]}\n                onChange={(newSource) => this.updateSource(newSource)}\n              />\n            </Fragment>\n          ) : (\n            <Fragment>\n              <FormTextNotEditableItem label=\"Id\" value={id} />\n              <FormTextNotEditableItem label=\"Source\" value={source} />\n            </Fragment>\n          )}\n\n          <FormEditableTextItem\n            label=\"Name\"\n            defaultValue={name}\n            onChange={(newName) => this.updateName(newName)}\n          />\n          <FormEditableTextItem\n            label=\"Description\"\n            defaultValue={description}\n            onChange={(newDescription) =>\n              this.updateDescription(newDescription)\n            }\n          />\n          <FormEditableTextItem\n            label=\"Tags\"\n            defaultValue={JSON.stringify(tags)}\n            onChange={(newTags) => this.updateTags(newTags)}\n          />\n          <FormTextNotEditableItem label=\"Total number of events\" value={totalNbEvents} />\n          <FormTextNotEditableItem label=\"Number of presented events\" value={nbEvents} />\n          <FormTextNotEditableItem\n            label=\"Number of sensor's events\"\n            value={nbSensors}\n          />\n          <FormTextNotEditableItem\n            label=\"Number of actuator's events\"\n            value={nbActuators}\n          />\n          <FormTextNotEditableItem\n            label=\"Started Time\"\n            value={new Date(startTime).toLocaleString()}\n          />\n          <FormTextNotEditableItem\n            label=\"Ended Time\"\n            value={new Date(endTime).toLocaleString()}\n          />\n        </Form>\n        {nbEvents < totalNbEvents ?\n          <Button\n          style={{ marginBottom: \"10px\", marginRight: 10 }}\n          onClick={() => {\n            this.requestEvents();\n          }}\n          disabled={isNew ? true : false}>\n            Get more events ({nbEvents}/{totalNbEvents})\n          </Button>: null\n        }\n        <Tooltip title=\"The dataset need to be created before adding event\">\n          <Button\n            style={{ marginBottom: \"10px\" }}\n            onClick={() => {\n              if (this.state.activeEventModal === null) {\n                this.changeActiveEventModal(newEvent._id);\n              }\n            }}\n            disabled={isNew ? true : false}\n          >\n            Add Event\n            <EventModal\n              event={newEvent}\n              enable={newEvent._id === this.state.activeEventModal}\n              onCancel={() => {\n                this.changeActiveEventModal(null);\n              }}\n              onOK={(newEvent) => {\n                const {\n                  timestamp,\n                  isSensorData,\n                  topic,\n                  datasetId,\n                  values,\n                } = newEvent;\n                this.props.addNewEvent({\n                  timestamp,\n                  isSensorData,\n                  topic,\n                  datasetId,\n                  values,\n                });\n                this.changeActiveEventModal(null);\n              }}\n            />\n          </Button>\n        </Tooltip>\n        <EventStream\n          events={events}\n          deleteEvent={deleteEvent}\n          addNewEvent={addNewEvent}\n          updateEvent={updateEvent}\n        />\n        <Button\n          onClick={() => this.savedataset()}\n          disabled={isChanged ? false : true}\n          type=\"primary\"\n          size=\"large\"\n          style={{\n            position: \"fixed\",\n            top: 80,\n            right: 20,\n          }}\n        >\n          Save\n        </Button>\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ datasets }) => ({\n  dataset: datasets.currentDataset.dataset,\n  events: datasets.currentDataset.events,\n  totalNbEvents: datasets.currentDataset.totalNbEvents,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchEvents: (datasetId, startTime, endTime, page) => dispatch(requestEventsByDatasetId({datasetId, startTime, endTime, page})),\n  fetchDataset: (datasetId) => dispatch(requestDataset(datasetId)),\n  updatedataset: (originalId, updateddataset) =>\n    dispatch(\n      requestUpdateDataset({\n        id: originalId,\n        dataset: updateddataset,\n      })\n    ),\n  addNewdataset: (dataset) => dispatch(requestAddNewDataset(dataset)),\n  addNewEvent: (event) => dispatch(requestAddNewEvent(event)),\n  updateEvent: (id, event) => dispatch(requestUpdateEvent({ id, event })),\n  deleteEvent: (eventId) => dispatch(requestDeleteEvent(eventId)),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(DatasetPage);\n\n// TODO: load more data in the table\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport LayoutPage from \"./LayoutPage\";\nimport { getObjectId, getQuery } from \"../utils\";\nimport {\n  FormSelectItem,\n  FormEditableTextItem,\n  FormTextNotEditableItem,\n  FormTextAreaItem,\n} from \"../components/FormItems\";\nimport {\n  requestAllModels,\n  requestAllDatasets,\n  requestStartSimulation,\n  requestStopSimulation,\n  requestSimulationStatus,\n} from \"../actions\";\nimport { Form, Button } from \"antd\";\nconst NONE_DATA_SET_OPTION = \"No Data Source\";\nclass SimulationPage extends Component {\n  constructor(props) {\n    super(props);\n    const currentTime = Date.now();\n    this.state = {\n      modelFileName: null,\n      datasetId: NONE_DATA_SET_OPTION,\n      newDatasetId: `dataset-id-${currentTime}`,\n      datasetName: `Dataset has been created at ${currentTime}`,\n      datasetDescription: `This is the description of the dataset created at ${currentTime}`,\n      datasetTags: [\"generated\"],\n    };\n  }\n\n  componentDidMount() {\n    const dsId = getQuery(\"datasetId\");\n    this.setState({\n      modelFileName: getQuery(\"model\"),\n      datasetId: dsId ? dsId : NONE_DATA_SET_OPTION,\n    });\n    this.props.fetchModelFiles();\n    this.props.fetchDatasets();\n    this.props.fetchSimulationStatus();\n    setInterval(() => {\n      this.props.fetchSimulationStatus();\n    }, 3000);\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (!this.state.modelFileName && newProps.allModels) {\n      this.setState({ modelFileName: newProps.allModels[0] });\n    }\n  }\n\n  onModelFileNameChange(newModel) {\n    this.setState({ modelFileName: newModel });\n  }\n\n  onDatasetIdChange(newDS) {\n    this.setState({ datasetId: newDS });\n  }\n\n  onNewDatasetIdChange(newDS) {\n    this.setState({ newDatasetId: newDS });\n  }\n\n  onDatasetNameChange(name) {\n    this.setState({ datasetName: name });\n  }\n\n  onDatasetDescriptionChange(desc) {\n    this.setState({ datasetDescription: desc });\n  }\n\n  onDatasetTagsChange(tags) {\n    this.setState({ datasetTags: tags.split(\",\") });\n  }\n\n  render() {\n    const { modelFileName } = this.state;\n    const {\n      datasetId,\n      newDatasetId,\n      datasetName,\n      datasetDescription,\n      datasetTags,\n    } = this.state;\n    const { allModels, allDatasets } = this.props;\n\n    if (modelFileName) {\n      const simId = getObjectId(modelFileName.replace(\".json\", \"\"));\n      const { simulationStatus } = this.props;\n      if (simulationStatus[simId] && simulationStatus[simId].isRunning) {\n        // Simulating mode\n        const {\n          model,\n          modelFileName,\n          datasetId,\n          newDataset,\n          logFile,\n          report,\n        } = simulationStatus[simId];\n        return (\n          <LayoutPage\n            pageTitle=\"Simulation Page\"\n            pageSubTitle=\"Manually perform a simulation\"\n          >\n            <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }}>\n              <FormSelectItem\n                label={\"Model File Name\"}\n                defaultValue={modelFileName}\n                options={allModels}\n                onChange={(value) => this.onModelFileNameChange(value)}\n              />\n              {modelFileName ? (\n                <FormTextNotEditableItem\n                  label={\"Model\"}\n                  value={\n                    <a href={`/api/models/${modelFileName}`}>{modelFileName}</a>\n                  }\n                />\n              ) : (\n                <FormTextNotEditableItem label={\"Model\"} value={model.name} />\n              )}\n\n              {datasetId && (\n                <FormTextNotEditableItem\n                  label={\"Dataset Source\"}\n                  helpText=\"The source of the data input for the simulation\"\n                  value={datasetId}\n                />\n              )}\n              <p>The data generated are stored in the dataset</p>\n              <FormTextNotEditableItem\n                label=\"Dataset Id\"\n                value={\n                  <a href={`/data-sets/${newDataset.id}`}>{newDataset.id}</a>\n                }\n              />\n              <Form.Item\n                wrapperCol={{\n                  xs: {\n                    span: 24,\n                    offset: 0,\n                  },\n                  sm: {\n                    span: 16,\n                    offset: 4,\n                  },\n                }}\n              >\n                <Button\n                  type=\"primary\"\n                  onClick={() => {\n                    this.props.stopSimulation(modelFileName);\n                  }}\n                  danger\n                >\n                  Stop\n                </Button>\n                <a href={`/logs/simulations?logFile=${logFile}`}>\n                  <Button type=\"link\">View Log</Button>\n                </a>\n                <a href={`/reports/${report.id}`}>\n                  <Button type=\"link\">View Report</Button>\n                </a>\n              </Form.Item>\n            </Form>\n            <p></p>\n            <a href={`/logs/simulations`} style={{ marginRight: 10 }}>\n              View Logs\n            </a>{\" \"}\n            <a href={`/reports`}>View Reports</a>\n          </LayoutPage>\n        );\n      }\n    }\n    const datasetOptions = allDatasets.map((ds) => ds.id);\n    return (\n      <LayoutPage\n        pageTitle=\"Simulation Page\"\n        pageSubTitle=\"Manually perform a simulation\"\n      >\n        <Form\n          labelCol={{\n            span: 4,\n          }}\n          wrapperCol={{\n            span: 14,\n          }}\n        >\n          <FormSelectItem\n            label={\"Model File Name\"}\n            defaultValue={modelFileName}\n            options={allModels}\n            onChange={(value) => this.onModelFileNameChange(value)}\n          />\n          <FormSelectItem\n            label={\"Data Source\"}\n            defaultValue={datasetId}\n            options={[...datasetOptions, NONE_DATA_SET_OPTION]}\n            onChange={(value) => this.onDatasetIdChange(value)}\n          />\n          <p>Store the generated data to a new dataset</p>\n          <FormEditableTextItem\n            label=\"Id\"\n            placeholder=\"New Dataset Id\"\n            defaultValue={newDatasetId}\n            onChange={(value) => this.onNewDatasetIdChange(value)}\n          />\n          <FormEditableTextItem\n            label=\"Name\"\n            placeholder=\"Name\"\n            defaultValue={datasetName}\n            onChange={(value) => this.onDatasetNameChange(value)}\n          />\n          <FormTextAreaItem\n            label=\"Description\"\n            defaultValue={datasetDescription}\n            onChange={(value) => this.onDatasetDescriptionChange(value)}\n          />\n          <FormEditableTextItem\n            label=\"Tags\"\n            placeholder=\"Tags\"\n            defaultValue={JSON.stringify(datasetTags)}\n            onChange={(value) => this.onDatasetTagsChange(JSON.parse(value))}\n          />\n          <Form.Item\n            wrapperCol={{\n              xs: {\n                span: 24,\n                offset: 0,\n              },\n              sm: {\n                span: 16,\n                offset: 4,\n              },\n            }}\n          >\n            <Button\n              type=\"primary\"\n              onClick={() => {\n                this.props.startSimulation(\n                  modelFileName,\n                  datasetId === NONE_DATA_SET_OPTION ? null : datasetId,\n                  {\n                    id: newDatasetId,\n                    name: datasetName,\n                    description: datasetDescription,\n                    tags: datasetTags,\n                    source: \"GENERATED\",\n                  }\n                );\n              }}\n            >\n              Start\n            </Button>\n          </Form.Item>\n        </Form>\n        <p></p>\n        <a href={`/logs/simulations`} style={{ marginRight: 10 }}>\n          View Logs\n        </a>{\" \"}\n        <a href={`/reports`}>View Reports</a>\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ allModels, datasets, simulationStatus }) => ({\n  allModels,\n  allDatasets: datasets.allDatasets,\n  simulationStatus,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchModelFiles: () => dispatch(requestAllModels()),\n  fetchDatasets: () => dispatch(requestAllDatasets()),\n  fetchSimulationStatus: () => dispatch(requestSimulationStatus()),\n  startSimulation: (modelFileName, datasetId, newDataset) =>\n    dispatch(\n      requestStartSimulation({\n        modelFileName,\n        datasetId,\n        newDataset,\n      })\n    ),\n  stopSimulation: (modelFileName) =>\n    dispatch(requestStopSimulation(modelFileName)),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(SimulationPage);\n","import React from \"react\";\nimport { Row, Col, Typography, PageHeader } from \"antd\";\nimport LayoutPage from \"./LayoutPage\";\n\nconst { Text } = Typography;\n\nconst LogLine = ({ type, time, device, message }) => (\n  <Row>\n    <Col span={4}>\n      <Text type={type}>{time}</Text>\n    </Col>\n    <Col span={5}>\n      <Text type={type}>{device}</Text>\n    </Col>\n    <Col span={15}>\n      <Text type={type}>{message}</Text>\n    </Col>\n  </Row>\n);\n\nconst LogFileContent = ({ logs, logFile }) => (\n  <LayoutPage>\n    <PageHeader className=\"site-page-header\" title={logFile} />\n    <LogLine\n      key={-1}\n      type={\"warning\"}\n      time={\"Time\"}\n      device={\"Device\"}\n      message={\"Message\"}\n    />\n    {!logs ? (\n      <p>Empty</p>\n    ) : (\n      logs.split(\"\\n\").map((log, index) => {\n        const array = log.split(\" \");\n        if (array.length < 4) {\n          return null;\n        }\n        const type = array[2] === \"info:\" ? \"secondary\" : \"danger\";\n        const time = new Date(array[0]);\n        const timeString = `${time.getHours()}:${time.getMinutes()}:${time.getSeconds()} ${time.getDay()}/${time.getMonth()}/${time.getFullYear()}`;\n        const device = array[3].replace(\"[\", \"\").replace(\"]\", \"\");\n        const message = log.split(array[3])[1];\n        return (\n          <LogLine\n            key={index}\n            type={type}\n            time={timeString}\n            device={device}\n            message={message}\n          />\n        );\n      })\n    )}\n  </LayoutPage>\n);\n\nexport default LogFileContent;\n","import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\nimport { Table, Button, PageHeader } from \"antd\";\nimport { getCreatedTimeFromFileName, getLastPath, getQuery } from \"../utils\";\n\nimport {\n  requestAllLogFiles,\n  requestDeleteLogFile,\n  requestLogFile,\n} from \"../actions\";\nimport LayoutPage from \"./LayoutPage\";\nimport LogFileContent from \"./LogFileContent\";\n\nclass LogsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tool: null,\n      isLogPage: false,\n      logFile: null,\n    };\n  }\n\n  componentDidMount() {\n    const tool = getLastPath();\n    const logFile = getQuery(\"logFile\");\n    const { fetchAllLogFiles, fetchLogs } = this.props;\n    if (logFile) {\n      fetchLogs(tool, logFile);\n      this.setState({ tool, isLogPage: true, logFile });\n    } else {\n      fetchAllLogFiles(tool);\n      this.setState({ tool, isLogPage: false });\n    }\n  }\n\n  render() {\n    const { logFiles, logs, deleteLogFile } = this.props;\n    const { tool, isLogPage, logFile } = this.state;\n    if (isLogPage) {\n      return <LogFileContent logs={logs} logFile={logFile} />;\n    }\n    const dataSource = logFiles.map((file, index) => ({\n      name: file,\n      key: index,\n      createdAt: getCreatedTimeFromFileName(file),\n    }));\n    const columns = [\n      {\n        title: \"Log File\",\n        key: \"name\",\n        dataIndex: \"name\",\n        sorter: (a, b) => a.name.localeCompare(b.name),\n        render: (name) => <a href={`/logs/${tool}?logFile=${name}`}>{name}</a>,\n      },\n      {\n        title: \"CreatedAt\",\n        key: \"createdAt\",\n        dataIndex: \"createdAt\",\n        sorter: (a, b) => a.createdAt - b.createdAt,\n        render: (createdAt) => moment(createdAt).fromNow(),\n      },\n      {\n        title: \"Action\",\n        render: (file) => (\n          <Button\n            danger\n            size=\"small\"\n            onClick={() => deleteLogFile(tool, file.name)}\n          >\n            Delete\n          </Button>\n        ),\n      },\n    ];\n    return (\n      <LayoutPage>\n        <PageHeader\n          className=\"site-page-header\"\n          title={`${logFiles.length} Log Files`}\n        />\n        <Table columns={columns} dataSource={dataSource} />\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ logs }) => ({\n  logFiles: logs.logFiles,\n  logs: logs.logs,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteLogFile: (tool, logFile) => {\n    dispatch(requestDeleteLogFile({ tool, logFile }));\n  },\n  fetchLogs: (tool, logFile) => dispatch(requestLogFile({ tool, logFile })),\n  fetchAllLogFiles: (tool) => dispatch(requestAllLogFiles(tool)),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(LogsPage);\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport { Table, Button, Tag, Menu, Dropdown } from \"antd\";\nimport { DeleteOutlined, EyeOutlined, DownOutlined, CaretRightOutlined } from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport { requestAllReports, requestDeleteReport } from \"../actions\";\nimport { getQuery } from \"../utils\";\n\nclass ReportListPage extends Component {\n  componentDidMount() {\n    const topologyFileName = getQuery(\"topologyFileName\");\n    const testCampaignId = getQuery(\"testCampaignId\");\n    const reportToken = getQuery(\"reportToken\");\n    this.props.fetchReports({ topologyFileName, testCampaignId, reportToken });\n  }\n\n  render() {\n    const { reports, deleteReport } = this.props;\n    let pageSubTitle = \"All reports\";\n    const topologyFileName = getQuery(\"topologyFileName\");\n    if (topologyFileName) {\n      pageSubTitle = `${pageSubTitle} of topology: ${topologyFileName}. `;\n    }\n    const testCampaignId = getQuery(\"testCampaignId\");\n    if (testCampaignId) {\n      pageSubTitle = `${pageSubTitle} of test campaign: ${testCampaignId}`;\n    }\n    const dataSource = reports.map((ds, index) => ({ ...ds, key: index }));\n    const columns = [\n      {\n        title: \"Created At\",\n        key: \"data\",\n        sorter: (a, b) => a.createdAt - b.createdAt,\n        render: (ds) => moment(ds.createdAt).format(\"MMMM Do YYYY, h:mm:ss a\"),\n      },\n      {\n        title: \"DatasetId\",\n        key: \"data\",\n        render: (ds) => (\n          <a href={`/data-sets/${ds.originalDatasetId}`}>\n            {ds.originalDatasetId}\n          </a>\n        ),\n      },\n      {\n        title: \"Topology\",\n        key: \"data\",\n        render: (ds) => (\n          <a href={`/models/${ds.topologyFileName}`}> {ds.topologyFileName} </a>\n        ),\n      },\n      {\n        title: \"Score\",\n        key: \"data\",\n        render: (ds) => (\n          <div>\n            {ds.score > -1 ? (\n              <div>\n                {ds.score < 0.5 ? (\n                  <Tag color={\"red\"}>Failed ({Math.round(ds.score * 100)/100})</Tag>\n                ) : (\n                  <Tag color={\"green\"}> Passed ({Math.round(ds.score * 100)/100})</Tag>\n                )}\n              </div>\n            ) : (\n              <Tag>Unknown</Tag>\n            )}\n          </div>\n        ),\n      },\n      {\n        title: \"Action\",\n        key: \"data\",\n        render: (ds) => (\n          <Dropdown\n            overlay={\n              <Menu>\n                <Menu.Item\n                  key=\"delete\"\n                  danger\n                  onClick={() => deleteReport(ds._id)}\n                  title={\"Delete this report\"}\n                >\n                  <DeleteOutlined /> Delete\n                </Menu.Item>\n                <Menu.Item key=\"view-detail\" title={\"Show detail of this report\"}>\n                  <a href={`/reports/${ds.id}`}>\n                    <EyeOutlined /> View Detail\n                  </a>\n                </Menu.Item>\n                <Menu.Item key=\"simulation\" title={\"Re-do the test of this report\"}>\n                  <a href={`/simulation?model=${ds.topologyFileName}&datasetId=${ds.originalDatasetId}`}>\n                    <CaretRightOutlined /> Simulate\n                  </a>\n                </Menu.Item>\n              </Menu>\n            }\n          >\n            <a\n              className=\"ant-dropdown-link\"\n              onClick={(e) => e.preventDefault()}\n            >\n              <Button>\n                Select Action <DownOutlined />\n              </Button>\n            </a>\n          </Dropdown>\n        ),\n      },\n    ];\n    return (\n      <LayoutPage pageTitle=\"Reports\" pageSubTitle={pageSubTitle}>\n        <Table columns={columns} dataSource={dataSource} />\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ reports }) => ({\n  reports: reports.allReports,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchReports: (options) => dispatch(requestAllReports(options)),\n  deleteReport: (reportId) => dispatch(requestDeleteReport(reportId)),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(ReportListPage);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Form } from \"antd\";\nimport moment from \"moment\";\nimport LayoutPage from \"./LayoutPage\";\nimport {\n  requestReport,\n  requestUpdateReport,\n  requestOriginalEvents,\n  requestNewEvents,\n} from \"../actions\";\nimport {\n  FormEditableTextItem,\n  FormNumberItem,\n  FormSelectItem,\n  FormTextNotEditableItem,\n} from \"../components/FormItems\";\nimport { deepCloneObject, getLastPath, updateObjectByPath } from \"../utils\";\nimport EventStream from \"../components/EventStream/EventStream\";\nimport CollapseForm from \"../components/CollapseForm\";\n\n/**\n *\n- id\n- createdAt\n- topologyFileName\n- originalDatasetId\n- newDatasetId\n- startTime\n- endTime\n- score: Number\n- testCampaignId: can be null\n\n */\n\nclass ReportPage extends Component {\n  constructor(props) {\n    super(props);\n    const { report, originalEvents, newEvents } = props;\n    if (report) {\n      const {\n        _id,\n        createdAt,\n        topologyFileName,\n        originalDatasetId,\n        newDatasetId,\n        startTime,\n        endTime,\n        testCampaignId,\n        score,\n        evaluationParameters,\n      } = report;\n      this.state = {\n        _id,\n        createdAt,\n        topologyFileName,\n        originalDatasetId,\n        newDatasetId,\n        startTime,\n        endTime,\n        testCampaignId,\n        score,\n        evaluationParameters: evaluationParameters ? deepCloneObject(evaluationParameters) : null,\n        isChanged: false,\n        page: 0,\n        originalEvents,\n        newEvents,\n        calculateScore: false\n      };\n    } else {\n      this.state = {\n        page: 0,\n      };\n    }\n  }\n\n  componentDidMount() {\n    const reportId = getLastPath();\n    this.props.fetchReport(reportId);\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { report, originalEvents, newEvents } = newProps;\n    if (report) {\n      const {\n        _id,\n        createdAt,\n        topologyFileName,\n        originalDatasetId,\n        newDatasetId,\n        startTime,\n        endTime,\n        testCampaignId,\n        score,\n        evaluationParameters,\n      } = report;\n      // if (!this.state.fetchedOriginalEvents) {\n      //   this.props.fetchOriginalEvents(originalDatasetId, startTime ? startTime: 0, endTime ? endTime : Date.now(), this.state.page);\n      //   this.setState({ fetchedOriginalEvents: true, page: (page +1) });\n      // }\n\n      // if (!this.state.fetchedNewEvents) {\n      //   this.props.fetchNewEvents(newDatasetId, page );\n      //   this.setState({ fetchedNewEvents: true , page: (page +1) });\n      // }\n\n      this.setState({\n        _id,\n        createdAt,\n        topologyFileName,\n        originalDatasetId,\n        newDatasetId,\n        startTime,\n        endTime,\n        testCampaignId,\n        score,\n        isChanged: false,\n        evaluationParameters: evaluationParameters ? deepCloneObject(evaluationParameters) : null,\n      });\n    }\n    if (originalEvents) {\n      this.setState({\n        originalEvents,\n      });\n    }\n    if (newEvents) {\n      this.setState({\n        newEvents,\n      });\n    }\n  }\n\n  onDataChange(dataPath, value) {\n    this.setState((prevState) => {\n      const newData = { ...prevState };\n      updateObjectByPath(newData, dataPath, value);\n      if (dataPath.indexOf('evaluationParameters') > -1) {\n        return { ...newData, isChanged: true, calculateScore: true };\n      }\n      return { ...newData, isChanged: true };\n    });\n  }\n\n  saveReport() {\n    const {\n      _id,\n      createdAt,\n      topologyFileName,\n      originalDatasetId,\n      newDatasetId,\n      startTime,\n      endTime,\n      testCampaignId,\n      evaluationParameters,\n      calculateScore,\n      score\n    } = this.state;\n    this.props.updateReport(_id, {\n      createdAt,\n      topologyFileName,\n      originalDatasetId,\n      newDatasetId,\n      startTime,\n      endTime,\n      testCampaignId,\n      score,\n      evaluationParameters,\n    }, calculateScore);\n    this.setState({ isChanged: false, calculateScore: false });\n  }\n\n  loadEvents() {\n    const {\n      page,\n      originalDatasetId,\n      newDatasetId,\n      startTime,\n      endTime,\n    } = this.state;\n    const { fetchOriginalEvents, fetchNewEvents } = this.props;\n    fetchOriginalEvents(\n      originalDatasetId,\n      startTime ? startTime : 0,\n      endTime ? endTime : Date.now(),\n      this.state.page\n    );\n    fetchNewEvents(newDatasetId, page);\n    this.setState({ page: page + 1 });\n  }\n\n  render() {\n    if (!this.state) {\n      return <p>Waiting for data</p>;\n    }\n\n    const {\n      _id,\n      createdAt,\n      topologyFileName,\n      originalDatasetId,\n      newDatasetId,\n      startTime,\n      endTime,\n      testCampaignId,\n      isChanged,\n      evaluationParameters,\n      page,\n      score,\n    } = this.state;\n    const { originalEvents, newEvents } = this.props;\n    let sourceEvents = [];\n    if (originalEvents) {\n      sourceEvents = originalEvents.filter(\n        (e) => e.timestamp > startTime && e.timestamp < endTime\n      );\n      // console.log(sourceEvents);\n    }\n    return (\n      <LayoutPage pageTitle={`Report ${_id}`} pageSubTitle=\"Report detail\">\n        <Form labelCol={{ span: 8 }} wrapperCol={{ span: 16 }}>\n          <FormTextNotEditableItem label=\"Id\" value={_id} />\n          <FormTextNotEditableItem\n            label=\"Created At\"\n            value={moment(createdAt).format(\"MMMM Do YYYY, h:mm:ss a\")}\n          />\n          <FormEditableTextItem\n            label=\"Topology\"\n            defaultValue={topologyFileName}\n            onChange={(newTopology) =>\n              this.onDataChange(\"topologyFileName\", newTopology)\n            }\n          />\n          <FormEditableTextItem\n            label=\"Test Campaign Id\"\n            defaultValue={testCampaignId}\n            onChange={(newTestCampaignId) =>\n              this.onDataChange(\"testCampaignId\", newTestCampaignId)\n            }\n          />\n          <FormEditableTextItem\n            label=\"Original Dataset Id\"\n            defaultValue={originalDatasetId}\n            onChange={(newOriginalDatasetId) =>\n              this.onDataChange(\"originalDatasetId\", newOriginalDatasetId)\n            }\n          />\n          <FormEditableTextItem\n            label=\"New Dataset Id\"\n            defaultValue={newDatasetId}\n            onChange={(newNewDatasetId) =>\n              this.onDataChange(\"newDatasetId\", newNewDatasetId)\n            }\n          />\n          <FormTextNotEditableItem\n            label=\"Start Time\"\n            value={moment(startTime).format(\"MMMM Do YYYY, h:mm:ss a\")}\n          />\n          <FormTextNotEditableItem\n            label=\"End Time\"\n            value={moment(endTime).format(\"MMMM Do YYYY, h:mm:ss a\")}\n          />\n          <FormTextNotEditableItem label=\"Score\" value={score} />\n          {evaluationParameters ? (\n            <CollapseForm\n              title=\"Evaluation Parameters\"\n            >\n              <FormSelectItem\n                label=\"Event Type\"\n                helpText=\"Select the type of event to take into the evaluation\"\n                defaultValue={evaluationParameters.eventType}\n                options={[\"ALL_EVENTS\",\"SENSOR_EVENTS\", \"ACTUATOR_EVENTS\"]}\n                onChange={(eventType) => this.onDataChange('evaluationParameters.eventType', eventType)}\n              />\n              <FormSelectItem\n                label=\"Metric Type\"\n                helpText=\"Select the type of metric to take into the evaluation\"\n                defaultValue={evaluationParameters.metricType}\n                options={[\"METRIC_VALUE\",\"METRIC_VALUE_TIMESTAMP\", \"METRIC_TIMESTAMP\"]}\n                onChange={(metricType) => this.onDataChange('evaluationParameters.metricType', metricType)}\n              />\n              <FormNumberItem\n                label=\"Threshold\"\n                helpText=\"Set the threshold of the similarity to be evaluated as PASSED or FAILED\"\n                defaultValue={evaluationParameters.threshold}\n                min={0}\n                max={1}\n                step={0.01}\n                onChange={(threshold) => this.onDataChange('evaluationParameters.threshold', threshold)}\n              />\n            </CollapseForm>\n          ) : (\n            <Button\n              style={{marginBottom: 10}}\n              onClick={() => this.onDataChange('evaluationParameters', {\n                threshold: 0.5,\n                eventType: \"ALL_EVENTS\",\n                metricType: \"METRIC_VALUE_TIMESTAMP\"\n              })}\n            >\n              Set Evaluation Parameters\n            </Button>\n          )}\n        </Form>\n        <Button\n          onClick={() => this.saveReport()}\n          disabled={isChanged ? false : true}\n          type=\"primary\"\n          size=\"large\"\n          style={{\n            position: \"fixed\",\n            top: 80,\n            right: 20,\n          }}\n        >\n          Save\n        </Button>\n        <Button\n          onClick={() => this.loadEvents()}\n          size=\"large\"\n          style={{\n            marginBottom: 10,\n          }}\n        >\n          {page ? \"Load More Events\" : \"Show Events\"}\n        </Button>\n        {sourceEvents && page > 0 && (\n          <EventStream\n            events={sourceEvents}\n            title={`Dataset: ${originalDatasetId} (${sourceEvents.length})`}\n          />\n        )}\n        {newEvents && page > 0 && (\n          <EventStream\n            events={newEvents}\n            title={`Dataset: ${newDatasetId} (${newEvents.length})`}\n          />\n        )}\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ reports }) => ({\n  report: reports.currentReport.report,\n  originalEvents: reports.currentReport.originalEvents,\n  newEvents: reports.currentReport.newEvents,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchReport: (reportId) => dispatch(requestReport(reportId)),\n  fetchOriginalEvents: (datasetId, startTime, endTime, page) =>\n    dispatch(requestOriginalEvents({ datasetId, startTime, endTime, page })),\n  fetchNewEvents: (datasetId, page) =>\n    dispatch(requestNewEvents({datasetId, page})),\n  updateReport: (originalId, updatedReport, newScore) =>\n    dispatch(\n      requestUpdateReport({\n        id: originalId,\n        report: updatedReport,\n        newScore\n      })\n    ),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(ReportPage);\n\n// TODO: load more data in the table\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Layout } from \"antd\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport ErrorBoundary from \"antd/lib/alert/ErrorBoundary\";\nimport TSHeader from \"./components/TSHeader\";\nimport ModelPage from \"./pages/ModelPage\";\nimport DataStoragePage from \"./pages/DataStoragePage\";\nimport TestCampaignListPage from \"./pages/TestCampaignListPage\";\nimport ModelListPage from \"./pages/ModelListPage\";\nimport DataRecorderListPage from \"./pages/DataRecorderListPage\";\nimport DataRecorderPage from \"./pages/DataRecorderPage\";\nimport TestCampaignPage from \"./pages/TestCampaignPage\";\nimport TestCaseListPage from \"./pages/TestCaseListPage\";\nimport TestCasePage from \"./pages/TestCasePage\";\nimport DatasetListPage from \"./pages/DatasetListPage\";\nimport DatasetPage from \"./pages/DatasetPage\";\nimport SimulationPage from \"./pages/SimulationPage\";\nimport LogsPage from \"./pages/LogsPage\";\nimport ReportListPage from \"./pages/ReportListPage\";\nimport ReportPage from \"./pages/ReportPage\";\n\nfunction App() {\n  return (\n    <Router>\n      <ErrorBoundary>\n        <Layout className=\"layout\" style={{ height: \"100%\" }}>\n          <TSHeader />\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={() => <Redirect to=\"/test-campaigns\" />}\n            />\n            <Route path=\"/test-campaigns/:testCampaignId\">\n              <TestCampaignPage />\n            </Route>\n            <Route path=\"/logs/:tool\">\n              <LogsPage message=\"This is the log file page\" />\n            </Route>\n            <Route path=\"/test-campaigns\">\n              <TestCampaignListPage />\n            </Route>\n            <Route path=\"/test-cases/:testCaseId\">\n              <TestCasePage />\n            </Route>\n            <Route path=\"/test-cases\">\n              <TestCaseListPage />\n            </Route>\n            <Route path=\"/data-sets/:datasetId\">\n              <DatasetPage />\n            </Route>\n            <Route path=\"/data-sets\">\n              <DatasetListPage />\n            </Route>\n            <Route path=\"/data-recorders/:dataRecorderId\">\n              <DataRecorderPage />\n            </Route>\n            <Route path=\"/data-recorders\">\n              <DataRecorderListPage />\n            </Route>\n            <Route path=\"/models/:modelId\">\n              <ModelPage />\n            </Route>\n            <Route path=\"/models\">\n              <ModelListPage />\n            </Route>\n            <Route path=\"/data-storage\">\n              <DataStoragePage />\n            </Route>\n            <Route path=\"/simulation\">\n              <SimulationPage />\n            </Route>\n            <Route path=\"/reports/:reportId\">\n              <ReportPage />\n            </Route>\n            <Route path=\"/reports\">\n              <ReportListPage />\n            </Route>\n          </Switch>\n        </Layout>\n      </ErrorBoundary>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport configStore from \"../../client/src/store\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nconst store = configStore();\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}