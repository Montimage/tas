const Thing = require('../things/Thing');
const { readJSONFile } = require("../utils");

const allThings = [];
/**
 * Stop the simulation
 */
const stopSimulator = () => {
  for (let index = 0; index < allThings.length; index++) {
    const th = allThings[index];
    th.stop();
  }
};

/**
 * Create a Device which contains the list of sensors and actuators
 * @param {Object} dev The configuration of the device
 * @param {Object} dataStorage The configuration to connect with data storage
 * @param {Object} datasetId The dataset-id of the data source
 * @param {Object} newDataset The define of the new dataset - that will be store in the database
 */
const createDevice = (dev, dataStorage, datasetId, newDataset) => {
  
  const newThing = new Thing(dev, dataStorage, datasetId, newDataset);
  
  newThing.initDevice(() => {
    newThing.start();
    allThings.push(newThing);
  });
};

/**
 * Start the simulation
 * @param {Object} model The model to be simulated
 */
const startSimulator = (model, options = null) => {
  console.log('Start simulating for the model: ', model.name);
  while(allThings.length > 0) {
    allThings.pop();
  }
  const { devices } = model;
  
  let { dataStorage, datasetId } = model;
  let newDataset = model.newDataset;
  if (options) {
    // Overwrite the value of datastorage, datasetid and new dataset
    if (options.dataStorage)  dataStorage = options.dataStorage;
    if (options.datasetId) datasetId = options.datasetId;
    if (options.newDataset) newDataset = options.newDataset;
  }

  // Create the dataset if needed
  const currentTime = Date.now();
  if (!newDataset) {
    // use a template for dataset -> all the simulated data should be stored in the data storage
    newDataset = {
      id: `data-set-${currentTime}`,
      name: `Dataset of model ${model.name} (${currentTime})`,
      description: `Dataset Generated by model ${model.name} at time ${ (new Date(currentTime)).toLocaleTimeString()}`,
      tags: ['auto-created'],
      lastModified: currentTime,
      source: 'GENERATED'
    };
  } else {
    newDataset['lastModified'] = currentTime;
    if (!newDataset['source']) newDataset['source'] = "GENERATED";
  }

  for (let index = 0; index < devices.length; index++) {
    const dev = devices[index];
    const {
      id,
      name,
      scale,
      enable
    } = dev;
    if (enable === false) continue; // skip this device
    let nbDevices = scale ? scale : 1;
    if (nbDevices === 1) {
      createDevice(dev, dataStorage, datasetId, newDataset); 
      // NOTE: All the information in the model will be transfer to each Device -> better in the future if we want to improve the performance by parallel the process
    } else {
      for (let tIndex = 0; tIndex < nbDevices; tIndex++) {
        const tID = `${id}-${tIndex}`;
        const tName = `${name}-${tIndex}`;
        createDevice({...dev, id: tID, name: tName}, dataStorage, datasetId, newDataset);
      }
    }
  }
};

const getStatsSimulator = () => {
  const stats = [];
  if (!allThings) return null;
  for (let index = 0; index < allThings.length; index++) {
    const thing = allThings[index];
    const thingStats = thing.getStats();
    if (thingStats) stats.push(thingStats);
  }
  return stats;
};

if (process.argv[2] === "test") {
  readJSONFile(process.argv[3], (err, model) => {
    if (err) {
      console.error(
        `[Simulation] [ERROR] Cannot read the config of thing:`,
        process.argv[3]
      );
      // console.error();
    } else {
      if (!model.devices || model.devices.length === 0) {
        console.error(
          `[Simulation] [ERROR] There is no simulation:`,
          process.argv[3]
        );
      } else {
        startSimulator(model);
      }
    }
  });
}

module.exports = {
  startSimulator,
  stopSimulator,
  getStatsSimulator,
};
