const Thing = require('../things/Thing');
const {
  readJSONFile
} = require("../utils");

/**
 * Simulation class presents a simulation
 */
class Simulation {
  constructor(model, options = null) {
    this.model = model;
    this.newDataset = model.newDataset;
    this.dataStorage = model.dataStorage;
    this.datasetId = model.datasetId;
    if (options) {
      // Overwrite the value of datastorage, datasetid and new dataset
      if (options.dataStorage) this.dataStorage = options.dataStorage;
      if (options.datasetId) this.datasetId = options.datasetId;
      if (options.newDataset) this.newDataset = options.newDataset;
    }

    // Create the dataset if needed
    const currentTime = Date.now();
    if (!this.newDataset) {
      // use a template for dataset -> all the simulated data should be stored in the data storage
      this.newDataset = {
        id: `data-set-${currentTime}`,
        name: `Dataset of model ${model.name} (${currentTime})`,
        description: `Dataset Generated by model ${model.name} at time ${ (new Date(currentTime)).toLocaleTimeString()}`,
        tags: ['auto-created'],
        lastModified: currentTime,
        source: 'GENERATED'
      };
    } else {
      this.newDataset['lastModified'] = currentTime;
      if (!this.newDataset['source']) this.newDataset['source'] = "GENERATED";
    }

    //
    this.allThings = [];
  }

  createDevice(devConfig) {
    const newThing = new Thing(devConfig, this.dataStorage, this.datasetId, this.newDataset);

    newThing.initDevice(() => {
      newThing.start();
      this.allThings.push(newThing);
    });
  }

  start() {
    console.log('Start simulating for the model: ', this.model.name);
    while (this.allThings.length > 0) {
      this.allThings.pop();
    }
    const {
      devices
    } = this.model;
    for (let index = 0; index < devices.length; index++) {
      const dev = devices[index];
      const {
        id,
        name,
        scale,
        enable
      } = dev;
      if (enable === false) continue; // skip this device
      let nbDevices = scale ? scale : 1;
      if (nbDevices === 1) {
        this.createDevice(dev);
        // NOTE: All the information in the model will be transfer to each Device -> better in the future if we want to improve the performance by parallel the process
      } else {
        for (let tIndex = 0; tIndex < nbDevices; tIndex++) {
          const tID = `${id}-${tIndex}`;
          const tName = `${name}-${tIndex}`;
          this.createDevice({
            ...dev,
            id: tID,
            name: tName
          });
        }
      }
    }
  }

  /**
   * Stop the simulation
   */
  stop() {
    for (let index = 0; index < this.allThings.length; index++) {
      const th = this.allThings[index];
      th.stop();
    }
  }

  getStats() {
    const stats = [];
    if (!this.allThings) return null;
    for (let index = 0; index < this.allThings.length; index++) {
      const thing = this.allThings[index];
      const thingStats = thing.getStats();
      if (thingStats) stats.push(thingStats);
    }
    return stats;
  }
}

if (process.argv[2] === "test") {
  readJSONFile(process.argv[3], (err, model) => {
    if (err) {
      console.error(
        `[Simulation] [ERROR] Cannot read the config of thing:`,
        process.argv[3]
      );
      // console.error();
    } else {
      if (!model.devices || model.devices.length === 0) {
        console.error(
          `[Simulation] [ERROR] There is no simulation:`,
          process.argv[3]
        );
      } else {
        const simulation = new Simulation(model);
        simulation.start();
      }
    }
  });
}

module.exports = Simulation;
